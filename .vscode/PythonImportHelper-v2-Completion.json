[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "pack",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "pack",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "pack",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "pack",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "queue",
        "description": "queue",
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "input_event_codes",
        "description": "input_event_codes",
        "isExtraImport": true,
        "detail": "input_event_codes",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "signal",
        "importPath": "signal",
        "description": "signal",
        "isExtraImport": true,
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "SIGINT",
        "importPath": "signal",
        "description": "signal",
        "isExtraImport": true,
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "SIGINT",
        "importPath": "signal",
        "description": "signal",
        "isExtraImport": true,
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "signal",
        "importPath": "signal",
        "description": "signal",
        "isExtraImport": true,
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "GPUtil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "GPUtil",
        "description": "GPUtil",
        "detail": "GPUtil",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "start_http_server",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "Gauge",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "Histogram",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "Info",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "which",
        "importPath": "shutil",
        "description": "shutil",
        "isExtraImport": true,
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "which",
        "importPath": "shutil",
        "description": "shutil",
        "isExtraImport": true,
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "ssl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ssl",
        "description": "ssl",
        "detail": "ssl",
        "documentation": {}
    },
    {
        "label": "http",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "http",
        "description": "http",
        "detail": "http",
        "documentation": {}
    },
    {
        "label": "concurrent",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "concurrent",
        "description": "concurrent",
        "detail": "concurrent",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "hmac",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hmac",
        "description": "hmac",
        "detail": "hmac",
        "documentation": {}
    },
    {
        "label": "websockets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "websockets",
        "description": "websockets",
        "detail": "websockets",
        "documentation": {}
    },
    {
        "label": "websockets.asyncio.server",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "websockets.asyncio.server",
        "description": "websockets.asyncio.server",
        "detail": "websockets.asyncio.server",
        "documentation": {}
    },
    {
        "label": "psutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psutil",
        "description": "psutil",
        "detail": "psutil",
        "documentation": {}
    },
    {
        "label": "Observer",
        "importPath": "watchdog.observers",
        "description": "watchdog.observers",
        "isExtraImport": true,
        "detail": "watchdog.observers",
        "documentation": {}
    },
    {
        "label": "Observer",
        "importPath": "watchdog.observers",
        "description": "watchdog.observers",
        "isExtraImport": true,
        "detail": "watchdog.observers",
        "documentation": {}
    },
    {
        "label": "FileModifiedEvent",
        "importPath": "watchdog.events",
        "description": "watchdog.events",
        "isExtraImport": true,
        "detail": "watchdog.events",
        "documentation": {}
    },
    {
        "label": "FileSystemEventHandler",
        "importPath": "watchdog.events",
        "description": "watchdog.events",
        "isExtraImport": true,
        "detail": "watchdog.events",
        "documentation": {}
    },
    {
        "label": "FileClosedEvent",
        "importPath": "watchdog.events",
        "description": "watchdog.events",
        "isExtraImport": true,
        "detail": "watchdog.events",
        "documentation": {}
    },
    {
        "label": "FileSystemEventHandler",
        "importPath": "watchdog.events",
        "description": "watchdog.events",
        "isExtraImport": true,
        "detail": "watchdog.events",
        "documentation": {}
    },
    {
        "label": "http.client",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "http.client",
        "description": "http.client",
        "detail": "http.client",
        "documentation": {}
    },
    {
        "label": "urllib.parse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "WebRTCInput",
        "importPath": "webrtc_input",
        "description": "webrtc_input",
        "isExtraImport": true,
        "detail": "webrtc_input",
        "documentation": {}
    },
    {
        "label": "WebRTCSignalling",
        "importPath": "webrtc_signalling",
        "description": "webrtc_signalling",
        "isExtraImport": true,
        "detail": "webrtc_signalling",
        "documentation": {}
    },
    {
        "label": "WebRTCSignallingErrorNoPeer",
        "importPath": "webrtc_signalling",
        "description": "webrtc_signalling",
        "isExtraImport": true,
        "detail": "webrtc_signalling",
        "documentation": {}
    },
    {
        "label": "GSTWebRTCApp",
        "importPath": "gstwebrtc_app",
        "description": "gstwebrtc_app",
        "isExtraImport": true,
        "detail": "gstwebrtc_app",
        "documentation": {}
    },
    {
        "label": "GPUMonitor",
        "importPath": "gpu_monitor",
        "description": "gpu_monitor",
        "isExtraImport": true,
        "detail": "gpu_monitor",
        "documentation": {}
    },
    {
        "label": "SystemMonitor",
        "importPath": "system_monitor",
        "description": "system_monitor",
        "isExtraImport": true,
        "detail": "system_monitor",
        "documentation": {}
    },
    {
        "label": "Metrics",
        "importPath": "metrics",
        "description": "metrics",
        "isExtraImport": true,
        "detail": "metrics",
        "documentation": {}
    },
    {
        "label": "resize_display",
        "importPath": "resize",
        "description": "resize",
        "isExtraImport": true,
        "detail": "resize",
        "documentation": {}
    },
    {
        "label": "get_new_res",
        "importPath": "resize",
        "description": "resize",
        "isExtraImport": true,
        "detail": "resize",
        "documentation": {}
    },
    {
        "label": "set_dpi",
        "importPath": "resize",
        "description": "resize",
        "isExtraImport": true,
        "detail": "resize",
        "documentation": {}
    },
    {
        "label": "set_cursor_size",
        "importPath": "resize",
        "description": "resize",
        "isExtraImport": true,
        "detail": "resize",
        "documentation": {}
    },
    {
        "label": "WebRTCSimpleServer",
        "importPath": "signalling_web",
        "description": "signalling_web",
        "isExtraImport": true,
        "detail": "signalling_web",
        "documentation": {}
    },
    {
        "label": "generate_rtc_config",
        "importPath": "signalling_web",
        "description": "signalling_web",
        "isExtraImport": true,
        "detail": "signalling_web",
        "documentation": {}
    },
    {
        "label": "Xlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "Xlib",
        "description": "Xlib",
        "detail": "Xlib",
        "documentation": {}
    },
    {
        "label": "display",
        "importPath": "Xlib",
        "description": "Xlib",
        "isExtraImport": true,
        "detail": "Xlib",
        "documentation": {}
    },
    {
        "label": "display",
        "importPath": "Xlib",
        "description": "Xlib",
        "isExtraImport": true,
        "detail": "Xlib",
        "documentation": {}
    },
    {
        "label": "X",
        "importPath": "Xlib",
        "description": "Xlib",
        "isExtraImport": true,
        "detail": "Xlib",
        "documentation": {}
    },
    {
        "label": "XK",
        "importPath": "Xlib",
        "description": "Xlib",
        "isExtraImport": true,
        "detail": "Xlib",
        "documentation": {}
    },
    {
        "label": "xfixes",
        "importPath": "Xlib.ext",
        "description": "Xlib.ext",
        "isExtraImport": true,
        "detail": "Xlib.ext",
        "documentation": {}
    },
    {
        "label": "xtest",
        "importPath": "Xlib.ext",
        "description": "Xlib.ext",
        "isExtraImport": true,
        "detail": "Xlib.ext",
        "documentation": {}
    },
    {
        "label": "xfixes",
        "importPath": "Xlib.ext",
        "description": "Xlib.ext",
        "isExtraImport": true,
        "detail": "Xlib.ext",
        "documentation": {}
    },
    {
        "label": "xtest",
        "importPath": "Xlib.ext",
        "description": "Xlib.ext",
        "isExtraImport": true,
        "detail": "Xlib.ext",
        "documentation": {}
    },
    {
        "label": "pynput",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pynput",
        "description": "pynput",
        "detail": "pynput",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "msgpack",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "msgpack",
        "description": "msgpack",
        "detail": "msgpack",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "SelkiesGamepad",
        "importPath": "gamepad",
        "description": "gamepad",
        "isExtraImport": true,
        "detail": "gamepad",
        "documentation": {}
    },
    {
        "label": "websockets.asyncio.client",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "websockets.asyncio.client",
        "description": "websockets.asyncio.client",
        "detail": "websockets.asyncio.client",
        "documentation": {}
    },
    {
        "label": "ABCMeta",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABCMeta",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "av.frame",
        "description": "av.frame",
        "isExtraImport": true,
        "detail": "av.frame",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "av.frame",
        "description": "av.frame",
        "isExtraImport": true,
        "detail": "av.frame",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "av.frame",
        "description": "av.frame",
        "isExtraImport": true,
        "detail": "av.frame",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "av.frame",
        "description": "av.frame",
        "isExtraImport": true,
        "detail": "av.frame",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "av.frame",
        "description": "av.frame",
        "isExtraImport": true,
        "detail": "av.frame",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "av.frame",
        "description": "av.frame",
        "isExtraImport": true,
        "detail": "av.frame",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "av.frame",
        "description": "av.frame",
        "isExtraImport": true,
        "detail": "av.frame",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "av.frame",
        "description": "av.frame",
        "isExtraImport": true,
        "detail": "av.frame",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "av.frame",
        "description": "av.frame",
        "isExtraImport": true,
        "detail": "av.frame",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "av.frame",
        "description": "av.frame",
        "isExtraImport": true,
        "detail": "av.frame",
        "documentation": {}
    },
    {
        "label": "Packet",
        "importPath": "av.packet",
        "description": "av.packet",
        "isExtraImport": true,
        "detail": "av.packet",
        "documentation": {}
    },
    {
        "label": "Packet",
        "importPath": "av.packet",
        "description": "av.packet",
        "isExtraImport": true,
        "detail": "av.packet",
        "documentation": {}
    },
    {
        "label": "Packet",
        "importPath": "av.packet",
        "description": "av.packet",
        "isExtraImport": true,
        "detail": "av.packet",
        "documentation": {}
    },
    {
        "label": "Packet",
        "importPath": "av.packet",
        "description": "av.packet",
        "isExtraImport": true,
        "detail": "av.packet",
        "documentation": {}
    },
    {
        "label": "Packet",
        "importPath": "av.packet",
        "description": "av.packet",
        "isExtraImport": true,
        "detail": "av.packet",
        "documentation": {}
    },
    {
        "label": "Packet",
        "importPath": "av.packet",
        "description": "av.packet",
        "isExtraImport": true,
        "detail": "av.packet",
        "documentation": {}
    },
    {
        "label": "Packet",
        "importPath": "av.packet",
        "description": "av.packet",
        "isExtraImport": true,
        "detail": "av.packet",
        "documentation": {}
    },
    {
        "label": "Packet",
        "importPath": "av.packet",
        "description": "av.packet",
        "isExtraImport": true,
        "detail": "av.packet",
        "documentation": {}
    },
    {
        "label": "fractions",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fractions",
        "description": "fractions",
        "detail": "fractions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Deque",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "av",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "av",
        "description": "av",
        "detail": "av",
        "documentation": {}
    },
    {
        "label": "AudioFrame",
        "importPath": "av",
        "description": "av",
        "isExtraImport": true,
        "detail": "av",
        "documentation": {}
    },
    {
        "label": "AudioResampler",
        "importPath": "av",
        "description": "av",
        "isExtraImport": true,
        "detail": "av",
        "documentation": {}
    },
    {
        "label": "CodecContext",
        "importPath": "av",
        "description": "av",
        "isExtraImport": true,
        "detail": "av",
        "documentation": {}
    },
    {
        "label": "AudioCodecContext",
        "importPath": "av",
        "description": "av",
        "isExtraImport": true,
        "detail": "av",
        "documentation": {}
    },
    {
        "label": "AudioFrame",
        "importPath": "av",
        "description": "av",
        "isExtraImport": true,
        "detail": "av",
        "documentation": {}
    },
    {
        "label": "AudioResampler",
        "importPath": "av",
        "description": "av",
        "isExtraImport": true,
        "detail": "av",
        "documentation": {}
    },
    {
        "label": "CodecContext",
        "importPath": "av",
        "description": "av",
        "isExtraImport": true,
        "detail": "av",
        "documentation": {}
    },
    {
        "label": "AudioFrame",
        "importPath": "av",
        "description": "av",
        "isExtraImport": true,
        "detail": "av",
        "documentation": {}
    },
    {
        "label": "AudioResampler",
        "importPath": "av",
        "description": "av",
        "isExtraImport": true,
        "detail": "av",
        "documentation": {}
    },
    {
        "label": "CodecContext",
        "importPath": "av",
        "description": "av",
        "isExtraImport": true,
        "detail": "av",
        "documentation": {}
    },
    {
        "label": "CodecContext",
        "importPath": "av",
        "description": "av",
        "isExtraImport": true,
        "detail": "av",
        "documentation": {}
    },
    {
        "label": "VideoFrame",
        "importPath": "av",
        "description": "av",
        "isExtraImport": true,
        "detail": "av",
        "documentation": {}
    },
    {
        "label": "AudioFrame",
        "importPath": "av",
        "description": "av",
        "isExtraImport": true,
        "detail": "av",
        "documentation": {}
    },
    {
        "label": "VideoFrame",
        "importPath": "av",
        "description": "av",
        "isExtraImport": true,
        "detail": "av",
        "documentation": {}
    },
    {
        "label": "AudioFrame",
        "importPath": "av",
        "description": "av",
        "isExtraImport": true,
        "detail": "av",
        "documentation": {}
    },
    {
        "label": "VideoFrame",
        "importPath": "av",
        "description": "av",
        "isExtraImport": true,
        "detail": "av",
        "documentation": {}
    },
    {
        "label": "AudioFrame",
        "importPath": "av",
        "description": "av",
        "isExtraImport": true,
        "detail": "av",
        "documentation": {}
    },
    {
        "label": "AudioFrame",
        "importPath": "av",
        "description": "av",
        "isExtraImport": true,
        "detail": "av",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "tee",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "VideoCodecContext",
        "importPath": "av.video.codeccontext",
        "description": "av.video.codeccontext",
        "isExtraImport": true,
        "detail": "av.video.codeccontext",
        "documentation": {}
    },
    {
        "label": "VideoCodecContext",
        "importPath": "av.video.codeccontext",
        "description": "av.video.codeccontext",
        "isExtraImport": true,
        "detail": "av.video.codeccontext",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "errno",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "errno",
        "description": "errno",
        "detail": "errno",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "av.container",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "av.container",
        "description": "av.container",
        "detail": "av.container",
        "documentation": {}
    },
    {
        "label": "AudioStream",
        "importPath": "av.audio",
        "description": "av.audio",
        "isExtraImport": true,
        "detail": "av.audio",
        "documentation": {}
    },
    {
        "label": "VideoStream",
        "importPath": "av.video.stream",
        "description": "av.video.stream",
        "isExtraImport": true,
        "detail": "av.video.stream",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "AsyncIOEventEmitter",
        "importPath": "pyee.asyncio",
        "description": "pyee.asyncio",
        "isExtraImport": true,
        "detail": "pyee.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOEventEmitter",
        "importPath": "pyee.asyncio",
        "description": "pyee.asyncio",
        "isExtraImport": true,
        "detail": "pyee.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOEventEmitter",
        "importPath": "pyee.asyncio",
        "description": "pyee.asyncio",
        "isExtraImport": true,
        "detail": "pyee.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOEventEmitter",
        "importPath": "pyee.asyncio",
        "description": "pyee.asyncio",
        "isExtraImport": true,
        "detail": "pyee.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOEventEmitter",
        "importPath": "pyee.asyncio",
        "description": "pyee.asyncio",
        "isExtraImport": true,
        "detail": "pyee.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOEventEmitter",
        "importPath": "pyee.asyncio",
        "description": "pyee.asyncio",
        "isExtraImport": true,
        "detail": "pyee.asyncio",
        "documentation": {}
    },
    {
        "label": "enum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "enum",
        "description": "enum",
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "binascii",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "binascii",
        "description": "binascii",
        "detail": "binascii",
        "documentation": {}
    },
    {
        "label": "pylibsrtp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pylibsrtp",
        "description": "pylibsrtp",
        "detail": "pylibsrtp",
        "documentation": {}
    },
    {
        "label": "Policy",
        "importPath": "pylibsrtp",
        "description": "pylibsrtp",
        "isExtraImport": true,
        "detail": "pylibsrtp",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "pylibsrtp",
        "description": "pylibsrtp",
        "isExtraImport": true,
        "detail": "pylibsrtp",
        "documentation": {}
    },
    {
        "label": "x509",
        "importPath": "cryptography",
        "description": "cryptography",
        "isExtraImport": true,
        "detail": "cryptography",
        "documentation": {}
    },
    {
        "label": "default_backend",
        "importPath": "cryptography.hazmat.backends",
        "description": "cryptography.hazmat.backends",
        "isExtraImport": true,
        "detail": "cryptography.hazmat.backends",
        "documentation": {}
    },
    {
        "label": "hashes",
        "importPath": "cryptography.hazmat.primitives",
        "description": "cryptography.hazmat.primitives",
        "isExtraImport": true,
        "detail": "cryptography.hazmat.primitives",
        "documentation": {}
    },
    {
        "label": "ec",
        "importPath": "cryptography.hazmat.primitives.asymmetric",
        "description": "cryptography.hazmat.primitives.asymmetric",
        "isExtraImport": true,
        "detail": "cryptography.hazmat.primitives.asymmetric",
        "documentation": {}
    },
    {
        "label": "SSL",
        "importPath": "OpenSSL",
        "description": "OpenSSL",
        "isExtraImport": true,
        "detail": "OpenSSL",
        "documentation": {}
    },
    {
        "label": "Candidate",
        "importPath": "aioice",
        "description": "aioice",
        "isExtraImport": true,
        "detail": "aioice",
        "documentation": {}
    },
    {
        "label": "Connection",
        "importPath": "aioice",
        "description": "aioice",
        "isExtraImport": true,
        "detail": "aioice",
        "documentation": {}
    },
    {
        "label": "ConnectionClosed",
        "importPath": "aioice",
        "description": "aioice",
        "isExtraImport": true,
        "detail": "aioice",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "value",
        "importPath": "google_crc32c",
        "description": "google_crc32c",
        "isExtraImport": true,
        "detail": "google_crc32c",
        "documentation": {}
    },
    {
        "label": "ipaddress",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ipaddress",
        "description": "ipaddress",
        "detail": "ipaddress",
        "documentation": {}
    },
    {
        "label": "ctypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ctypes",
        "description": "ctypes",
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "web",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "get_btn_event",
        "kind": 2,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "def get_btn_event(btn_num, btn_val):\n    ts = int((time.time() * 1000) % 1000000000)\n    # see js_event struct definition above.\n    # https://docs.python.org/3/library/struct.html\n    struct_format = 'IhBB'\n    event = struct.pack(struct_format, ts, btn_val, JS_EVENT_BUTTON, btn_num)\n    # debug\n    print(struct.unpack(struct_format, event))\n    return event\ndef get_axis_event(axis_num, axis_val):",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "get_axis_event",
        "kind": 2,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "def get_axis_event(axis_num, axis_val):\n    ts = int((time.time() * 1000) % 1000000000)\n    # see js_event struct definition above.\n    # https://docs.python.org/3/library/struct.html\n    struct_format = 'IhBB'\n    event = struct.pack(struct_format, ts, axis_val, JS_EVENT_AXIS, axis_num)\n    # debug\n    print(struct.unpack(struct_format, event))\n    return event\ndef make_config():",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "make_config",
        "kind": 2,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "def make_config():\n    cfg = XPAD_CONFIG\n    num_btns = len(cfg[\"btn_map\"])\n    num_axes = len(cfg[\"axes_map\"])\n    # zero fill array to max length.\n    btn_map = [i for i in cfg[\"btn_map\"]]\n    axes_map = [i for i in cfg[\"axes_map\"]]\n    btn_map[num_btns:MAX_BTNS] = [0 for i in range(num_btns, MAX_BTNS)]\n    axes_map[num_axes:MAX_AXES] = [0 for i in range(num_axes, MAX_AXES)]\n    struct_fmt = \"255sHH%dH%dB\" % (MAX_BTNS, MAX_AXES)",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "entrypoint",
        "kind": 2,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "def entrypoint():\n    asyncio.run(run_server())\nif __name__ == \"__main__\":\n    entrypoint()",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_MISC",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_MISC = 0x100\nBTN_0 = 0x100\nBTN_1 = 0x101\nBTN_2 = 0x102\nBTN_3 = 0x103\nBTN_4 = 0x104\nBTN_5 = 0x105\nBTN_6 = 0x106\nBTN_7 = 0x107\nBTN_8 = 0x108",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_0",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_0 = 0x100\nBTN_1 = 0x101\nBTN_2 = 0x102\nBTN_3 = 0x103\nBTN_4 = 0x104\nBTN_5 = 0x105\nBTN_6 = 0x106\nBTN_7 = 0x107\nBTN_8 = 0x108\nBTN_9 = 0x109",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_1",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_1 = 0x101\nBTN_2 = 0x102\nBTN_3 = 0x103\nBTN_4 = 0x104\nBTN_5 = 0x105\nBTN_6 = 0x106\nBTN_7 = 0x107\nBTN_8 = 0x108\nBTN_9 = 0x109\nBTN_MOUSE = 0x110",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_2",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_2 = 0x102\nBTN_3 = 0x103\nBTN_4 = 0x104\nBTN_5 = 0x105\nBTN_6 = 0x106\nBTN_7 = 0x107\nBTN_8 = 0x108\nBTN_9 = 0x109\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_3",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_3 = 0x103\nBTN_4 = 0x104\nBTN_5 = 0x105\nBTN_6 = 0x106\nBTN_7 = 0x107\nBTN_8 = 0x108\nBTN_9 = 0x109\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_4",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_4 = 0x104\nBTN_5 = 0x105\nBTN_6 = 0x106\nBTN_7 = 0x107\nBTN_8 = 0x108\nBTN_9 = 0x109\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_5",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_5 = 0x105\nBTN_6 = 0x106\nBTN_7 = 0x107\nBTN_8 = 0x108\nBTN_9 = 0x109\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_6",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_6 = 0x106\nBTN_7 = 0x107\nBTN_8 = 0x108\nBTN_9 = 0x109\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_7",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_7 = 0x107\nBTN_8 = 0x108\nBTN_9 = 0x109\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114\nBTN_FORWARD = 0x115",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_8",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_8 = 0x108\nBTN_9 = 0x109\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114\nBTN_FORWARD = 0x115\nBTN_BACK = 0x116",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_9",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_9 = 0x109\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114\nBTN_FORWARD = 0x115\nBTN_BACK = 0x116\nBTN_TASK = 0x117",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_MOUSE",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114\nBTN_FORWARD = 0x115\nBTN_BACK = 0x116\nBTN_TASK = 0x117\nBTN_JOYSTICK = 0x120",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_LEFT",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114\nBTN_FORWARD = 0x115\nBTN_BACK = 0x116\nBTN_TASK = 0x117\nBTN_JOYSTICK = 0x120\nBTN_TRIGGER = 0x120",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_RIGHT",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114\nBTN_FORWARD = 0x115\nBTN_BACK = 0x116\nBTN_TASK = 0x117\nBTN_JOYSTICK = 0x120\nBTN_TRIGGER = 0x120\nBTN_THUMB = 0x121",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_MIDDLE",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114\nBTN_FORWARD = 0x115\nBTN_BACK = 0x116\nBTN_TASK = 0x117\nBTN_JOYSTICK = 0x120\nBTN_TRIGGER = 0x120\nBTN_THUMB = 0x121\nBTN_THUMB2 = 0x122",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_SIDE",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_SIDE = 0x113\nBTN_EXTRA = 0x114\nBTN_FORWARD = 0x115\nBTN_BACK = 0x116\nBTN_TASK = 0x117\nBTN_JOYSTICK = 0x120\nBTN_TRIGGER = 0x120\nBTN_THUMB = 0x121\nBTN_THUMB2 = 0x122\nBTN_TOP = 0x123",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_EXTRA",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_EXTRA = 0x114\nBTN_FORWARD = 0x115\nBTN_BACK = 0x116\nBTN_TASK = 0x117\nBTN_JOYSTICK = 0x120\nBTN_TRIGGER = 0x120\nBTN_THUMB = 0x121\nBTN_THUMB2 = 0x122\nBTN_TOP = 0x123\nBTN_TOP2 = 0x124",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_FORWARD",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_FORWARD = 0x115\nBTN_BACK = 0x116\nBTN_TASK = 0x117\nBTN_JOYSTICK = 0x120\nBTN_TRIGGER = 0x120\nBTN_THUMB = 0x121\nBTN_THUMB2 = 0x122\nBTN_TOP = 0x123\nBTN_TOP2 = 0x124\nBTN_PINKIE = 0x125",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_BACK",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_BACK = 0x116\nBTN_TASK = 0x117\nBTN_JOYSTICK = 0x120\nBTN_TRIGGER = 0x120\nBTN_THUMB = 0x121\nBTN_THUMB2 = 0x122\nBTN_TOP = 0x123\nBTN_TOP2 = 0x124\nBTN_PINKIE = 0x125\nBTN_BASE = 0x126",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_TASK",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_TASK = 0x117\nBTN_JOYSTICK = 0x120\nBTN_TRIGGER = 0x120\nBTN_THUMB = 0x121\nBTN_THUMB2 = 0x122\nBTN_TOP = 0x123\nBTN_TOP2 = 0x124\nBTN_PINKIE = 0x125\nBTN_BASE = 0x126\nBTN_BASE2 = 0x127",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_JOYSTICK",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_JOYSTICK = 0x120\nBTN_TRIGGER = 0x120\nBTN_THUMB = 0x121\nBTN_THUMB2 = 0x122\nBTN_TOP = 0x123\nBTN_TOP2 = 0x124\nBTN_PINKIE = 0x125\nBTN_BASE = 0x126\nBTN_BASE2 = 0x127\nBTN_BASE3 = 0x128",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_TRIGGER",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_TRIGGER = 0x120\nBTN_THUMB = 0x121\nBTN_THUMB2 = 0x122\nBTN_TOP = 0x123\nBTN_TOP2 = 0x124\nBTN_PINKIE = 0x125\nBTN_BASE = 0x126\nBTN_BASE2 = 0x127\nBTN_BASE3 = 0x128\nBTN_BASE4 = 0x129",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_THUMB",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_THUMB = 0x121\nBTN_THUMB2 = 0x122\nBTN_TOP = 0x123\nBTN_TOP2 = 0x124\nBTN_PINKIE = 0x125\nBTN_BASE = 0x126\nBTN_BASE2 = 0x127\nBTN_BASE3 = 0x128\nBTN_BASE4 = 0x129\nBTN_BASE5 = 0x12a",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_THUMB2",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_THUMB2 = 0x122\nBTN_TOP = 0x123\nBTN_TOP2 = 0x124\nBTN_PINKIE = 0x125\nBTN_BASE = 0x126\nBTN_BASE2 = 0x127\nBTN_BASE3 = 0x128\nBTN_BASE4 = 0x129\nBTN_BASE5 = 0x12a\nBTN_BASE6 = 0x12b",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_TOP",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_TOP = 0x123\nBTN_TOP2 = 0x124\nBTN_PINKIE = 0x125\nBTN_BASE = 0x126\nBTN_BASE2 = 0x127\nBTN_BASE3 = 0x128\nBTN_BASE4 = 0x129\nBTN_BASE5 = 0x12a\nBTN_BASE6 = 0x12b\nBTN_DEAD = 0x12f",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_TOP2",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_TOP2 = 0x124\nBTN_PINKIE = 0x125\nBTN_BASE = 0x126\nBTN_BASE2 = 0x127\nBTN_BASE3 = 0x128\nBTN_BASE4 = 0x129\nBTN_BASE5 = 0x12a\nBTN_BASE6 = 0x12b\nBTN_DEAD = 0x12f\nBTN_GAMEPAD = 0x130",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_PINKIE",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_PINKIE = 0x125\nBTN_BASE = 0x126\nBTN_BASE2 = 0x127\nBTN_BASE3 = 0x128\nBTN_BASE4 = 0x129\nBTN_BASE5 = 0x12a\nBTN_BASE6 = 0x12b\nBTN_DEAD = 0x12f\nBTN_GAMEPAD = 0x130\nBTN_SOUTH = 0x130",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_BASE",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_BASE = 0x126\nBTN_BASE2 = 0x127\nBTN_BASE3 = 0x128\nBTN_BASE4 = 0x129\nBTN_BASE5 = 0x12a\nBTN_BASE6 = 0x12b\nBTN_DEAD = 0x12f\nBTN_GAMEPAD = 0x130\nBTN_SOUTH = 0x130\nBTN_A = BTN_SOUTH",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_BASE2",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_BASE2 = 0x127\nBTN_BASE3 = 0x128\nBTN_BASE4 = 0x129\nBTN_BASE5 = 0x12a\nBTN_BASE6 = 0x12b\nBTN_DEAD = 0x12f\nBTN_GAMEPAD = 0x130\nBTN_SOUTH = 0x130\nBTN_A = BTN_SOUTH\nBTN_EAST = 0x131",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_BASE3",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_BASE3 = 0x128\nBTN_BASE4 = 0x129\nBTN_BASE5 = 0x12a\nBTN_BASE6 = 0x12b\nBTN_DEAD = 0x12f\nBTN_GAMEPAD = 0x130\nBTN_SOUTH = 0x130\nBTN_A = BTN_SOUTH\nBTN_EAST = 0x131\nBTN_B = BTN_EAST",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_BASE4",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_BASE4 = 0x129\nBTN_BASE5 = 0x12a\nBTN_BASE6 = 0x12b\nBTN_DEAD = 0x12f\nBTN_GAMEPAD = 0x130\nBTN_SOUTH = 0x130\nBTN_A = BTN_SOUTH\nBTN_EAST = 0x131\nBTN_B = BTN_EAST\nBTN_C = 0x132",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_BASE5",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_BASE5 = 0x12a\nBTN_BASE6 = 0x12b\nBTN_DEAD = 0x12f\nBTN_GAMEPAD = 0x130\nBTN_SOUTH = 0x130\nBTN_A = BTN_SOUTH\nBTN_EAST = 0x131\nBTN_B = BTN_EAST\nBTN_C = 0x132\nBTN_NORTH = 0x133",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_BASE6",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_BASE6 = 0x12b\nBTN_DEAD = 0x12f\nBTN_GAMEPAD = 0x130\nBTN_SOUTH = 0x130\nBTN_A = BTN_SOUTH\nBTN_EAST = 0x131\nBTN_B = BTN_EAST\nBTN_C = 0x132\nBTN_NORTH = 0x133\nBTN_X = BTN_NORTH",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_DEAD",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_DEAD = 0x12f\nBTN_GAMEPAD = 0x130\nBTN_SOUTH = 0x130\nBTN_A = BTN_SOUTH\nBTN_EAST = 0x131\nBTN_B = BTN_EAST\nBTN_C = 0x132\nBTN_NORTH = 0x133\nBTN_X = BTN_NORTH\nBTN_WEST = 0x134",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_GAMEPAD",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_GAMEPAD = 0x130\nBTN_SOUTH = 0x130\nBTN_A = BTN_SOUTH\nBTN_EAST = 0x131\nBTN_B = BTN_EAST\nBTN_C = 0x132\nBTN_NORTH = 0x133\nBTN_X = BTN_NORTH\nBTN_WEST = 0x134\nBTN_Y = BTN_WEST",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_SOUTH",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_SOUTH = 0x130\nBTN_A = BTN_SOUTH\nBTN_EAST = 0x131\nBTN_B = BTN_EAST\nBTN_C = 0x132\nBTN_NORTH = 0x133\nBTN_X = BTN_NORTH\nBTN_WEST = 0x134\nBTN_Y = BTN_WEST\nBTN_Z = 0x135",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_A",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_A = BTN_SOUTH\nBTN_EAST = 0x131\nBTN_B = BTN_EAST\nBTN_C = 0x132\nBTN_NORTH = 0x133\nBTN_X = BTN_NORTH\nBTN_WEST = 0x134\nBTN_Y = BTN_WEST\nBTN_Z = 0x135\nBTN_TL = 0x136",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_EAST",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_EAST = 0x131\nBTN_B = BTN_EAST\nBTN_C = 0x132\nBTN_NORTH = 0x133\nBTN_X = BTN_NORTH\nBTN_WEST = 0x134\nBTN_Y = BTN_WEST\nBTN_Z = 0x135\nBTN_TL = 0x136\nBTN_TR = 0x137",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_B",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_B = BTN_EAST\nBTN_C = 0x132\nBTN_NORTH = 0x133\nBTN_X = BTN_NORTH\nBTN_WEST = 0x134\nBTN_Y = BTN_WEST\nBTN_Z = 0x135\nBTN_TL = 0x136\nBTN_TR = 0x137\nBTN_TL2 = 0x138",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_C",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_C = 0x132\nBTN_NORTH = 0x133\nBTN_X = BTN_NORTH\nBTN_WEST = 0x134\nBTN_Y = BTN_WEST\nBTN_Z = 0x135\nBTN_TL = 0x136\nBTN_TR = 0x137\nBTN_TL2 = 0x138\nBTN_TR2 = 0x139",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_NORTH",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_NORTH = 0x133\nBTN_X = BTN_NORTH\nBTN_WEST = 0x134\nBTN_Y = BTN_WEST\nBTN_Z = 0x135\nBTN_TL = 0x136\nBTN_TR = 0x137\nBTN_TL2 = 0x138\nBTN_TR2 = 0x139\nBTN_SELECT = 0x13a",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_X",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_X = BTN_NORTH\nBTN_WEST = 0x134\nBTN_Y = BTN_WEST\nBTN_Z = 0x135\nBTN_TL = 0x136\nBTN_TR = 0x137\nBTN_TL2 = 0x138\nBTN_TR2 = 0x139\nBTN_SELECT = 0x13a\nBTN_START = 0x13b",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_WEST",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_WEST = 0x134\nBTN_Y = BTN_WEST\nBTN_Z = 0x135\nBTN_TL = 0x136\nBTN_TR = 0x137\nBTN_TL2 = 0x138\nBTN_TR2 = 0x139\nBTN_SELECT = 0x13a\nBTN_START = 0x13b\nBTN_MODE = 0x13c",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_Y",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_Y = BTN_WEST\nBTN_Z = 0x135\nBTN_TL = 0x136\nBTN_TR = 0x137\nBTN_TL2 = 0x138\nBTN_TR2 = 0x139\nBTN_SELECT = 0x13a\nBTN_START = 0x13b\nBTN_MODE = 0x13c\nBTN_THUMBL = 0x13d",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_Z",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_Z = 0x135\nBTN_TL = 0x136\nBTN_TR = 0x137\nBTN_TL2 = 0x138\nBTN_TR2 = 0x139\nBTN_SELECT = 0x13a\nBTN_START = 0x13b\nBTN_MODE = 0x13c\nBTN_THUMBL = 0x13d\nBTN_THUMBR = 0x13e",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_TL",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_TL = 0x136\nBTN_TR = 0x137\nBTN_TL2 = 0x138\nBTN_TR2 = 0x139\nBTN_SELECT = 0x13a\nBTN_START = 0x13b\nBTN_MODE = 0x13c\nBTN_THUMBL = 0x13d\nBTN_THUMBR = 0x13e\nABS_X = 0x00",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_TR",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_TR = 0x137\nBTN_TL2 = 0x138\nBTN_TR2 = 0x139\nBTN_SELECT = 0x13a\nBTN_START = 0x13b\nBTN_MODE = 0x13c\nBTN_THUMBL = 0x13d\nBTN_THUMBR = 0x13e\nABS_X = 0x00\nABS_Y = 0x01",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_TL2",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_TL2 = 0x138\nBTN_TR2 = 0x139\nBTN_SELECT = 0x13a\nBTN_START = 0x13b\nBTN_MODE = 0x13c\nBTN_THUMBL = 0x13d\nBTN_THUMBR = 0x13e\nABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_TR2",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_TR2 = 0x139\nBTN_SELECT = 0x13a\nBTN_START = 0x13b\nBTN_MODE = 0x13c\nBTN_THUMBL = 0x13d\nBTN_THUMBR = 0x13e\nABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02\nABS_RX = 0x03",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_SELECT",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_SELECT = 0x13a\nBTN_START = 0x13b\nBTN_MODE = 0x13c\nBTN_THUMBL = 0x13d\nBTN_THUMBR = 0x13e\nABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02\nABS_RX = 0x03\nABS_RY = 0x04",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_START",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_START = 0x13b\nBTN_MODE = 0x13c\nBTN_THUMBL = 0x13d\nBTN_THUMBR = 0x13e\nABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02\nABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_MODE",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_MODE = 0x13c\nBTN_THUMBL = 0x13d\nBTN_THUMBR = 0x13e\nABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02\nABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05\nABS_THROTTLE = 0x06",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_THUMBL",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_THUMBL = 0x13d\nBTN_THUMBR = 0x13e\nABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02\nABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05\nABS_THROTTLE = 0x06\nABS_RUDDER = 0x07",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "BTN_THUMBR",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "BTN_THUMBR = 0x13e\nABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02\nABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05\nABS_THROTTLE = 0x06\nABS_RUDDER = 0x07\nABS_WHEEL = 0x08",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_X",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02\nABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05\nABS_THROTTLE = 0x06\nABS_RUDDER = 0x07\nABS_WHEEL = 0x08\nABS_GAS = 0x09",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_Y",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_Y = 0x01\nABS_Z = 0x02\nABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05\nABS_THROTTLE = 0x06\nABS_RUDDER = 0x07\nABS_WHEEL = 0x08\nABS_GAS = 0x09\nABS_BRAKE = 0x0a",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_Z",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_Z = 0x02\nABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05\nABS_THROTTLE = 0x06\nABS_RUDDER = 0x07\nABS_WHEEL = 0x08\nABS_GAS = 0x09\nABS_BRAKE = 0x0a\nABS_HAT0X = 0x10",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_RX",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05\nABS_THROTTLE = 0x06\nABS_RUDDER = 0x07\nABS_WHEEL = 0x08\nABS_GAS = 0x09\nABS_BRAKE = 0x0a\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_RY",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_RY = 0x04\nABS_RZ = 0x05\nABS_THROTTLE = 0x06\nABS_RUDDER = 0x07\nABS_WHEEL = 0x08\nABS_GAS = 0x09\nABS_BRAKE = 0x0a\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\nABS_HAT1X = 0x12",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_RZ",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_RZ = 0x05\nABS_THROTTLE = 0x06\nABS_RUDDER = 0x07\nABS_WHEEL = 0x08\nABS_GAS = 0x09\nABS_BRAKE = 0x0a\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\nABS_HAT1X = 0x12\nABS_HAT1Y = 0x13",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_THROTTLE",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_THROTTLE = 0x06\nABS_RUDDER = 0x07\nABS_WHEEL = 0x08\nABS_GAS = 0x09\nABS_BRAKE = 0x0a\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\nABS_HAT1X = 0x12\nABS_HAT1Y = 0x13\nABS_HAT2X = 0x14",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_RUDDER",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_RUDDER = 0x07\nABS_WHEEL = 0x08\nABS_GAS = 0x09\nABS_BRAKE = 0x0a\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\nABS_HAT1X = 0x12\nABS_HAT1Y = 0x13\nABS_HAT2X = 0x14\nABS_HAT2Y = 0x15",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_WHEEL",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_WHEEL = 0x08\nABS_GAS = 0x09\nABS_BRAKE = 0x0a\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\nABS_HAT1X = 0x12\nABS_HAT1Y = 0x13\nABS_HAT2X = 0x14\nABS_HAT2Y = 0x15\nABS_HAT3X = 0x16",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_GAS",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_GAS = 0x09\nABS_BRAKE = 0x0a\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\nABS_HAT1X = 0x12\nABS_HAT1Y = 0x13\nABS_HAT2X = 0x14\nABS_HAT2Y = 0x15\nABS_HAT3X = 0x16\nABS_HAT3Y = 0x17",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_BRAKE",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_BRAKE = 0x0a\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\nABS_HAT1X = 0x12\nABS_HAT1Y = 0x13\nABS_HAT2X = 0x14\nABS_HAT2Y = 0x15\nABS_HAT3X = 0x16\nABS_HAT3Y = 0x17\nABS_PRESSURE = 0x18",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_HAT0X",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\nABS_HAT1X = 0x12\nABS_HAT1Y = 0x13\nABS_HAT2X = 0x14\nABS_HAT2Y = 0x15\nABS_HAT3X = 0x16\nABS_HAT3Y = 0x17\nABS_PRESSURE = 0x18\nABS_DISTANCE = 0x19",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_HAT0Y",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_HAT0Y = 0x11\nABS_HAT1X = 0x12\nABS_HAT1Y = 0x13\nABS_HAT2X = 0x14\nABS_HAT2Y = 0x15\nABS_HAT3X = 0x16\nABS_HAT3Y = 0x17\nABS_PRESSURE = 0x18\nABS_DISTANCE = 0x19\nABS_TILT_X = 0x1a",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_HAT1X",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_HAT1X = 0x12\nABS_HAT1Y = 0x13\nABS_HAT2X = 0x14\nABS_HAT2Y = 0x15\nABS_HAT3X = 0x16\nABS_HAT3Y = 0x17\nABS_PRESSURE = 0x18\nABS_DISTANCE = 0x19\nABS_TILT_X = 0x1a\nABS_TILT_Y = 0x1b",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_HAT1Y",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_HAT1Y = 0x13\nABS_HAT2X = 0x14\nABS_HAT2Y = 0x15\nABS_HAT3X = 0x16\nABS_HAT3Y = 0x17\nABS_PRESSURE = 0x18\nABS_DISTANCE = 0x19\nABS_TILT_X = 0x1a\nABS_TILT_Y = 0x1b\nABS_TOOL_WIDTH = 0x1c",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_HAT2X",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_HAT2X = 0x14\nABS_HAT2Y = 0x15\nABS_HAT3X = 0x16\nABS_HAT3Y = 0x17\nABS_PRESSURE = 0x18\nABS_DISTANCE = 0x19\nABS_TILT_X = 0x1a\nABS_TILT_Y = 0x1b\nABS_TOOL_WIDTH = 0x1c\nABS_VOLUME = 0x20",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_HAT2Y",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_HAT2Y = 0x15\nABS_HAT3X = 0x16\nABS_HAT3Y = 0x17\nABS_PRESSURE = 0x18\nABS_DISTANCE = 0x19\nABS_TILT_X = 0x1a\nABS_TILT_Y = 0x1b\nABS_TOOL_WIDTH = 0x1c\nABS_VOLUME = 0x20\nABS_PROFILE = 0x21",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_HAT3X",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_HAT3X = 0x16\nABS_HAT3Y = 0x17\nABS_PRESSURE = 0x18\nABS_DISTANCE = 0x19\nABS_TILT_X = 0x1a\nABS_TILT_Y = 0x1b\nABS_TOOL_WIDTH = 0x1c\nABS_VOLUME = 0x20\nABS_PROFILE = 0x21\nSOCKET_PATH = \"/tmp/selkies_js0.sock\"",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_HAT3Y",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_HAT3Y = 0x17\nABS_PRESSURE = 0x18\nABS_DISTANCE = 0x19\nABS_TILT_X = 0x1a\nABS_TILT_Y = 0x1b\nABS_TOOL_WIDTH = 0x1c\nABS_VOLUME = 0x20\nABS_PROFILE = 0x21\nSOCKET_PATH = \"/tmp/selkies_js0.sock\"\n# From /usr/include/linux/joystick.h",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_PRESSURE",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_PRESSURE = 0x18\nABS_DISTANCE = 0x19\nABS_TILT_X = 0x1a\nABS_TILT_Y = 0x1b\nABS_TOOL_WIDTH = 0x1c\nABS_VOLUME = 0x20\nABS_PROFILE = 0x21\nSOCKET_PATH = \"/tmp/selkies_js0.sock\"\n# From /usr/include/linux/joystick.h\nJS_EVENT_BUTTON = 0x01",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_DISTANCE",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_DISTANCE = 0x19\nABS_TILT_X = 0x1a\nABS_TILT_Y = 0x1b\nABS_TOOL_WIDTH = 0x1c\nABS_VOLUME = 0x20\nABS_PROFILE = 0x21\nSOCKET_PATH = \"/tmp/selkies_js0.sock\"\n# From /usr/include/linux/joystick.h\nJS_EVENT_BUTTON = 0x01\nJS_EVENT_AXIS = 0x02",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_TILT_X",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_TILT_X = 0x1a\nABS_TILT_Y = 0x1b\nABS_TOOL_WIDTH = 0x1c\nABS_VOLUME = 0x20\nABS_PROFILE = 0x21\nSOCKET_PATH = \"/tmp/selkies_js0.sock\"\n# From /usr/include/linux/joystick.h\nJS_EVENT_BUTTON = 0x01\nJS_EVENT_AXIS = 0x02\n# Max num of buttons and axes",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_TILT_Y",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_TILT_Y = 0x1b\nABS_TOOL_WIDTH = 0x1c\nABS_VOLUME = 0x20\nABS_PROFILE = 0x21\nSOCKET_PATH = \"/tmp/selkies_js0.sock\"\n# From /usr/include/linux/joystick.h\nJS_EVENT_BUTTON = 0x01\nJS_EVENT_AXIS = 0x02\n# Max num of buttons and axes\nMAX_BTNS = 512",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_TOOL_WIDTH",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_TOOL_WIDTH = 0x1c\nABS_VOLUME = 0x20\nABS_PROFILE = 0x21\nSOCKET_PATH = \"/tmp/selkies_js0.sock\"\n# From /usr/include/linux/joystick.h\nJS_EVENT_BUTTON = 0x01\nJS_EVENT_AXIS = 0x02\n# Max num of buttons and axes\nMAX_BTNS = 512\nMAX_AXES = 64",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_VOLUME",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_VOLUME = 0x20\nABS_PROFILE = 0x21\nSOCKET_PATH = \"/tmp/selkies_js0.sock\"\n# From /usr/include/linux/joystick.h\nJS_EVENT_BUTTON = 0x01\nJS_EVENT_AXIS = 0x02\n# Max num of buttons and axes\nMAX_BTNS = 512\nMAX_AXES = 64\n# Joystick event struct",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "ABS_PROFILE",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "ABS_PROFILE = 0x21\nSOCKET_PATH = \"/tmp/selkies_js0.sock\"\n# From /usr/include/linux/joystick.h\nJS_EVENT_BUTTON = 0x01\nJS_EVENT_AXIS = 0x02\n# Max num of buttons and axes\nMAX_BTNS = 512\nMAX_AXES = 64\n# Joystick event struct\n# https://www.kernel.org/doc/Documentation/input/joystick-api.txt",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "SOCKET_PATH",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "SOCKET_PATH = \"/tmp/selkies_js0.sock\"\n# From /usr/include/linux/joystick.h\nJS_EVENT_BUTTON = 0x01\nJS_EVENT_AXIS = 0x02\n# Max num of buttons and axes\nMAX_BTNS = 512\nMAX_AXES = 64\n# Joystick event struct\n# https://www.kernel.org/doc/Documentation/input/joystick-api.txt\n# struct js_event {",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "JS_EVENT_BUTTON",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "JS_EVENT_BUTTON = 0x01\nJS_EVENT_AXIS = 0x02\n# Max num of buttons and axes\nMAX_BTNS = 512\nMAX_AXES = 64\n# Joystick event struct\n# https://www.kernel.org/doc/Documentation/input/joystick-api.txt\n# struct js_event {\n#    __u32 time;     /* event timestamp in milliseconds */\n#    __s16 value;    /* value */",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "JS_EVENT_AXIS",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "JS_EVENT_AXIS = 0x02\n# Max num of buttons and axes\nMAX_BTNS = 512\nMAX_AXES = 64\n# Joystick event struct\n# https://www.kernel.org/doc/Documentation/input/joystick-api.txt\n# struct js_event {\n#    __u32 time;     /* event timestamp in milliseconds */\n#    __s16 value;    /* value */\n#    __u8 type;      /* event type */",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "MAX_BTNS",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "MAX_BTNS = 512\nMAX_AXES = 64\n# Joystick event struct\n# https://www.kernel.org/doc/Documentation/input/joystick-api.txt\n# struct js_event {\n#    __u32 time;     /* event timestamp in milliseconds */\n#    __s16 value;    /* value */\n#    __u8 type;      /* event type */\n#    __u8 number;    /* axis/button number */\n# };",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "MAX_AXES",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "MAX_AXES = 64\n# Joystick event struct\n# https://www.kernel.org/doc/Documentation/input/joystick-api.txt\n# struct js_event {\n#    __u32 time;     /* event timestamp in milliseconds */\n#    __s16 value;    /* value */\n#    __u8 type;      /* event type */\n#    __u8 number;    /* axis/button number */\n# };\n# Map of client file descriptors to sockets.",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "clients",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "clients = {}\nXPAD_CONFIG = {\n    \"name\": \"Xbox 360 Controller\",\n    \"btn_map\": [\n        BTN_A,\n        BTN_B,\n        BTN_X,\n        BTN_Y,\n        BTN_TL,\n        BTN_TR,",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "XPAD_CONFIG",
        "kind": 5,
        "importPath": "addons.js-interposer.js-interposer-test",
        "description": "addons.js-interposer.js-interposer-test",
        "peekOfCode": "XPAD_CONFIG = {\n    \"name\": \"Xbox 360 Controller\",\n    \"btn_map\": [\n        BTN_A,\n        BTN_B,\n        BTN_X,\n        BTN_Y,\n        BTN_TL,\n        BTN_TR,\n        BTN_SELECT,",
        "detail": "addons.js-interposer.js-interposer-test",
        "documentation": {}
    },
    {
        "label": "turn_rest",
        "kind": 2,
        "importPath": "addons.turn-rest.app",
        "description": "addons.turn-rest.app",
        "peekOfCode": "def turn_rest():\n    service_input = request.values.get('service') or 'turn'\n    if service_input:\n        service_input = service_input.lower()\n    username_input = request.values.get('username') or request.headers.get('x-auth-user') or request.headers.get('x-turn-username') or 'turn-rest'\n    if username_input:\n        username_input = username_input.lower()\n    protocol = request.values.get('protocol') or request.headers.get('x-turn-protocol') or turn_protocol_default\n    if protocol.lower() != 'tcp':\n        protocol = 'udp'",
        "detail": "addons.turn-rest.app",
        "documentation": {}
    },
    {
        "label": "shared_secret",
        "kind": 5,
        "importPath": "addons.turn-rest.app",
        "description": "addons.turn-rest.app",
        "peekOfCode": "shared_secret = os.environ.get('TURN_SHARED_SECRET', 'openrelayprojectsecret')\nturn_host = os.environ.get('TURN_HOST', 'staticauth.openrelay.metered.ca')\nif turn_host:\n    turn_host = turn_host.lower()\nturn_port = os.environ.get('TURN_PORT', '443')\nif not turn_port.isdigit():\n    turn_port = '3478'\nstun_host = os.environ.get('STUN_HOST', turn_host)\nif stun_host:\n    stun_host = stun_host.lower()",
        "detail": "addons.turn-rest.app",
        "documentation": {}
    },
    {
        "label": "turn_host",
        "kind": 5,
        "importPath": "addons.turn-rest.app",
        "description": "addons.turn-rest.app",
        "peekOfCode": "turn_host = os.environ.get('TURN_HOST', 'staticauth.openrelay.metered.ca')\nif turn_host:\n    turn_host = turn_host.lower()\nturn_port = os.environ.get('TURN_PORT', '443')\nif not turn_port.isdigit():\n    turn_port = '3478'\nstun_host = os.environ.get('STUN_HOST', turn_host)\nif stun_host:\n    stun_host = stun_host.lower()\nstun_port = os.environ.get('STUN_PORT', turn_port)",
        "detail": "addons.turn-rest.app",
        "documentation": {}
    },
    {
        "label": "turn_port",
        "kind": 5,
        "importPath": "addons.turn-rest.app",
        "description": "addons.turn-rest.app",
        "peekOfCode": "turn_port = os.environ.get('TURN_PORT', '443')\nif not turn_port.isdigit():\n    turn_port = '3478'\nstun_host = os.environ.get('STUN_HOST', turn_host)\nif stun_host:\n    stun_host = stun_host.lower()\nstun_port = os.environ.get('STUN_PORT', turn_port)\nif not stun_port.isdigit():\n    stun_host, stun_port = 'stun.l.google.com', '19302'\nturn_protocol_default = os.environ.get('TURN_PROTOCOL', 'udp')",
        "detail": "addons.turn-rest.app",
        "documentation": {}
    },
    {
        "label": "stun_host",
        "kind": 5,
        "importPath": "addons.turn-rest.app",
        "description": "addons.turn-rest.app",
        "peekOfCode": "stun_host = os.environ.get('STUN_HOST', turn_host)\nif stun_host:\n    stun_host = stun_host.lower()\nstun_port = os.environ.get('STUN_PORT', turn_port)\nif not stun_port.isdigit():\n    stun_host, stun_port = 'stun.l.google.com', '19302'\nturn_protocol_default = os.environ.get('TURN_PROTOCOL', 'udp')\nturn_tls_default = os.environ.get('TURN_TLS', 'false')\napp = Flask(__name__)\n@app.route('/', methods=['GET','POST'])",
        "detail": "addons.turn-rest.app",
        "documentation": {}
    },
    {
        "label": "stun_port",
        "kind": 5,
        "importPath": "addons.turn-rest.app",
        "description": "addons.turn-rest.app",
        "peekOfCode": "stun_port = os.environ.get('STUN_PORT', turn_port)\nif not stun_port.isdigit():\n    stun_host, stun_port = 'stun.l.google.com', '19302'\nturn_protocol_default = os.environ.get('TURN_PROTOCOL', 'udp')\nturn_tls_default = os.environ.get('TURN_TLS', 'false')\napp = Flask(__name__)\n@app.route('/', methods=['GET','POST'])\ndef turn_rest():\n    service_input = request.values.get('service') or 'turn'\n    if service_input:",
        "detail": "addons.turn-rest.app",
        "documentation": {}
    },
    {
        "label": "turn_protocol_default",
        "kind": 5,
        "importPath": "addons.turn-rest.app",
        "description": "addons.turn-rest.app",
        "peekOfCode": "turn_protocol_default = os.environ.get('TURN_PROTOCOL', 'udp')\nturn_tls_default = os.environ.get('TURN_TLS', 'false')\napp = Flask(__name__)\n@app.route('/', methods=['GET','POST'])\ndef turn_rest():\n    service_input = request.values.get('service') or 'turn'\n    if service_input:\n        service_input = service_input.lower()\n    username_input = request.values.get('username') or request.headers.get('x-auth-user') or request.headers.get('x-turn-username') or 'turn-rest'\n    if username_input:",
        "detail": "addons.turn-rest.app",
        "documentation": {}
    },
    {
        "label": "turn_tls_default",
        "kind": 5,
        "importPath": "addons.turn-rest.app",
        "description": "addons.turn-rest.app",
        "peekOfCode": "turn_tls_default = os.environ.get('TURN_TLS', 'false')\napp = Flask(__name__)\n@app.route('/', methods=['GET','POST'])\ndef turn_rest():\n    service_input = request.values.get('service') or 'turn'\n    if service_input:\n        service_input = service_input.lower()\n    username_input = request.values.get('username') or request.headers.get('x-auth-user') or request.headers.get('x-turn-username') or 'turn-rest'\n    if username_input:\n        username_input = username_input.lower()",
        "detail": "addons.turn-rest.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "addons.turn-rest.app",
        "description": "addons.turn-rest.app",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/', methods=['GET','POST'])\ndef turn_rest():\n    service_input = request.values.get('service') or 'turn'\n    if service_input:\n        service_input = service_input.lower()\n    username_input = request.values.get('username') or request.headers.get('x-auth-user') or request.headers.get('x-turn-username') or 'turn-rest'\n    if username_input:\n        username_input = username_input.lower()\n    protocol = request.values.get('protocol') or request.headers.get('x-turn-protocol') or turn_protocol_default",
        "detail": "addons.turn-rest.app",
        "documentation": {}
    },
    {
        "label": "SelkiesGamepad",
        "kind": 6,
        "importPath": "src.selkies.legacy.gamepad",
        "description": "src.selkies.legacy.gamepad",
        "peekOfCode": "class SelkiesGamepad:\n    def __init__(self, socket_path):\n        self.socket_path = socket_path\n        # Gamepad input mapper instance\n        # created when calling set_config()\n        self.mapper = None\n        self.name = None\n        # socket server\n        self.server = None\n        # Joystick config, set dynamically.",
        "detail": "src.selkies.legacy.gamepad",
        "documentation": {}
    },
    {
        "label": "GamepadMapper",
        "kind": 6,
        "importPath": "src.selkies.legacy.gamepad",
        "description": "src.selkies.legacy.gamepad",
        "peekOfCode": "class GamepadMapper:\n    def __init__(self, config, name, num_btns, num_axes):\n        self.config = config\n        self.input_name = name\n        self.input_num_btns = num_btns\n        self.input_num_axes = num_axes\n    def get_mapped_btn(self, btn_num, btn_val):\n        '''\n        return either a button or axis event based on mapping. \n        '''",
        "detail": "src.selkies.legacy.gamepad",
        "documentation": {}
    },
    {
        "label": "get_btn_event",
        "kind": 2,
        "importPath": "src.selkies.legacy.gamepad",
        "description": "src.selkies.legacy.gamepad",
        "peekOfCode": "def get_btn_event(btn_num, btn_val):\n    ts = int((time.time() * 1000) % 1000000000)\n    # see js_event struct definition above.\n    # https://docs.python.org/3/library/struct.html\n    struct_format = 'IhBB'\n    event = struct.pack(struct_format, ts, btn_val,\n                        JS_EVENT_BUTTON, btn_num)\n    logger.debug(struct.unpack(struct_format, event))\n    return event\ndef get_axis_event(axis_num, axis_val):",
        "detail": "src.selkies.legacy.gamepad",
        "documentation": {}
    },
    {
        "label": "get_axis_event",
        "kind": 2,
        "importPath": "src.selkies.legacy.gamepad",
        "description": "src.selkies.legacy.gamepad",
        "peekOfCode": "def get_axis_event(axis_num, axis_val):\n    ts = int((time.time() * 1000) % 1000000000)\n    # see js_event struct definition above.\n    # https://docs.python.org/3/library/struct.html\n    struct_format = 'IhBB'\n    event = struct.pack(struct_format, ts, axis_val,\n                        JS_EVENT_AXIS, axis_num)\n    logger.debug(struct.unpack(struct_format, event))\n    return event\ndef detect_gamepad_config(name):",
        "detail": "src.selkies.legacy.gamepad",
        "documentation": {}
    },
    {
        "label": "detect_gamepad_config",
        "kind": 2,
        "importPath": "src.selkies.legacy.gamepad",
        "description": "src.selkies.legacy.gamepad",
        "peekOfCode": "def detect_gamepad_config(name):\n    # TODO switch mapping based on name.\n    return STANDARD_XPAD_CONFIG\ndef get_num_btns_for_mapping(cfg):\n    num_mapped_btns = len(\n        [i for j in cfg[\"axes_to_btn_map\"].values() for i in j])\n    return len(cfg[\"btn_map\"]) + num_mapped_btns\ndef get_num_axes_for_mapping(cfg):\n    return len(cfg[\"axes_map\"])\ndef normalize_axis_val(val):",
        "detail": "src.selkies.legacy.gamepad",
        "documentation": {}
    },
    {
        "label": "get_num_btns_for_mapping",
        "kind": 2,
        "importPath": "src.selkies.legacy.gamepad",
        "description": "src.selkies.legacy.gamepad",
        "peekOfCode": "def get_num_btns_for_mapping(cfg):\n    num_mapped_btns = len(\n        [i for j in cfg[\"axes_to_btn_map\"].values() for i in j])\n    return len(cfg[\"btn_map\"]) + num_mapped_btns\ndef get_num_axes_for_mapping(cfg):\n    return len(cfg[\"axes_map\"])\ndef normalize_axis_val(val):\n    return round(ABS_MIN + ((val+1) * (ABS_MAX - ABS_MIN)) / 2)\ndef normalize_trigger_val(val):\n    return round(val * (ABS_MAX - ABS_MIN)) + ABS_MIN",
        "detail": "src.selkies.legacy.gamepad",
        "documentation": {}
    },
    {
        "label": "get_num_axes_for_mapping",
        "kind": 2,
        "importPath": "src.selkies.legacy.gamepad",
        "description": "src.selkies.legacy.gamepad",
        "peekOfCode": "def get_num_axes_for_mapping(cfg):\n    return len(cfg[\"axes_map\"])\ndef normalize_axis_val(val):\n    return round(ABS_MIN + ((val+1) * (ABS_MAX - ABS_MIN)) / 2)\ndef normalize_trigger_val(val):\n    return round(val * (ABS_MAX - ABS_MIN)) + ABS_MIN\nclass SelkiesGamepad:\n    def __init__(self, socket_path):\n        self.socket_path = socket_path\n        # Gamepad input mapper instance",
        "detail": "src.selkies.legacy.gamepad",
        "documentation": {}
    },
    {
        "label": "normalize_axis_val",
        "kind": 2,
        "importPath": "src.selkies.legacy.gamepad",
        "description": "src.selkies.legacy.gamepad",
        "peekOfCode": "def normalize_axis_val(val):\n    return round(ABS_MIN + ((val+1) * (ABS_MAX - ABS_MIN)) / 2)\ndef normalize_trigger_val(val):\n    return round(val * (ABS_MAX - ABS_MIN)) + ABS_MIN\nclass SelkiesGamepad:\n    def __init__(self, socket_path):\n        self.socket_path = socket_path\n        # Gamepad input mapper instance\n        # created when calling set_config()\n        self.mapper = None",
        "detail": "src.selkies.legacy.gamepad",
        "documentation": {}
    },
    {
        "label": "normalize_trigger_val",
        "kind": 2,
        "importPath": "src.selkies.legacy.gamepad",
        "description": "src.selkies.legacy.gamepad",
        "peekOfCode": "def normalize_trigger_val(val):\n    return round(val * (ABS_MAX - ABS_MIN)) + ABS_MIN\nclass SelkiesGamepad:\n    def __init__(self, socket_path):\n        self.socket_path = socket_path\n        # Gamepad input mapper instance\n        # created when calling set_config()\n        self.mapper = None\n        self.name = None\n        # socket server",
        "detail": "src.selkies.legacy.gamepad",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.legacy.gamepad",
        "description": "src.selkies.legacy.gamepad",
        "peekOfCode": "logger = logging.getLogger(\"selkies_gamepad\")\nlogger.setLevel(logging.INFO)\nSTANDARD_XPAD_CONFIG = {\n    # Browser detects xpad as 4 axes 17 button controller.\n    # Linux xpad has 11 buttons and 8 axes.\n    \"name\": \"Selkies Controller\",\n    \"btn_map\": [\n        BTN_A,      # 0\n        BTN_B,      # 1\n        BTN_X,      # 2",
        "detail": "src.selkies.legacy.gamepad",
        "documentation": {}
    },
    {
        "label": "STANDARD_XPAD_CONFIG",
        "kind": 5,
        "importPath": "src.selkies.legacy.gamepad",
        "description": "src.selkies.legacy.gamepad",
        "peekOfCode": "STANDARD_XPAD_CONFIG = {\n    # Browser detects xpad as 4 axes 17 button controller.\n    # Linux xpad has 11 buttons and 8 axes.\n    \"name\": \"Selkies Controller\",\n    \"btn_map\": [\n        BTN_A,      # 0\n        BTN_B,      # 1\n        BTN_X,      # 2\n        BTN_Y,      # 3\n        BTN_TL,     # 4",
        "detail": "src.selkies.legacy.gamepad",
        "documentation": {}
    },
    {
        "label": "XPAD_CONFIG_MAP",
        "kind": 5,
        "importPath": "src.selkies.legacy.gamepad",
        "description": "src.selkies.legacy.gamepad",
        "peekOfCode": "XPAD_CONFIG_MAP = {\n    (\"045e\", \"0b12\"): STANDARD_XPAD_CONFIG,   # Xbox Series S/X\n}\n# From /usr/include/linux/joystick.h\nJS_EVENT_BUTTON = 0x01\nJS_EVENT_AXIS = 0x02\n# Max num of buttons and axes\nMAX_BTNS = 512\nMAX_AXES = 64\n# Range for axis values",
        "detail": "src.selkies.legacy.gamepad",
        "documentation": {}
    },
    {
        "label": "JS_EVENT_BUTTON",
        "kind": 5,
        "importPath": "src.selkies.legacy.gamepad",
        "description": "src.selkies.legacy.gamepad",
        "peekOfCode": "JS_EVENT_BUTTON = 0x01\nJS_EVENT_AXIS = 0x02\n# Max num of buttons and axes\nMAX_BTNS = 512\nMAX_AXES = 64\n# Range for axis values\nABS_MIN = -32767\nABS_MAX = 32767\n# Joystick event struct\n# https://www.kernel.org/doc/Documentation/input/joystick-api.txt",
        "detail": "src.selkies.legacy.gamepad",
        "documentation": {}
    },
    {
        "label": "JS_EVENT_AXIS",
        "kind": 5,
        "importPath": "src.selkies.legacy.gamepad",
        "description": "src.selkies.legacy.gamepad",
        "peekOfCode": "JS_EVENT_AXIS = 0x02\n# Max num of buttons and axes\nMAX_BTNS = 512\nMAX_AXES = 64\n# Range for axis values\nABS_MIN = -32767\nABS_MAX = 32767\n# Joystick event struct\n# https://www.kernel.org/doc/Documentation/input/joystick-api.txt\n# struct js_event {",
        "detail": "src.selkies.legacy.gamepad",
        "documentation": {}
    },
    {
        "label": "MAX_BTNS",
        "kind": 5,
        "importPath": "src.selkies.legacy.gamepad",
        "description": "src.selkies.legacy.gamepad",
        "peekOfCode": "MAX_BTNS = 512\nMAX_AXES = 64\n# Range for axis values\nABS_MIN = -32767\nABS_MAX = 32767\n# Joystick event struct\n# https://www.kernel.org/doc/Documentation/input/joystick-api.txt\n# struct js_event {\n#    __u32 time;     /* event timestamp in milliseconds */\n#    __s16 value;    /* value */",
        "detail": "src.selkies.legacy.gamepad",
        "documentation": {}
    },
    {
        "label": "MAX_AXES",
        "kind": 5,
        "importPath": "src.selkies.legacy.gamepad",
        "description": "src.selkies.legacy.gamepad",
        "peekOfCode": "MAX_AXES = 64\n# Range for axis values\nABS_MIN = -32767\nABS_MAX = 32767\n# Joystick event struct\n# https://www.kernel.org/doc/Documentation/input/joystick-api.txt\n# struct js_event {\n#    __u32 time;     /* event timestamp in milliseconds */\n#    __s16 value;    /* value */\n#    __u8 type;      /* event type */",
        "detail": "src.selkies.legacy.gamepad",
        "documentation": {}
    },
    {
        "label": "ABS_MIN",
        "kind": 5,
        "importPath": "src.selkies.legacy.gamepad",
        "description": "src.selkies.legacy.gamepad",
        "peekOfCode": "ABS_MIN = -32767\nABS_MAX = 32767\n# Joystick event struct\n# https://www.kernel.org/doc/Documentation/input/joystick-api.txt\n# struct js_event {\n#    __u32 time;     /* event timestamp in milliseconds */\n#    __s16 value;    /* value */\n#    __u8 type;      /* event type */\n#    __u8 number;    /* axis/button number */\n# };",
        "detail": "src.selkies.legacy.gamepad",
        "documentation": {}
    },
    {
        "label": "ABS_MAX",
        "kind": 5,
        "importPath": "src.selkies.legacy.gamepad",
        "description": "src.selkies.legacy.gamepad",
        "peekOfCode": "ABS_MAX = 32767\n# Joystick event struct\n# https://www.kernel.org/doc/Documentation/input/joystick-api.txt\n# struct js_event {\n#    __u32 time;     /* event timestamp in milliseconds */\n#    __s16 value;    /* value */\n#    __u8 type;      /* event type */\n#    __u8 number;    /* axis/button number */\n# };\ndef get_btn_event(btn_num, btn_val):",
        "detail": "src.selkies.legacy.gamepad",
        "documentation": {}
    },
    {
        "label": "GPUMonitor",
        "kind": 6,
        "importPath": "src.selkies.legacy.gpu_monitor",
        "description": "src.selkies.legacy.gpu_monitor",
        "peekOfCode": "class GPUMonitor:\n    def __init__(self, period=1, enabled=True):\n        self.period = period\n        self.enabled = enabled\n        self.running = False\n        self.on_stats = lambda load, memoryTotal, memoryUsed: logger.warning(\n            \"unhandled on_stats\")\n    async def start(self, gpu_id=0):\n        self.running = True\n        while self.running:",
        "detail": "src.selkies.legacy.gpu_monitor",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.legacy.gpu_monitor",
        "description": "src.selkies.legacy.gpu_monitor",
        "peekOfCode": "logger = logging.getLogger(\"gpu_monitor\")\nlogger.setLevel(logging.INFO)\nclass GPUMonitor:\n    def __init__(self, period=1, enabled=True):\n        self.period = period\n        self.enabled = enabled\n        self.running = False\n        self.on_stats = lambda load, memoryTotal, memoryUsed: logger.warning(\n            \"unhandled on_stats\")\n    async def start(self, gpu_id=0):",
        "detail": "src.selkies.legacy.gpu_monitor",
        "documentation": {}
    },
    {
        "label": "GSTWebRTCAppError",
        "kind": 6,
        "importPath": "src.selkies.legacy.gstwebrtc_app",
        "description": "src.selkies.legacy.gstwebrtc_app",
        "peekOfCode": "class GSTWebRTCAppError(Exception):\n    pass\nclass GSTWebRTCApp:\n    def __init__(self, async_event_loop, stun_servers=None, turn_servers=None, audio_channels=2, framerate=30, encoder=None, gpu_id=0, video_bitrate=2000, audio_bitrate=96000, keyframe_distance=-1.0, congestion_control=False, video_packetloss_percent=0.0, audio_packetloss_percent=0.0):\n        \"\"\"Initialize GStreamer WebRTC app.\n        Initializes GObjects and checks for required plugins.\n        Arguments:\n            stun_servers {[list of string]} -- Optional STUN server uris in the form of:\n                                    stun:<host>:<port>\n            turn_servers {[list of strings]} -- Optional TURN server uris in the form of:",
        "detail": "src.selkies.legacy.gstwebrtc_app",
        "documentation": {}
    },
    {
        "label": "GSTWebRTCApp",
        "kind": 6,
        "importPath": "src.selkies.legacy.gstwebrtc_app",
        "description": "src.selkies.legacy.gstwebrtc_app",
        "peekOfCode": "class GSTWebRTCApp:\n    def __init__(self, async_event_loop, stun_servers=None, turn_servers=None, audio_channels=2, framerate=30, encoder=None, gpu_id=0, video_bitrate=2000, audio_bitrate=96000, keyframe_distance=-1.0, congestion_control=False, video_packetloss_percent=0.0, audio_packetloss_percent=0.0):\n        \"\"\"Initialize GStreamer WebRTC app.\n        Initializes GObjects and checks for required plugins.\n        Arguments:\n            stun_servers {[list of string]} -- Optional STUN server uris in the form of:\n                                    stun:<host>:<port>\n            turn_servers {[list of strings]} -- Optional TURN server uris in the form of:\n                                    turn://<user>:<password>@<host>:<port>\n        \"\"\"",
        "detail": "src.selkies.legacy.gstwebrtc_app",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.legacy.gstwebrtc_app",
        "description": "src.selkies.legacy.gstwebrtc_app",
        "peekOfCode": "logger = logging.getLogger(\"gstwebrtc_app\")\nlogger.setLevel(logging.INFO)\ntry:\n    import gi\n    gi.require_version('GLib', \"2.0\")\n    gi.require_version('Gst', \"1.0\")\n    gi.require_version('GstRtp', \"1.0\")\n    gi.require_version('GstSdp', \"1.0\")\n    gi.require_version('GstWebRTC', \"1.0\")\n    from gi.repository import GLib, Gst, GstRtp, GstSdp, GstWebRTC",
        "detail": "src.selkies.legacy.gstwebrtc_app",
        "documentation": {}
    },
    {
        "label": "EV_SYN",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "EV_SYN = 0x00\nEV_KEY = 0x01\nEV_REL = 0x02\nEV_ABS = 0x03\nEV_MSC = 0x04\nEV_SW = 0x05\nEV_LED = 0x11\nEV_SND = 0x12\nEV_REP = 0x14\nEV_FF = 0x15",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "EV_KEY",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "EV_KEY = 0x01\nEV_REL = 0x02\nEV_ABS = 0x03\nEV_MSC = 0x04\nEV_SW = 0x05\nEV_LED = 0x11\nEV_SND = 0x12\nEV_REP = 0x14\nEV_FF = 0x15\nEV_PWR = 0x16",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "EV_REL",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "EV_REL = 0x02\nEV_ABS = 0x03\nEV_MSC = 0x04\nEV_SW = 0x05\nEV_LED = 0x11\nEV_SND = 0x12\nEV_REP = 0x14\nEV_FF = 0x15\nEV_PWR = 0x16\nEV_FF_STATUS = 0x17",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "EV_ABS",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "EV_ABS = 0x03\nEV_MSC = 0x04\nEV_SW = 0x05\nEV_LED = 0x11\nEV_SND = 0x12\nEV_REP = 0x14\nEV_FF = 0x15\nEV_PWR = 0x16\nEV_FF_STATUS = 0x17\nEV_MAX = 0x1f",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "EV_MSC",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "EV_MSC = 0x04\nEV_SW = 0x05\nEV_LED = 0x11\nEV_SND = 0x12\nEV_REP = 0x14\nEV_FF = 0x15\nEV_PWR = 0x16\nEV_FF_STATUS = 0x17\nEV_MAX = 0x1f\nEV_CNT = (EV_MAX+1)",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "EV_SW",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "EV_SW = 0x05\nEV_LED = 0x11\nEV_SND = 0x12\nEV_REP = 0x14\nEV_FF = 0x15\nEV_PWR = 0x16\nEV_FF_STATUS = 0x17\nEV_MAX = 0x1f\nEV_CNT = (EV_MAX+1)\n'''",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "EV_LED",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "EV_LED = 0x11\nEV_SND = 0x12\nEV_REP = 0x14\nEV_FF = 0x15\nEV_PWR = 0x16\nEV_FF_STATUS = 0x17\nEV_MAX = 0x1f\nEV_CNT = (EV_MAX+1)\n'''\nSynchronization events.",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "EV_SND",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "EV_SND = 0x12\nEV_REP = 0x14\nEV_FF = 0x15\nEV_PWR = 0x16\nEV_FF_STATUS = 0x17\nEV_MAX = 0x1f\nEV_CNT = (EV_MAX+1)\n'''\nSynchronization events.\n'''",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "EV_REP",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "EV_REP = 0x14\nEV_FF = 0x15\nEV_PWR = 0x16\nEV_FF_STATUS = 0x17\nEV_MAX = 0x1f\nEV_CNT = (EV_MAX+1)\n'''\nSynchronization events.\n'''\nSYN_REPORT = 0",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "EV_FF",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "EV_FF = 0x15\nEV_PWR = 0x16\nEV_FF_STATUS = 0x17\nEV_MAX = 0x1f\nEV_CNT = (EV_MAX+1)\n'''\nSynchronization events.\n'''\nSYN_REPORT = 0\nSYN_CONFIG = 1",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "EV_PWR",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "EV_PWR = 0x16\nEV_FF_STATUS = 0x17\nEV_MAX = 0x1f\nEV_CNT = (EV_MAX+1)\n'''\nSynchronization events.\n'''\nSYN_REPORT = 0\nSYN_CONFIG = 1\nSYN_MT_REPORT = 2",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "EV_FF_STATUS",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "EV_FF_STATUS = 0x17\nEV_MAX = 0x1f\nEV_CNT = (EV_MAX+1)\n'''\nSynchronization events.\n'''\nSYN_REPORT = 0\nSYN_CONFIG = 1\nSYN_MT_REPORT = 2\nSYN_DROPPED = 3",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "EV_MAX",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "EV_MAX = 0x1f\nEV_CNT = (EV_MAX+1)\n'''\nSynchronization events.\n'''\nSYN_REPORT = 0\nSYN_CONFIG = 1\nSYN_MT_REPORT = 2\nSYN_DROPPED = 3\nSYN_MAX = 0xf",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "EV_CNT",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "EV_CNT = (EV_MAX+1)\n'''\nSynchronization events.\n'''\nSYN_REPORT = 0\nSYN_CONFIG = 1\nSYN_MT_REPORT = 2\nSYN_DROPPED = 3\nSYN_MAX = 0xf\nSYN_CNT = (SYN_MAX+1)",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "SYN_REPORT",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "SYN_REPORT = 0\nSYN_CONFIG = 1\nSYN_MT_REPORT = 2\nSYN_DROPPED = 3\nSYN_MAX = 0xf\nSYN_CNT = (SYN_MAX+1)\nBTN_MISC = 0x100\nBTN_0 = 0x100\nBTN_1 = 0x101\nBTN_2 = 0x102",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "SYN_CONFIG",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "SYN_CONFIG = 1\nSYN_MT_REPORT = 2\nSYN_DROPPED = 3\nSYN_MAX = 0xf\nSYN_CNT = (SYN_MAX+1)\nBTN_MISC = 0x100\nBTN_0 = 0x100\nBTN_1 = 0x101\nBTN_2 = 0x102\nBTN_3 = 0x103",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "SYN_MT_REPORT",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "SYN_MT_REPORT = 2\nSYN_DROPPED = 3\nSYN_MAX = 0xf\nSYN_CNT = (SYN_MAX+1)\nBTN_MISC = 0x100\nBTN_0 = 0x100\nBTN_1 = 0x101\nBTN_2 = 0x102\nBTN_3 = 0x103\nBTN_4 = 0x104",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "SYN_DROPPED",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "SYN_DROPPED = 3\nSYN_MAX = 0xf\nSYN_CNT = (SYN_MAX+1)\nBTN_MISC = 0x100\nBTN_0 = 0x100\nBTN_1 = 0x101\nBTN_2 = 0x102\nBTN_3 = 0x103\nBTN_4 = 0x104\nBTN_5 = 0x105",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "SYN_MAX",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "SYN_MAX = 0xf\nSYN_CNT = (SYN_MAX+1)\nBTN_MISC = 0x100\nBTN_0 = 0x100\nBTN_1 = 0x101\nBTN_2 = 0x102\nBTN_3 = 0x103\nBTN_4 = 0x104\nBTN_5 = 0x105\nBTN_6 = 0x106",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "SYN_CNT",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "SYN_CNT = (SYN_MAX+1)\nBTN_MISC = 0x100\nBTN_0 = 0x100\nBTN_1 = 0x101\nBTN_2 = 0x102\nBTN_3 = 0x103\nBTN_4 = 0x104\nBTN_5 = 0x105\nBTN_6 = 0x106\nBTN_7 = 0x107",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_MISC",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_MISC = 0x100\nBTN_0 = 0x100\nBTN_1 = 0x101\nBTN_2 = 0x102\nBTN_3 = 0x103\nBTN_4 = 0x104\nBTN_5 = 0x105\nBTN_6 = 0x106\nBTN_7 = 0x107\nBTN_8 = 0x108",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_0",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_0 = 0x100\nBTN_1 = 0x101\nBTN_2 = 0x102\nBTN_3 = 0x103\nBTN_4 = 0x104\nBTN_5 = 0x105\nBTN_6 = 0x106\nBTN_7 = 0x107\nBTN_8 = 0x108\nBTN_9 = 0x109",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_1",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_1 = 0x101\nBTN_2 = 0x102\nBTN_3 = 0x103\nBTN_4 = 0x104\nBTN_5 = 0x105\nBTN_6 = 0x106\nBTN_7 = 0x107\nBTN_8 = 0x108\nBTN_9 = 0x109\nBTN_MOUSE = 0x110",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_2",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_2 = 0x102\nBTN_3 = 0x103\nBTN_4 = 0x104\nBTN_5 = 0x105\nBTN_6 = 0x106\nBTN_7 = 0x107\nBTN_8 = 0x108\nBTN_9 = 0x109\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_3",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_3 = 0x103\nBTN_4 = 0x104\nBTN_5 = 0x105\nBTN_6 = 0x106\nBTN_7 = 0x107\nBTN_8 = 0x108\nBTN_9 = 0x109\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_4",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_4 = 0x104\nBTN_5 = 0x105\nBTN_6 = 0x106\nBTN_7 = 0x107\nBTN_8 = 0x108\nBTN_9 = 0x109\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_5",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_5 = 0x105\nBTN_6 = 0x106\nBTN_7 = 0x107\nBTN_8 = 0x108\nBTN_9 = 0x109\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_6",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_6 = 0x106\nBTN_7 = 0x107\nBTN_8 = 0x108\nBTN_9 = 0x109\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_7",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_7 = 0x107\nBTN_8 = 0x108\nBTN_9 = 0x109\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114\nBTN_FORWARD = 0x115",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_8",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_8 = 0x108\nBTN_9 = 0x109\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114\nBTN_FORWARD = 0x115\nBTN_BACK = 0x116",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_9",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_9 = 0x109\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114\nBTN_FORWARD = 0x115\nBTN_BACK = 0x116\nBTN_TASK = 0x117",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_MOUSE",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114\nBTN_FORWARD = 0x115\nBTN_BACK = 0x116\nBTN_TASK = 0x117\nBTN_JOYSTICK = 0x120",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_LEFT",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114\nBTN_FORWARD = 0x115\nBTN_BACK = 0x116\nBTN_TASK = 0x117\nBTN_JOYSTICK = 0x120\nBTN_TRIGGER = 0x120",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_RIGHT",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114\nBTN_FORWARD = 0x115\nBTN_BACK = 0x116\nBTN_TASK = 0x117\nBTN_JOYSTICK = 0x120\nBTN_TRIGGER = 0x120\nBTN_THUMB = 0x121",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_MIDDLE",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114\nBTN_FORWARD = 0x115\nBTN_BACK = 0x116\nBTN_TASK = 0x117\nBTN_JOYSTICK = 0x120\nBTN_TRIGGER = 0x120\nBTN_THUMB = 0x121\nBTN_THUMB2 = 0x122",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_SIDE",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_SIDE = 0x113\nBTN_EXTRA = 0x114\nBTN_FORWARD = 0x115\nBTN_BACK = 0x116\nBTN_TASK = 0x117\nBTN_JOYSTICK = 0x120\nBTN_TRIGGER = 0x120\nBTN_THUMB = 0x121\nBTN_THUMB2 = 0x122\nBTN_TOP = 0x123",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_EXTRA",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_EXTRA = 0x114\nBTN_FORWARD = 0x115\nBTN_BACK = 0x116\nBTN_TASK = 0x117\nBTN_JOYSTICK = 0x120\nBTN_TRIGGER = 0x120\nBTN_THUMB = 0x121\nBTN_THUMB2 = 0x122\nBTN_TOP = 0x123\nBTN_TOP2 = 0x124",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_FORWARD",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_FORWARD = 0x115\nBTN_BACK = 0x116\nBTN_TASK = 0x117\nBTN_JOYSTICK = 0x120\nBTN_TRIGGER = 0x120\nBTN_THUMB = 0x121\nBTN_THUMB2 = 0x122\nBTN_TOP = 0x123\nBTN_TOP2 = 0x124\nBTN_PINKIE = 0x125",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_BACK",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_BACK = 0x116\nBTN_TASK = 0x117\nBTN_JOYSTICK = 0x120\nBTN_TRIGGER = 0x120\nBTN_THUMB = 0x121\nBTN_THUMB2 = 0x122\nBTN_TOP = 0x123\nBTN_TOP2 = 0x124\nBTN_PINKIE = 0x125\nBTN_BASE = 0x126",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_TASK",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_TASK = 0x117\nBTN_JOYSTICK = 0x120\nBTN_TRIGGER = 0x120\nBTN_THUMB = 0x121\nBTN_THUMB2 = 0x122\nBTN_TOP = 0x123\nBTN_TOP2 = 0x124\nBTN_PINKIE = 0x125\nBTN_BASE = 0x126\nBTN_BASE2 = 0x127",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_JOYSTICK",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_JOYSTICK = 0x120\nBTN_TRIGGER = 0x120\nBTN_THUMB = 0x121\nBTN_THUMB2 = 0x122\nBTN_TOP = 0x123\nBTN_TOP2 = 0x124\nBTN_PINKIE = 0x125\nBTN_BASE = 0x126\nBTN_BASE2 = 0x127\nBTN_BASE3 = 0x128",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_TRIGGER",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_TRIGGER = 0x120\nBTN_THUMB = 0x121\nBTN_THUMB2 = 0x122\nBTN_TOP = 0x123\nBTN_TOP2 = 0x124\nBTN_PINKIE = 0x125\nBTN_BASE = 0x126\nBTN_BASE2 = 0x127\nBTN_BASE3 = 0x128\nBTN_BASE4 = 0x129",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_THUMB",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_THUMB = 0x121\nBTN_THUMB2 = 0x122\nBTN_TOP = 0x123\nBTN_TOP2 = 0x124\nBTN_PINKIE = 0x125\nBTN_BASE = 0x126\nBTN_BASE2 = 0x127\nBTN_BASE3 = 0x128\nBTN_BASE4 = 0x129\nBTN_BASE5 = 0x12a",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_THUMB2",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_THUMB2 = 0x122\nBTN_TOP = 0x123\nBTN_TOP2 = 0x124\nBTN_PINKIE = 0x125\nBTN_BASE = 0x126\nBTN_BASE2 = 0x127\nBTN_BASE3 = 0x128\nBTN_BASE4 = 0x129\nBTN_BASE5 = 0x12a\nBTN_BASE6 = 0x12b",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_TOP",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_TOP = 0x123\nBTN_TOP2 = 0x124\nBTN_PINKIE = 0x125\nBTN_BASE = 0x126\nBTN_BASE2 = 0x127\nBTN_BASE3 = 0x128\nBTN_BASE4 = 0x129\nBTN_BASE5 = 0x12a\nBTN_BASE6 = 0x12b\nBTN_DEAD = 0x12f",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_TOP2",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_TOP2 = 0x124\nBTN_PINKIE = 0x125\nBTN_BASE = 0x126\nBTN_BASE2 = 0x127\nBTN_BASE3 = 0x128\nBTN_BASE4 = 0x129\nBTN_BASE5 = 0x12a\nBTN_BASE6 = 0x12b\nBTN_DEAD = 0x12f\nBTN_GAMEPAD = 0x130",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_PINKIE",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_PINKIE = 0x125\nBTN_BASE = 0x126\nBTN_BASE2 = 0x127\nBTN_BASE3 = 0x128\nBTN_BASE4 = 0x129\nBTN_BASE5 = 0x12a\nBTN_BASE6 = 0x12b\nBTN_DEAD = 0x12f\nBTN_GAMEPAD = 0x130\nBTN_SOUTH = 0x130",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_BASE",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_BASE = 0x126\nBTN_BASE2 = 0x127\nBTN_BASE3 = 0x128\nBTN_BASE4 = 0x129\nBTN_BASE5 = 0x12a\nBTN_BASE6 = 0x12b\nBTN_DEAD = 0x12f\nBTN_GAMEPAD = 0x130\nBTN_SOUTH = 0x130\nBTN_A = BTN_SOUTH",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_BASE2",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_BASE2 = 0x127\nBTN_BASE3 = 0x128\nBTN_BASE4 = 0x129\nBTN_BASE5 = 0x12a\nBTN_BASE6 = 0x12b\nBTN_DEAD = 0x12f\nBTN_GAMEPAD = 0x130\nBTN_SOUTH = 0x130\nBTN_A = BTN_SOUTH\nBTN_EAST = 0x131",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_BASE3",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_BASE3 = 0x128\nBTN_BASE4 = 0x129\nBTN_BASE5 = 0x12a\nBTN_BASE6 = 0x12b\nBTN_DEAD = 0x12f\nBTN_GAMEPAD = 0x130\nBTN_SOUTH = 0x130\nBTN_A = BTN_SOUTH\nBTN_EAST = 0x131\nBTN_B = BTN_EAST",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_BASE4",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_BASE4 = 0x129\nBTN_BASE5 = 0x12a\nBTN_BASE6 = 0x12b\nBTN_DEAD = 0x12f\nBTN_GAMEPAD = 0x130\nBTN_SOUTH = 0x130\nBTN_A = BTN_SOUTH\nBTN_EAST = 0x131\nBTN_B = BTN_EAST\nBTN_C = 0x132",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_BASE5",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_BASE5 = 0x12a\nBTN_BASE6 = 0x12b\nBTN_DEAD = 0x12f\nBTN_GAMEPAD = 0x130\nBTN_SOUTH = 0x130\nBTN_A = BTN_SOUTH\nBTN_EAST = 0x131\nBTN_B = BTN_EAST\nBTN_C = 0x132\nBTN_NORTH = 0x133",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_BASE6",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_BASE6 = 0x12b\nBTN_DEAD = 0x12f\nBTN_GAMEPAD = 0x130\nBTN_SOUTH = 0x130\nBTN_A = BTN_SOUTH\nBTN_EAST = 0x131\nBTN_B = BTN_EAST\nBTN_C = 0x132\nBTN_NORTH = 0x133\nBTN_X = BTN_NORTH",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_DEAD",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_DEAD = 0x12f\nBTN_GAMEPAD = 0x130\nBTN_SOUTH = 0x130\nBTN_A = BTN_SOUTH\nBTN_EAST = 0x131\nBTN_B = BTN_EAST\nBTN_C = 0x132\nBTN_NORTH = 0x133\nBTN_X = BTN_NORTH\nBTN_WEST = 0x134",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_GAMEPAD",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_GAMEPAD = 0x130\nBTN_SOUTH = 0x130\nBTN_A = BTN_SOUTH\nBTN_EAST = 0x131\nBTN_B = BTN_EAST\nBTN_C = 0x132\nBTN_NORTH = 0x133\nBTN_X = BTN_NORTH\nBTN_WEST = 0x134\nBTN_Y = BTN_WEST",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_SOUTH",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_SOUTH = 0x130\nBTN_A = BTN_SOUTH\nBTN_EAST = 0x131\nBTN_B = BTN_EAST\nBTN_C = 0x132\nBTN_NORTH = 0x133\nBTN_X = BTN_NORTH\nBTN_WEST = 0x134\nBTN_Y = BTN_WEST\nBTN_Z = 0x135",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_A",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_A = BTN_SOUTH\nBTN_EAST = 0x131\nBTN_B = BTN_EAST\nBTN_C = 0x132\nBTN_NORTH = 0x133\nBTN_X = BTN_NORTH\nBTN_WEST = 0x134\nBTN_Y = BTN_WEST\nBTN_Z = 0x135\nBTN_TL = 0x136",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_EAST",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_EAST = 0x131\nBTN_B = BTN_EAST\nBTN_C = 0x132\nBTN_NORTH = 0x133\nBTN_X = BTN_NORTH\nBTN_WEST = 0x134\nBTN_Y = BTN_WEST\nBTN_Z = 0x135\nBTN_TL = 0x136\nBTN_TR = 0x137",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_B",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_B = BTN_EAST\nBTN_C = 0x132\nBTN_NORTH = 0x133\nBTN_X = BTN_NORTH\nBTN_WEST = 0x134\nBTN_Y = BTN_WEST\nBTN_Z = 0x135\nBTN_TL = 0x136\nBTN_TR = 0x137\nBTN_TL2 = 0x138",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_C",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_C = 0x132\nBTN_NORTH = 0x133\nBTN_X = BTN_NORTH\nBTN_WEST = 0x134\nBTN_Y = BTN_WEST\nBTN_Z = 0x135\nBTN_TL = 0x136\nBTN_TR = 0x137\nBTN_TL2 = 0x138\nBTN_TR2 = 0x139",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_NORTH",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_NORTH = 0x133\nBTN_X = BTN_NORTH\nBTN_WEST = 0x134\nBTN_Y = BTN_WEST\nBTN_Z = 0x135\nBTN_TL = 0x136\nBTN_TR = 0x137\nBTN_TL2 = 0x138\nBTN_TR2 = 0x139\nBTN_SELECT = 0x13a",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_X",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_X = BTN_NORTH\nBTN_WEST = 0x134\nBTN_Y = BTN_WEST\nBTN_Z = 0x135\nBTN_TL = 0x136\nBTN_TR = 0x137\nBTN_TL2 = 0x138\nBTN_TR2 = 0x139\nBTN_SELECT = 0x13a\nBTN_START = 0x13b",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_WEST",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_WEST = 0x134\nBTN_Y = BTN_WEST\nBTN_Z = 0x135\nBTN_TL = 0x136\nBTN_TR = 0x137\nBTN_TL2 = 0x138\nBTN_TR2 = 0x139\nBTN_SELECT = 0x13a\nBTN_START = 0x13b\nBTN_MODE = 0x13c",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_Y",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_Y = BTN_WEST\nBTN_Z = 0x135\nBTN_TL = 0x136\nBTN_TR = 0x137\nBTN_TL2 = 0x138\nBTN_TR2 = 0x139\nBTN_SELECT = 0x13a\nBTN_START = 0x13b\nBTN_MODE = 0x13c\nBTN_THUMBL = 0x13d",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_Z",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_Z = 0x135\nBTN_TL = 0x136\nBTN_TR = 0x137\nBTN_TL2 = 0x138\nBTN_TR2 = 0x139\nBTN_SELECT = 0x13a\nBTN_START = 0x13b\nBTN_MODE = 0x13c\nBTN_THUMBL = 0x13d\nBTN_THUMBR = 0x13e",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_TL",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_TL = 0x136\nBTN_TR = 0x137\nBTN_TL2 = 0x138\nBTN_TR2 = 0x139\nBTN_SELECT = 0x13a\nBTN_START = 0x13b\nBTN_MODE = 0x13c\nBTN_THUMBL = 0x13d\nBTN_THUMBR = 0x13e\nABS_X = 0x00",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_TR",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_TR = 0x137\nBTN_TL2 = 0x138\nBTN_TR2 = 0x139\nBTN_SELECT = 0x13a\nBTN_START = 0x13b\nBTN_MODE = 0x13c\nBTN_THUMBL = 0x13d\nBTN_THUMBR = 0x13e\nABS_X = 0x00\nABS_Y = 0x01",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_TL2",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_TL2 = 0x138\nBTN_TR2 = 0x139\nBTN_SELECT = 0x13a\nBTN_START = 0x13b\nBTN_MODE = 0x13c\nBTN_THUMBL = 0x13d\nBTN_THUMBR = 0x13e\nABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_TR2",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_TR2 = 0x139\nBTN_SELECT = 0x13a\nBTN_START = 0x13b\nBTN_MODE = 0x13c\nBTN_THUMBL = 0x13d\nBTN_THUMBR = 0x13e\nABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02\nABS_RX = 0x03",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_SELECT",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_SELECT = 0x13a\nBTN_START = 0x13b\nBTN_MODE = 0x13c\nBTN_THUMBL = 0x13d\nBTN_THUMBR = 0x13e\nABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02\nABS_RX = 0x03\nABS_RY = 0x04",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_START",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_START = 0x13b\nBTN_MODE = 0x13c\nBTN_THUMBL = 0x13d\nBTN_THUMBR = 0x13e\nABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02\nABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_MODE",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_MODE = 0x13c\nBTN_THUMBL = 0x13d\nBTN_THUMBR = 0x13e\nABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02\nABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05\nABS_THROTTLE = 0x06",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_THUMBL",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_THUMBL = 0x13d\nBTN_THUMBR = 0x13e\nABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02\nABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05\nABS_THROTTLE = 0x06\nABS_RUDDER = 0x07",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "BTN_THUMBR",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "BTN_THUMBR = 0x13e\nABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02\nABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05\nABS_THROTTLE = 0x06\nABS_RUDDER = 0x07\nABS_WHEEL = 0x08",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_X",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02\nABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05\nABS_THROTTLE = 0x06\nABS_RUDDER = 0x07\nABS_WHEEL = 0x08\nABS_GAS = 0x09",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_Y",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_Y = 0x01\nABS_Z = 0x02\nABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05\nABS_THROTTLE = 0x06\nABS_RUDDER = 0x07\nABS_WHEEL = 0x08\nABS_GAS = 0x09\nABS_BRAKE = 0x0a",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_Z",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_Z = 0x02\nABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05\nABS_THROTTLE = 0x06\nABS_RUDDER = 0x07\nABS_WHEEL = 0x08\nABS_GAS = 0x09\nABS_BRAKE = 0x0a\nABS_HAT0X = 0x10",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_RX",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05\nABS_THROTTLE = 0x06\nABS_RUDDER = 0x07\nABS_WHEEL = 0x08\nABS_GAS = 0x09\nABS_BRAKE = 0x0a\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_RY",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_RY = 0x04\nABS_RZ = 0x05\nABS_THROTTLE = 0x06\nABS_RUDDER = 0x07\nABS_WHEEL = 0x08\nABS_GAS = 0x09\nABS_BRAKE = 0x0a\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\nABS_HAT1X = 0x12",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_RZ",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_RZ = 0x05\nABS_THROTTLE = 0x06\nABS_RUDDER = 0x07\nABS_WHEEL = 0x08\nABS_GAS = 0x09\nABS_BRAKE = 0x0a\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\nABS_HAT1X = 0x12\nABS_HAT1Y = 0x13",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_THROTTLE",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_THROTTLE = 0x06\nABS_RUDDER = 0x07\nABS_WHEEL = 0x08\nABS_GAS = 0x09\nABS_BRAKE = 0x0a\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\nABS_HAT1X = 0x12\nABS_HAT1Y = 0x13\nABS_HAT2X = 0x14",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_RUDDER",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_RUDDER = 0x07\nABS_WHEEL = 0x08\nABS_GAS = 0x09\nABS_BRAKE = 0x0a\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\nABS_HAT1X = 0x12\nABS_HAT1Y = 0x13\nABS_HAT2X = 0x14\nABS_HAT2Y = 0x15",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_WHEEL",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_WHEEL = 0x08\nABS_GAS = 0x09\nABS_BRAKE = 0x0a\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\nABS_HAT1X = 0x12\nABS_HAT1Y = 0x13\nABS_HAT2X = 0x14\nABS_HAT2Y = 0x15\nABS_HAT3X = 0x16",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_GAS",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_GAS = 0x09\nABS_BRAKE = 0x0a\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\nABS_HAT1X = 0x12\nABS_HAT1Y = 0x13\nABS_HAT2X = 0x14\nABS_HAT2Y = 0x15\nABS_HAT3X = 0x16\nABS_HAT3Y = 0x17",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_BRAKE",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_BRAKE = 0x0a\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\nABS_HAT1X = 0x12\nABS_HAT1Y = 0x13\nABS_HAT2X = 0x14\nABS_HAT2Y = 0x15\nABS_HAT3X = 0x16\nABS_HAT3Y = 0x17\nABS_PRESSURE = 0x18",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_HAT0X",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\nABS_HAT1X = 0x12\nABS_HAT1Y = 0x13\nABS_HAT2X = 0x14\nABS_HAT2Y = 0x15\nABS_HAT3X = 0x16\nABS_HAT3Y = 0x17\nABS_PRESSURE = 0x18\nABS_DISTANCE = 0x19",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_HAT0Y",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_HAT0Y = 0x11\nABS_HAT1X = 0x12\nABS_HAT1Y = 0x13\nABS_HAT2X = 0x14\nABS_HAT2Y = 0x15\nABS_HAT3X = 0x16\nABS_HAT3Y = 0x17\nABS_PRESSURE = 0x18\nABS_DISTANCE = 0x19\nABS_TILT_X = 0x1a",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_HAT1X",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_HAT1X = 0x12\nABS_HAT1Y = 0x13\nABS_HAT2X = 0x14\nABS_HAT2Y = 0x15\nABS_HAT3X = 0x16\nABS_HAT3Y = 0x17\nABS_PRESSURE = 0x18\nABS_DISTANCE = 0x19\nABS_TILT_X = 0x1a\nABS_TILT_Y = 0x1b",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_HAT1Y",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_HAT1Y = 0x13\nABS_HAT2X = 0x14\nABS_HAT2Y = 0x15\nABS_HAT3X = 0x16\nABS_HAT3Y = 0x17\nABS_PRESSURE = 0x18\nABS_DISTANCE = 0x19\nABS_TILT_X = 0x1a\nABS_TILT_Y = 0x1b\nABS_TOOL_WIDTH = 0x1c",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_HAT2X",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_HAT2X = 0x14\nABS_HAT2Y = 0x15\nABS_HAT3X = 0x16\nABS_HAT3Y = 0x17\nABS_PRESSURE = 0x18\nABS_DISTANCE = 0x19\nABS_TILT_X = 0x1a\nABS_TILT_Y = 0x1b\nABS_TOOL_WIDTH = 0x1c\nABS_VOLUME = 0x20",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_HAT2Y",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_HAT2Y = 0x15\nABS_HAT3X = 0x16\nABS_HAT3Y = 0x17\nABS_PRESSURE = 0x18\nABS_DISTANCE = 0x19\nABS_TILT_X = 0x1a\nABS_TILT_Y = 0x1b\nABS_TOOL_WIDTH = 0x1c\nABS_VOLUME = 0x20\nABS_PROFILE = 0x21",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_HAT3X",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_HAT3X = 0x16\nABS_HAT3Y = 0x17\nABS_PRESSURE = 0x18\nABS_DISTANCE = 0x19\nABS_TILT_X = 0x1a\nABS_TILT_Y = 0x1b\nABS_TOOL_WIDTH = 0x1c\nABS_VOLUME = 0x20\nABS_PROFILE = 0x21",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_HAT3Y",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_HAT3Y = 0x17\nABS_PRESSURE = 0x18\nABS_DISTANCE = 0x19\nABS_TILT_X = 0x1a\nABS_TILT_Y = 0x1b\nABS_TOOL_WIDTH = 0x1c\nABS_VOLUME = 0x20\nABS_PROFILE = 0x21",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_PRESSURE",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_PRESSURE = 0x18\nABS_DISTANCE = 0x19\nABS_TILT_X = 0x1a\nABS_TILT_Y = 0x1b\nABS_TOOL_WIDTH = 0x1c\nABS_VOLUME = 0x20\nABS_PROFILE = 0x21",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_DISTANCE",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_DISTANCE = 0x19\nABS_TILT_X = 0x1a\nABS_TILT_Y = 0x1b\nABS_TOOL_WIDTH = 0x1c\nABS_VOLUME = 0x20\nABS_PROFILE = 0x21",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_TILT_X",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_TILT_X = 0x1a\nABS_TILT_Y = 0x1b\nABS_TOOL_WIDTH = 0x1c\nABS_VOLUME = 0x20\nABS_PROFILE = 0x21",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_TILT_Y",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_TILT_Y = 0x1b\nABS_TOOL_WIDTH = 0x1c\nABS_VOLUME = 0x20\nABS_PROFILE = 0x21",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_TOOL_WIDTH",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_TOOL_WIDTH = 0x1c\nABS_VOLUME = 0x20\nABS_PROFILE = 0x21",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_VOLUME",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_VOLUME = 0x20\nABS_PROFILE = 0x21",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "ABS_PROFILE",
        "kind": 5,
        "importPath": "src.selkies.legacy.input_event_codes",
        "description": "src.selkies.legacy.input_event_codes",
        "peekOfCode": "ABS_PROFILE = 0x21",
        "detail": "src.selkies.legacy.input_event_codes",
        "documentation": {}
    },
    {
        "label": "Metrics",
        "kind": 6,
        "importPath": "src.selkies.legacy.metrics",
        "description": "src.selkies.legacy.metrics",
        "peekOfCode": "class Metrics:\n    def __init__(self, port=8000, using_webrtc_csv=False):\n        self.port = port\n        self.fps = Gauge('fps', 'Frames per second observed by client')\n        self.fps_hist = Histogram('fps_hist', 'Histogram of FPS observed by client', buckets=FPS_HIST_BUCKETS)\n        self.gpu_utilization = Gauge('gpu_utilization', 'Utilization percentage reported by GPU')\n        self.latency = Gauge('latency', 'Latency observed by client')\n        self.webrtc_statistics = Info('webrtc_statistics', 'WebRTC Statistics from the client')\n        self.using_webrtc_csv = using_webrtc_csv\n        self.stats_video_file_path = None",
        "detail": "src.selkies.legacy.metrics",
        "documentation": {}
    },
    {
        "label": "entrypoint",
        "kind": 2,
        "importPath": "src.selkies.legacy.metrics",
        "description": "src.selkies.legacy.metrics",
        "peekOfCode": "def entrypoint():\n    asyncio.run(main())\nif __name__ == '__main__':\n    entrypoint()",
        "detail": "src.selkies.legacy.metrics",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.legacy.metrics",
        "description": "src.selkies.legacy.metrics",
        "peekOfCode": "logger = logging.getLogger(\"metrics\")\nlogger.setLevel(logging.INFO)\nFPS_HIST_BUCKETS = (0, 20, 40, 60)\nclass Metrics:\n    def __init__(self, port=8000, using_webrtc_csv=False):\n        self.port = port\n        self.fps = Gauge('fps', 'Frames per second observed by client')\n        self.fps_hist = Histogram('fps_hist', 'Histogram of FPS observed by client', buckets=FPS_HIST_BUCKETS)\n        self.gpu_utilization = Gauge('gpu_utilization', 'Utilization percentage reported by GPU')\n        self.latency = Gauge('latency', 'Latency observed by client')",
        "detail": "src.selkies.legacy.metrics",
        "documentation": {}
    },
    {
        "label": "FPS_HIST_BUCKETS",
        "kind": 5,
        "importPath": "src.selkies.legacy.metrics",
        "description": "src.selkies.legacy.metrics",
        "peekOfCode": "FPS_HIST_BUCKETS = (0, 20, 40, 60)\nclass Metrics:\n    def __init__(self, port=8000, using_webrtc_csv=False):\n        self.port = port\n        self.fps = Gauge('fps', 'Frames per second observed by client')\n        self.fps_hist = Histogram('fps_hist', 'Histogram of FPS observed by client', buckets=FPS_HIST_BUCKETS)\n        self.gpu_utilization = Gauge('gpu_utilization', 'Utilization percentage reported by GPU')\n        self.latency = Gauge('latency', 'Latency observed by client')\n        self.webrtc_statistics = Info('webrtc_statistics', 'WebRTC Statistics from the client')\n        self.using_webrtc_csv = using_webrtc_csv",
        "detail": "src.selkies.legacy.metrics",
        "documentation": {}
    },
    {
        "label": "fit_res",
        "kind": 2,
        "importPath": "src.selkies.legacy.resize",
        "description": "src.selkies.legacy.resize",
        "peekOfCode": "def fit_res(w, h, max_w, max_h):\n    if w < max_w and h < max_h:\n        # Input resolution fits\n        return w, h\n    # Reduce input dimensions until they fit\n    new_w = float(w)\n    new_h = float(h)\n    while new_w > max_w or new_h > max_h:\n        new_w = float(new_w * 0.9999)\n        new_h = float(new_h * 0.9999)",
        "detail": "src.selkies.legacy.resize",
        "documentation": {}
    },
    {
        "label": "get_new_res",
        "kind": 2,
        "importPath": "src.selkies.legacy.resize",
        "description": "src.selkies.legacy.resize",
        "peekOfCode": "def get_new_res(res):\n    screen_name = \"screen\"\n    resolutions = []\n    screen_pat = re.compile(r'(.*)? connected.*?')\n    current_pat = re.compile(r'.*current (\\d+ x \\d+).*')\n    res_pat = re.compile(r'^(\\d+x\\d+)\\s.*$')\n    found_screen = False\n    curr_res = new_res = max_res = res\n    with os.popen('xrandr') as pipe:\n        for line in pipe:",
        "detail": "src.selkies.legacy.resize",
        "documentation": {}
    },
    {
        "label": "resize_display",
        "kind": 2,
        "importPath": "src.selkies.legacy.resize",
        "description": "src.selkies.legacy.resize",
        "peekOfCode": "def resize_display(res):\n    curr_res, new_res, resolutions, max_res, screen_name = get_new_res(res)\n    if curr_res == new_res:\n        logger.info(\"target resolution is the same: %s, skipping resize\" % res)\n        return False\n    w, h = new_res.split(\"x\")\n    res = mode = new_res\n    logger.info(\"resizing display to %s\" % res)\n    if res not in resolutions:\n        logger.info(\"adding mode %s to xrandr screen '%s'\" % (res, screen_name))",
        "detail": "src.selkies.legacy.resize",
        "documentation": {}
    },
    {
        "label": "generate_xrandr_gtf_modeline",
        "kind": 2,
        "importPath": "src.selkies.legacy.resize",
        "description": "src.selkies.legacy.resize",
        "peekOfCode": "def generate_xrandr_gtf_modeline(res):\n    mode = \"\"\n    modeline = \"\"\n    modeline_pat = re.compile(r'^.*Modeline\\s+\"(.*?)\"\\s+(.*)')\n    if len(res.split(\"x\")) == 2:\n        # have WxH format\n        toks = res.split(\"x\")\n        gtf_res = \"{} {} 60\".format(toks[0], toks[1])\n        mode = res\n    elif len(res.split(\" \")) == 2:",
        "detail": "src.selkies.legacy.resize",
        "documentation": {}
    },
    {
        "label": "set_dpi",
        "kind": 2,
        "importPath": "src.selkies.legacy.resize",
        "description": "src.selkies.legacy.resize",
        "peekOfCode": "def set_dpi(dpi):\n    if which(\"xfconf-query\"):\n        # Set window scale\n        cmd = [\"xfconf-query\", \"-c\", \"xsettings\", \"-p\", \"/Xft/DPI\", \"-s\", str(dpi), \"--create\", \"-t\", \"int\"]\n        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout, stderr = p.communicate()\n        if p.returncode != 0:\n            logger.error(\"failed to set XFCE DPI to: '%d': %s%s\" % (dpi, str(stdout), str(stderr)))\n            return False\n    else:",
        "detail": "src.selkies.legacy.resize",
        "documentation": {}
    },
    {
        "label": "set_cursor_size",
        "kind": 2,
        "importPath": "src.selkies.legacy.resize",
        "description": "src.selkies.legacy.resize",
        "peekOfCode": "def set_cursor_size(size):\n    if which(\"xfconf-query\"):\n        # Set cursor size\n        cmd = [\"xfconf-query\", \"-c\", \"xsettings\", \"-p\", \"/Gtk/CursorThemeSize\", \"-s\", str(size), \"--create\", \"-t\", \"int\"]\n        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout, stderr = p.communicate()\n        if p.returncode != 0:\n            logger.error(\"failed to set XFCE cursor size to: '%d': %s%s\" % (size, str(stdout), str(stderr)))\n            return False\n    else:",
        "detail": "src.selkies.legacy.resize",
        "documentation": {}
    },
    {
        "label": "entrypoint",
        "kind": 2,
        "importPath": "src.selkies.legacy.resize",
        "description": "src.selkies.legacy.resize",
        "peekOfCode": "def entrypoint():\n    asyncio.run(main())\nif __name__ == \"__main__\":\n    entrypoint()",
        "detail": "src.selkies.legacy.resize",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.legacy.resize",
        "description": "src.selkies.legacy.resize",
        "peekOfCode": "logger = logging.getLogger(\"gstwebrtc_app_resize\")\nlogger.setLevel(logging.DEBUG)\ndef fit_res(w, h, max_w, max_h):\n    if w < max_w and h < max_h:\n        # Input resolution fits\n        return w, h\n    # Reduce input dimensions until they fit\n    new_w = float(w)\n    new_h = float(h)\n    while new_w > max_w or new_h > max_h:",
        "detail": "src.selkies.legacy.resize",
        "documentation": {}
    },
    {
        "label": "WebRTCSimpleServer",
        "kind": 6,
        "importPath": "src.selkies.legacy.signalling_web",
        "description": "src.selkies.legacy.signalling_web",
        "peekOfCode": "class WebRTCSimpleServer(object):\n    def __init__(self, options):\n        ############### Global data ###############\n        # Format: {uid, remote_address, <'session'|room_id|None>)}\n        self.peers = dict()\n        # Format: {caller_uid: callee_uid,\n        #          callee_uid: caller_uid}\n        # Bidirectional mapping between the two peers\n        self.sessions = dict()\n        # Format: {room_id: {peer1_id, peer2_id, peer3_id, ...}}",
        "detail": "src.selkies.legacy.signalling_web",
        "documentation": {}
    },
    {
        "label": "generate_rtc_config",
        "kind": 2,
        "importPath": "src.selkies.legacy.signalling_web",
        "description": "src.selkies.legacy.signalling_web",
        "peekOfCode": "def generate_rtc_config(turn_host, turn_port, shared_secret, user, protocol='udp', turn_tls=False, stun_host=None, stun_port=None):\n    # Use shared secret to generate HMAC credential\n    # Sanitize user for credential compatibility\n    user = user.replace(\":\", \"-\")\n    # Credential expires in 24 hours\n    expiry_hour = 24\n    exp = int(time.time()) + expiry_hour * 3600\n    username = \"{}:{}\".format(exp, user)\n    # Generate HMAC credential\n    hashed = hmac.new(bytes(shared_secret, \"utf-8\"), bytes(username, \"utf-8\"), hashlib.sha1).digest()",
        "detail": "src.selkies.legacy.signalling_web",
        "documentation": {}
    },
    {
        "label": "entrypoint",
        "kind": 2,
        "importPath": "src.selkies.legacy.signalling_web",
        "description": "src.selkies.legacy.signalling_web",
        "peekOfCode": "def entrypoint():\n    default_web_root = os.path.join(os.getcwd(), \"../../addons/gst-web/src\")\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('--addr', default='', help='Address to listen on (default: all interfaces, both ipv4 and ipv6)')\n    parser.add_argument('--port', default=8443, type=int, help='Port to listen on')\n    parser.add_argument('--web_root', default=default_web_root, type=str, help='Path to web root')\n    parser.add_argument('--rtc_config_file', default=\"/tmp/rtc.json\", type=str, help='Path to JSON RTC config file')\n    parser.add_argument('--rtc_config', default=\"\", type=str, help='JSON RTC config data')\n    parser.add_argument('--turn_shared_secret', default=\"\", type=str, help='shared secret for generating TURN HMAC credentials')\n    parser.add_argument('--turn_host', default=\"\", type=str, help='TURN host when generating RTC config with shared secret')",
        "detail": "src.selkies.legacy.signalling_web",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.legacy.signalling_web",
        "description": "src.selkies.legacy.signalling_web",
        "peekOfCode": "logger = logging.getLogger(\"signaling\")\nweb_logger = logging.getLogger(\"web\")\n# websockets logs an error if a connection is opened and closed before any data is sent.\n# The client seems to do same thing, causing an inital handshake error.\nlogging.getLogger(\"websockets\").setLevel(logging.CRITICAL)\nMIME_TYPES = {\n    \"html\": \"text/html\",\n    \"js\": \"text/javascript\",\n    \"css\": \"text/css\",\n    \"ico\": \"image/x-icon\"",
        "detail": "src.selkies.legacy.signalling_web",
        "documentation": {}
    },
    {
        "label": "web_logger",
        "kind": 5,
        "importPath": "src.selkies.legacy.signalling_web",
        "description": "src.selkies.legacy.signalling_web",
        "peekOfCode": "web_logger = logging.getLogger(\"web\")\n# websockets logs an error if a connection is opened and closed before any data is sent.\n# The client seems to do same thing, causing an inital handshake error.\nlogging.getLogger(\"websockets\").setLevel(logging.CRITICAL)\nMIME_TYPES = {\n    \"html\": \"text/html\",\n    \"js\": \"text/javascript\",\n    \"css\": \"text/css\",\n    \"ico\": \"image/x-icon\"\n}",
        "detail": "src.selkies.legacy.signalling_web",
        "documentation": {}
    },
    {
        "label": "MIME_TYPES",
        "kind": 5,
        "importPath": "src.selkies.legacy.signalling_web",
        "description": "src.selkies.legacy.signalling_web",
        "peekOfCode": "MIME_TYPES = {\n    \"html\": \"text/html\",\n    \"js\": \"text/javascript\",\n    \"css\": \"text/css\",\n    \"ico\": \"image/x-icon\"\n}\ndef generate_rtc_config(turn_host, turn_port, shared_secret, user, protocol='udp', turn_tls=False, stun_host=None, stun_port=None):\n    # Use shared secret to generate HMAC credential\n    # Sanitize user for credential compatibility\n    user = user.replace(\":\", \"-\")",
        "detail": "src.selkies.legacy.signalling_web",
        "documentation": {}
    },
    {
        "label": "SystemMonitor",
        "kind": 6,
        "importPath": "src.selkies.legacy.system_monitor",
        "description": "src.selkies.legacy.system_monitor",
        "peekOfCode": "class SystemMonitor:\n    def __init__(self, period=1, enabled=True):\n        self.period = period\n        self.enabled = enabled\n        self.running = False\n        self.cpu_percent = 0\n        self.mem_total = 0\n        self.mem_used = 0\n        self.on_timer = lambda: logger.warning(\n            \"unhandled on_timer\")",
        "detail": "src.selkies.legacy.system_monitor",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.legacy.system_monitor",
        "description": "src.selkies.legacy.system_monitor",
        "peekOfCode": "logger = logging.getLogger(\"system_monitor\")\nlogger.setLevel(logging.INFO)\nclass SystemMonitor:\n    def __init__(self, period=1, enabled=True):\n        self.period = period\n        self.enabled = enabled\n        self.running = False\n        self.cpu_percent = 0\n        self.mem_total = 0\n        self.mem_used = 0",
        "detail": "src.selkies.legacy.system_monitor",
        "documentation": {}
    },
    {
        "label": "on_modified_handler",
        "kind": 2,
        "importPath": "src.selkies.legacy.watch_test",
        "description": "src.selkies.legacy.watch_test",
        "peekOfCode": "def on_modified_handler(event):\n    if type(event) is FileModifiedEvent:\n        print(\"File changed: {}\".format(event.src_path))\nasync def main():\n    logging.basicConfig(level=logging.INFO,\n                    format='%(asctime)s - %(message)s',\n                    datefmt='%Y-%m-%d %H:%M:%S')\n    path = sys.argv[1] if len(sys.argv) > 1 else '.'\n    event_handler = FileSystemEventHandler()\n    event_handler.on_modified = on_modified_handler",
        "detail": "src.selkies.legacy.watch_test",
        "documentation": {}
    },
    {
        "label": "entrypoint",
        "kind": 2,
        "importPath": "src.selkies.legacy.watch_test",
        "description": "src.selkies.legacy.watch_test",
        "peekOfCode": "def entrypoint():\n    asyncio.run(main())\nif __name__ == \"__main__\":\n    entrypoint()",
        "detail": "src.selkies.legacy.watch_test",
        "documentation": {}
    },
    {
        "label": "HMACRTCMonitor",
        "kind": 6,
        "importPath": "src.selkies.legacy.webrtc",
        "description": "src.selkies.legacy.webrtc",
        "peekOfCode": "class HMACRTCMonitor:\n    def __init__(self, turn_host, turn_port, turn_shared_secret, turn_username, turn_protocol='udp', turn_tls=False, stun_host=None, stun_port=None, period=60, enabled=True):\n        self.turn_host = turn_host\n        self.turn_port = turn_port\n        self.turn_username = turn_username\n        self.turn_shared_secret = turn_shared_secret\n        self.turn_protocol = turn_protocol\n        self.turn_tls = turn_tls\n        self.stun_host = stun_host\n        self.stun_port = stun_port",
        "detail": "src.selkies.legacy.webrtc",
        "documentation": {}
    },
    {
        "label": "RESTRTCMonitor",
        "kind": 6,
        "importPath": "src.selkies.legacy.webrtc",
        "description": "src.selkies.legacy.webrtc",
        "peekOfCode": "class RESTRTCMonitor:\n    def __init__(self, turn_rest_uri, turn_rest_username, turn_rest_username_auth_header, turn_protocol='udp', turn_rest_protocol_header='x-turn-protocol', turn_tls=False, turn_rest_tls_header='x-turn-tls', period=60, enabled=True):\n        self.period = period\n        self.enabled = enabled\n        self.running = False\n        self.turn_rest_uri = turn_rest_uri\n        self.turn_rest_username = turn_rest_username.replace(\":\", \"-\")\n        self.turn_rest_username_auth_header = turn_rest_username_auth_header\n        self.turn_protocol = turn_protocol\n        self.turn_rest_protocol_header = turn_rest_protocol_header",
        "detail": "src.selkies.legacy.webrtc",
        "documentation": {}
    },
    {
        "label": "RTCConfigFileMonitor",
        "kind": 6,
        "importPath": "src.selkies.legacy.webrtc",
        "description": "src.selkies.legacy.webrtc",
        "peekOfCode": "class RTCConfigFileMonitor:\n    def __init__(self, rtc_file, enabled=True):\n        self.enabled = enabled\n        self.running = False\n        self.rtc_file = rtc_file\n        self.on_rtc_config = lambda stun_servers, turn_servers, rtc_config: logger.warning(\"unhandled on_rtc_config\")\n        self.observer = Observer()\n        self.file_event_handler = FileSystemEventHandler()\n        self.file_event_handler.on_closed = self.event_handler\n        self.observer.schedule(self.file_event_handler, self.rtc_file, recursive=False)",
        "detail": "src.selkies.legacy.webrtc",
        "documentation": {}
    },
    {
        "label": "make_turn_rtc_config_json_legacy",
        "kind": 2,
        "importPath": "src.selkies.legacy.webrtc",
        "description": "src.selkies.legacy.webrtc",
        "peekOfCode": "def make_turn_rtc_config_json_legacy(turn_host, turn_port, username, password, protocol='udp', turn_tls=False, stun_host=None, stun_port=None):\n    stun_list = [\"stun:{}:{}\".format(turn_host, turn_port)]\n    if stun_host is not None and stun_port is not None and (stun_host != turn_host or str(stun_port) != str(turn_port)):\n        stun_list.insert(0, \"stun:{}:{}\".format(stun_host, stun_port))\n    if stun_host != \"stun.l.google.com\" or (str(stun_port) != \"19302\"):\n        stun_list.append(\"stun:stun.l.google.com:19302\")\n    rtc_config = {}\n    rtc_config[\"lifetimeDuration\"] = \"86400s\"\n    rtc_config[\"blockStatus\"] = \"NOT_BLOCKED\"\n    rtc_config[\"iceTransportPolicy\"] = \"all\"",
        "detail": "src.selkies.legacy.webrtc",
        "documentation": {}
    },
    {
        "label": "parse_rtc_config",
        "kind": 2,
        "importPath": "src.selkies.legacy.webrtc",
        "description": "src.selkies.legacy.webrtc",
        "peekOfCode": "def parse_rtc_config(data):\n    ice_servers = json.loads(data)['iceServers']\n    stun_uris = []\n    turn_uris = []\n    for ice_server in ice_servers:\n        for url in ice_server.get(\"urls\", []):\n            if url.startswith(\"stun:\"):\n                stun_host = url.split(\":\")[1]\n                stun_port = url.split(\":\")[2].split(\"?\")[0]\n                stun_uri = \"stun://%s:%s\" % (",
        "detail": "src.selkies.legacy.webrtc",
        "documentation": {}
    },
    {
        "label": "fetch_turn_rest",
        "kind": 2,
        "importPath": "src.selkies.legacy.webrtc",
        "description": "src.selkies.legacy.webrtc",
        "peekOfCode": "def fetch_turn_rest(uri, user, auth_header_username='x-auth-user', protocol='udp', header_protocol='x-turn-protocol', turn_tls=False, header_tls='x-turn-tls'):\n    \"\"\"Fetches TURN uri from a REST API\n    Arguments:\n        uri {string} -- uri of REST API service, example: http://localhost:8081/\n        user {string} -- username used to generate TURN credential, for example: <hostname>\n    Raises:\n        Exception -- if response http status code is >= 400\n    Returns:\n        [string] -- TURN URI used with gstwebrtcbin in the form of:\n                        turn://<user>:<password>@<host>:<port>",
        "detail": "src.selkies.legacy.webrtc",
        "documentation": {}
    },
    {
        "label": "fetch_cloudflare_turn",
        "kind": 2,
        "importPath": "src.selkies.legacy.webrtc",
        "description": "src.selkies.legacy.webrtc",
        "peekOfCode": "def fetch_cloudflare_turn(turn_token_id, api_token, ttl=86400):\n    # Obtain TURN credentials from Cloudflare Calls API.\n    # https://developers.cloudflare.com/calls/turn/generate-credentials/\n    auth_headers = {\n        \"authorization\": f\"Bearer {api_token}\",\n        \"content-type\": \"application/json\"\n    }\n    uri = f\"https://rtc.live.cloudflare.com/v1/turn/keys/{turn_token_id}/credentials/generate\"\n    data = {\n        \"ttl\": ttl",
        "detail": "src.selkies.legacy.webrtc",
        "documentation": {}
    },
    {
        "label": "set_json_app_argument",
        "kind": 2,
        "importPath": "src.selkies.legacy.webrtc",
        "description": "src.selkies.legacy.webrtc",
        "peekOfCode": "def set_json_app_argument(config_path, key, value):\n    \"\"\"Writes kv pair to json argument file\n    Arguments:\n        config_path {string} -- path to json config file, example: /tmp/selkies_config.json\n        key {string} -- the name of the argument to set\n        value {any} -- the value of the argument to set\n    \"\"\"\n    if not os.path.exists(config_path):\n        # Create new file\n        with open(config_path, 'w') as f:",
        "detail": "src.selkies.legacy.webrtc",
        "documentation": {}
    },
    {
        "label": "wr_entrypoint",
        "kind": 2,
        "importPath": "src.selkies.legacy.webrtc",
        "description": "src.selkies.legacy.webrtc",
        "peekOfCode": "def wr_entrypoint():\n    asyncio.run(main())",
        "detail": "src.selkies.legacy.webrtc",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc",
        "description": "src.selkies.legacy.webrtc",
        "peekOfCode": "logger = logging.getLogger(\"main\")\nlogger.setLevel(logging.INFO)\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileClosedEvent, FileSystemEventHandler\nfrom webrtc_input import WebRTCInput\nfrom webrtc_signalling import WebRTCSignalling, WebRTCSignallingErrorNoPeer\nfrom gstwebrtc_app import GSTWebRTCApp\nfrom gpu_monitor import GPUMonitor\nfrom system_monitor import SystemMonitor\nfrom metrics import Metrics",
        "detail": "src.selkies.legacy.webrtc",
        "documentation": {}
    },
    {
        "label": "DEFAULT_RTC_CONFIG",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc",
        "description": "src.selkies.legacy.webrtc",
        "peekOfCode": "DEFAULT_RTC_CONFIG = \"\"\"{\n  \"lifetimeDuration\": \"86400s\",\n  \"iceServers\": [\n    {\n      \"urls\": [\n        \"stun:stun.l.google.com:19302\"\n      ]\n    }\n  ],\n  \"blockStatus\": \"NOT_BLOCKED\",",
        "detail": "src.selkies.legacy.webrtc",
        "documentation": {}
    },
    {
        "label": "WebRTCInputError",
        "kind": 6,
        "importPath": "src.selkies.legacy.webrtc_input",
        "description": "src.selkies.legacy.webrtc_input",
        "peekOfCode": "class WebRTCInputError(Exception):\n    pass\nclass WebRTCInput:\n    def __init__(self, uinput_mouse_socket_path=\"\", js_socket_path=\"\", enable_clipboard=\"\", enable_cursors=True, cursor_size=16, cursor_scale=1.0, cursor_debug=False):\n        \"\"\"Initializes WebRTC input instance\n        \"\"\"\n        self.clipboard_running = False\n        self.uinput_mouse_socket_path = uinput_mouse_socket_path\n        self.uinput_mouse_socket = None\n        # Map of gamepad numbers to socket paths",
        "detail": "src.selkies.legacy.webrtc_input",
        "documentation": {}
    },
    {
        "label": "WebRTCInput",
        "kind": 6,
        "importPath": "src.selkies.legacy.webrtc_input",
        "description": "src.selkies.legacy.webrtc_input",
        "peekOfCode": "class WebRTCInput:\n    def __init__(self, uinput_mouse_socket_path=\"\", js_socket_path=\"\", enable_clipboard=\"\", enable_cursors=True, cursor_size=16, cursor_scale=1.0, cursor_debug=False):\n        \"\"\"Initializes WebRTC input instance\n        \"\"\"\n        self.clipboard_running = False\n        self.uinput_mouse_socket_path = uinput_mouse_socket_path\n        self.uinput_mouse_socket = None\n        # Map of gamepad numbers to socket paths\n        self.js_socket_path_map = {i: os.path.join(js_socket_path, \"selkies_js%d.sock\" % i) for i in range(4)}\n        # Map of gamepad number to SelkiesGamepad objects",
        "detail": "src.selkies.legacy.webrtc_input",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc_input",
        "description": "src.selkies.legacy.webrtc_input",
        "peekOfCode": "logger = logging.getLogger(\"webrtc_input\")\nlogger.setLevel(logging.INFO)\n# Local enumerations for mouse actions.\nMOUSE_POSITION = 10\nMOUSE_MOVE = 11\nMOUSE_SCROLL_UP = 20\nMOUSE_SCROLL_DOWN = 21\nMOUSE_BUTTON_PRESS = 30\nMOUSE_BUTTON_RELEASE = 31\nMOUSE_BUTTON = 40",
        "detail": "src.selkies.legacy.webrtc_input",
        "documentation": {}
    },
    {
        "label": "MOUSE_POSITION",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc_input",
        "description": "src.selkies.legacy.webrtc_input",
        "peekOfCode": "MOUSE_POSITION = 10\nMOUSE_MOVE = 11\nMOUSE_SCROLL_UP = 20\nMOUSE_SCROLL_DOWN = 21\nMOUSE_BUTTON_PRESS = 30\nMOUSE_BUTTON_RELEASE = 31\nMOUSE_BUTTON = 40\nMOUSE_BUTTON_LEFT = 41\nMOUSE_BUTTON_MIDDLE = 42\nMOUSE_BUTTON_RIGHT = 43",
        "detail": "src.selkies.legacy.webrtc_input",
        "documentation": {}
    },
    {
        "label": "MOUSE_MOVE",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc_input",
        "description": "src.selkies.legacy.webrtc_input",
        "peekOfCode": "MOUSE_MOVE = 11\nMOUSE_SCROLL_UP = 20\nMOUSE_SCROLL_DOWN = 21\nMOUSE_BUTTON_PRESS = 30\nMOUSE_BUTTON_RELEASE = 31\nMOUSE_BUTTON = 40\nMOUSE_BUTTON_LEFT = 41\nMOUSE_BUTTON_MIDDLE = 42\nMOUSE_BUTTON_RIGHT = 43\nUINPUT_BTN_LEFT = (0x01, 0x110)",
        "detail": "src.selkies.legacy.webrtc_input",
        "documentation": {}
    },
    {
        "label": "MOUSE_SCROLL_UP",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc_input",
        "description": "src.selkies.legacy.webrtc_input",
        "peekOfCode": "MOUSE_SCROLL_UP = 20\nMOUSE_SCROLL_DOWN = 21\nMOUSE_BUTTON_PRESS = 30\nMOUSE_BUTTON_RELEASE = 31\nMOUSE_BUTTON = 40\nMOUSE_BUTTON_LEFT = 41\nMOUSE_BUTTON_MIDDLE = 42\nMOUSE_BUTTON_RIGHT = 43\nUINPUT_BTN_LEFT = (0x01, 0x110)\nUINPUT_BTN_MIDDLE = (0x01, 0x112)",
        "detail": "src.selkies.legacy.webrtc_input",
        "documentation": {}
    },
    {
        "label": "MOUSE_SCROLL_DOWN",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc_input",
        "description": "src.selkies.legacy.webrtc_input",
        "peekOfCode": "MOUSE_SCROLL_DOWN = 21\nMOUSE_BUTTON_PRESS = 30\nMOUSE_BUTTON_RELEASE = 31\nMOUSE_BUTTON = 40\nMOUSE_BUTTON_LEFT = 41\nMOUSE_BUTTON_MIDDLE = 42\nMOUSE_BUTTON_RIGHT = 43\nUINPUT_BTN_LEFT = (0x01, 0x110)\nUINPUT_BTN_MIDDLE = (0x01, 0x112)\nUINPUT_BTN_RIGHT = (0x01, 0x111)",
        "detail": "src.selkies.legacy.webrtc_input",
        "documentation": {}
    },
    {
        "label": "MOUSE_BUTTON_PRESS",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc_input",
        "description": "src.selkies.legacy.webrtc_input",
        "peekOfCode": "MOUSE_BUTTON_PRESS = 30\nMOUSE_BUTTON_RELEASE = 31\nMOUSE_BUTTON = 40\nMOUSE_BUTTON_LEFT = 41\nMOUSE_BUTTON_MIDDLE = 42\nMOUSE_BUTTON_RIGHT = 43\nUINPUT_BTN_LEFT = (0x01, 0x110)\nUINPUT_BTN_MIDDLE = (0x01, 0x112)\nUINPUT_BTN_RIGHT = (0x01, 0x111)\nUINPUT_REL_X = (0x02, 0x00)",
        "detail": "src.selkies.legacy.webrtc_input",
        "documentation": {}
    },
    {
        "label": "MOUSE_BUTTON_RELEASE",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc_input",
        "description": "src.selkies.legacy.webrtc_input",
        "peekOfCode": "MOUSE_BUTTON_RELEASE = 31\nMOUSE_BUTTON = 40\nMOUSE_BUTTON_LEFT = 41\nMOUSE_BUTTON_MIDDLE = 42\nMOUSE_BUTTON_RIGHT = 43\nUINPUT_BTN_LEFT = (0x01, 0x110)\nUINPUT_BTN_MIDDLE = (0x01, 0x112)\nUINPUT_BTN_RIGHT = (0x01, 0x111)\nUINPUT_REL_X = (0x02, 0x00)\nUINPUT_REL_Y = (0x02, 0x01)",
        "detail": "src.selkies.legacy.webrtc_input",
        "documentation": {}
    },
    {
        "label": "MOUSE_BUTTON",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc_input",
        "description": "src.selkies.legacy.webrtc_input",
        "peekOfCode": "MOUSE_BUTTON = 40\nMOUSE_BUTTON_LEFT = 41\nMOUSE_BUTTON_MIDDLE = 42\nMOUSE_BUTTON_RIGHT = 43\nUINPUT_BTN_LEFT = (0x01, 0x110)\nUINPUT_BTN_MIDDLE = (0x01, 0x112)\nUINPUT_BTN_RIGHT = (0x01, 0x111)\nUINPUT_REL_X = (0x02, 0x00)\nUINPUT_REL_Y = (0x02, 0x01)\nUINPUT_REL_WHEEL = (0x02, 0x08)",
        "detail": "src.selkies.legacy.webrtc_input",
        "documentation": {}
    },
    {
        "label": "MOUSE_BUTTON_LEFT",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc_input",
        "description": "src.selkies.legacy.webrtc_input",
        "peekOfCode": "MOUSE_BUTTON_LEFT = 41\nMOUSE_BUTTON_MIDDLE = 42\nMOUSE_BUTTON_RIGHT = 43\nUINPUT_BTN_LEFT = (0x01, 0x110)\nUINPUT_BTN_MIDDLE = (0x01, 0x112)\nUINPUT_BTN_RIGHT = (0x01, 0x111)\nUINPUT_REL_X = (0x02, 0x00)\nUINPUT_REL_Y = (0x02, 0x01)\nUINPUT_REL_WHEEL = (0x02, 0x08)\n# Local map for uinput and pynput buttons",
        "detail": "src.selkies.legacy.webrtc_input",
        "documentation": {}
    },
    {
        "label": "MOUSE_BUTTON_MIDDLE",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc_input",
        "description": "src.selkies.legacy.webrtc_input",
        "peekOfCode": "MOUSE_BUTTON_MIDDLE = 42\nMOUSE_BUTTON_RIGHT = 43\nUINPUT_BTN_LEFT = (0x01, 0x110)\nUINPUT_BTN_MIDDLE = (0x01, 0x112)\nUINPUT_BTN_RIGHT = (0x01, 0x111)\nUINPUT_REL_X = (0x02, 0x00)\nUINPUT_REL_Y = (0x02, 0x01)\nUINPUT_REL_WHEEL = (0x02, 0x08)\n# Local map for uinput and pynput buttons\nMOUSE_BUTTON_MAP = {",
        "detail": "src.selkies.legacy.webrtc_input",
        "documentation": {}
    },
    {
        "label": "MOUSE_BUTTON_RIGHT",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc_input",
        "description": "src.selkies.legacy.webrtc_input",
        "peekOfCode": "MOUSE_BUTTON_RIGHT = 43\nUINPUT_BTN_LEFT = (0x01, 0x110)\nUINPUT_BTN_MIDDLE = (0x01, 0x112)\nUINPUT_BTN_RIGHT = (0x01, 0x111)\nUINPUT_REL_X = (0x02, 0x00)\nUINPUT_REL_Y = (0x02, 0x01)\nUINPUT_REL_WHEEL = (0x02, 0x08)\n# Local map for uinput and pynput buttons\nMOUSE_BUTTON_MAP = {\n    MOUSE_BUTTON_LEFT: {",
        "detail": "src.selkies.legacy.webrtc_input",
        "documentation": {}
    },
    {
        "label": "UINPUT_BTN_LEFT",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc_input",
        "description": "src.selkies.legacy.webrtc_input",
        "peekOfCode": "UINPUT_BTN_LEFT = (0x01, 0x110)\nUINPUT_BTN_MIDDLE = (0x01, 0x112)\nUINPUT_BTN_RIGHT = (0x01, 0x111)\nUINPUT_REL_X = (0x02, 0x00)\nUINPUT_REL_Y = (0x02, 0x01)\nUINPUT_REL_WHEEL = (0x02, 0x08)\n# Local map for uinput and pynput buttons\nMOUSE_BUTTON_MAP = {\n    MOUSE_BUTTON_LEFT: {\n        \"uinput\": UINPUT_BTN_LEFT,",
        "detail": "src.selkies.legacy.webrtc_input",
        "documentation": {}
    },
    {
        "label": "UINPUT_BTN_MIDDLE",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc_input",
        "description": "src.selkies.legacy.webrtc_input",
        "peekOfCode": "UINPUT_BTN_MIDDLE = (0x01, 0x112)\nUINPUT_BTN_RIGHT = (0x01, 0x111)\nUINPUT_REL_X = (0x02, 0x00)\nUINPUT_REL_Y = (0x02, 0x01)\nUINPUT_REL_WHEEL = (0x02, 0x08)\n# Local map for uinput and pynput buttons\nMOUSE_BUTTON_MAP = {\n    MOUSE_BUTTON_LEFT: {\n        \"uinput\": UINPUT_BTN_LEFT,\n        \"pynput\": pynput.mouse.Button.left,",
        "detail": "src.selkies.legacy.webrtc_input",
        "documentation": {}
    },
    {
        "label": "UINPUT_BTN_RIGHT",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc_input",
        "description": "src.selkies.legacy.webrtc_input",
        "peekOfCode": "UINPUT_BTN_RIGHT = (0x01, 0x111)\nUINPUT_REL_X = (0x02, 0x00)\nUINPUT_REL_Y = (0x02, 0x01)\nUINPUT_REL_WHEEL = (0x02, 0x08)\n# Local map for uinput and pynput buttons\nMOUSE_BUTTON_MAP = {\n    MOUSE_BUTTON_LEFT: {\n        \"uinput\": UINPUT_BTN_LEFT,\n        \"pynput\": pynput.mouse.Button.left,\n    },",
        "detail": "src.selkies.legacy.webrtc_input",
        "documentation": {}
    },
    {
        "label": "UINPUT_REL_X",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc_input",
        "description": "src.selkies.legacy.webrtc_input",
        "peekOfCode": "UINPUT_REL_X = (0x02, 0x00)\nUINPUT_REL_Y = (0x02, 0x01)\nUINPUT_REL_WHEEL = (0x02, 0x08)\n# Local map for uinput and pynput buttons\nMOUSE_BUTTON_MAP = {\n    MOUSE_BUTTON_LEFT: {\n        \"uinput\": UINPUT_BTN_LEFT,\n        \"pynput\": pynput.mouse.Button.left,\n    },\n    MOUSE_BUTTON_MIDDLE: {",
        "detail": "src.selkies.legacy.webrtc_input",
        "documentation": {}
    },
    {
        "label": "UINPUT_REL_Y",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc_input",
        "description": "src.selkies.legacy.webrtc_input",
        "peekOfCode": "UINPUT_REL_Y = (0x02, 0x01)\nUINPUT_REL_WHEEL = (0x02, 0x08)\n# Local map for uinput and pynput buttons\nMOUSE_BUTTON_MAP = {\n    MOUSE_BUTTON_LEFT: {\n        \"uinput\": UINPUT_BTN_LEFT,\n        \"pynput\": pynput.mouse.Button.left,\n    },\n    MOUSE_BUTTON_MIDDLE: {\n        \"uinput\": UINPUT_BTN_MIDDLE,",
        "detail": "src.selkies.legacy.webrtc_input",
        "documentation": {}
    },
    {
        "label": "UINPUT_REL_WHEEL",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc_input",
        "description": "src.selkies.legacy.webrtc_input",
        "peekOfCode": "UINPUT_REL_WHEEL = (0x02, 0x08)\n# Local map for uinput and pynput buttons\nMOUSE_BUTTON_MAP = {\n    MOUSE_BUTTON_LEFT: {\n        \"uinput\": UINPUT_BTN_LEFT,\n        \"pynput\": pynput.mouse.Button.left,\n    },\n    MOUSE_BUTTON_MIDDLE: {\n        \"uinput\": UINPUT_BTN_MIDDLE,\n        \"pynput\": pynput.mouse.Button.middle,",
        "detail": "src.selkies.legacy.webrtc_input",
        "documentation": {}
    },
    {
        "label": "MOUSE_BUTTON_MAP",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc_input",
        "description": "src.selkies.legacy.webrtc_input",
        "peekOfCode": "MOUSE_BUTTON_MAP = {\n    MOUSE_BUTTON_LEFT: {\n        \"uinput\": UINPUT_BTN_LEFT,\n        \"pynput\": pynput.mouse.Button.left,\n    },\n    MOUSE_BUTTON_MIDDLE: {\n        \"uinput\": UINPUT_BTN_MIDDLE,\n        \"pynput\": pynput.mouse.Button.middle,\n    },\n    MOUSE_BUTTON_RIGHT: {",
        "detail": "src.selkies.legacy.webrtc_input",
        "documentation": {}
    },
    {
        "label": "WebRTCSignallingError",
        "kind": 6,
        "importPath": "src.selkies.legacy.webrtc_signalling",
        "description": "src.selkies.legacy.webrtc_signalling",
        "peekOfCode": "class WebRTCSignallingError(Exception):\n    pass\nclass WebRTCSignallingErrorNoPeer(Exception):\n    pass\nclass WebRTCSignalling:\n    def __init__(self, server, id, peer_id, enable_https=False, enable_basic_auth=False, basic_auth_user=None, basic_auth_password=None):\n        \"\"\"Initialize the signalling instance\n        Arguments:\n            server {string} -- websocket URI to connect to, example: ws://127.0.0.1:8080\n            id {integer} -- ID of this client when registering.",
        "detail": "src.selkies.legacy.webrtc_signalling",
        "documentation": {}
    },
    {
        "label": "WebRTCSignallingErrorNoPeer",
        "kind": 6,
        "importPath": "src.selkies.legacy.webrtc_signalling",
        "description": "src.selkies.legacy.webrtc_signalling",
        "peekOfCode": "class WebRTCSignallingErrorNoPeer(Exception):\n    pass\nclass WebRTCSignalling:\n    def __init__(self, server, id, peer_id, enable_https=False, enable_basic_auth=False, basic_auth_user=None, basic_auth_password=None):\n        \"\"\"Initialize the signalling instance\n        Arguments:\n            server {string} -- websocket URI to connect to, example: ws://127.0.0.1:8080\n            id {integer} -- ID of this client when registering.\n            peer_id {integer} -- ID of peer to connect to.\n        \"\"\"",
        "detail": "src.selkies.legacy.webrtc_signalling",
        "documentation": {}
    },
    {
        "label": "WebRTCSignalling",
        "kind": 6,
        "importPath": "src.selkies.legacy.webrtc_signalling",
        "description": "src.selkies.legacy.webrtc_signalling",
        "peekOfCode": "class WebRTCSignalling:\n    def __init__(self, server, id, peer_id, enable_https=False, enable_basic_auth=False, basic_auth_user=None, basic_auth_password=None):\n        \"\"\"Initialize the signalling instance\n        Arguments:\n            server {string} -- websocket URI to connect to, example: ws://127.0.0.1:8080\n            id {integer} -- ID of this client when registering.\n            peer_id {integer} -- ID of peer to connect to.\n        \"\"\"\n        self.server = server\n        self.id = id",
        "detail": "src.selkies.legacy.webrtc_signalling",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.legacy.webrtc_signalling",
        "description": "src.selkies.legacy.webrtc_signalling",
        "peekOfCode": "logger = logging.getLogger(\"signalling\")\n# websockets logs an error if a connection is opened and closed before any data is sent.\n# The client seems to do same thing, causing an inital handshake error.\nlogging.getLogger(\"websockets\").setLevel(logging.CRITICAL)\n\"\"\"Signalling API for Gstreamer WebRTC demo\nInterfaces with signalling server found at:\n  https://github.com/GStreamer/gstreamer/tree/main/subprojects/gst-examples/webrtc/signalling\n    Usage example:\n    from webrtc_signalling import WebRTCSignalling\n    signalling = WebRTCSignalling(server, id, peer_id)",
        "detail": "src.selkies.legacy.webrtc_signalling",
        "documentation": {}
    },
    {
        "label": "Decoder",
        "kind": 6,
        "importPath": "src.selkies.webrtc.codecs.base",
        "description": "src.selkies.webrtc.codecs.base",
        "peekOfCode": "class Decoder(metaclass=ABCMeta):\n    @abstractmethod\n    def decode(self, encoded_frame: JitterFrame) -> list[Frame]:\n        pass  # pragma: no cover\nclass Encoder(metaclass=ABCMeta):\n    @abstractmethod\n    def encode(\n        self, frame: Frame, force_keyframe: bool = False\n    ) -> tuple[list[bytes], int]:\n        pass  # pragma: no cover",
        "detail": "src.selkies.webrtc.codecs.base",
        "documentation": {}
    },
    {
        "label": "Encoder",
        "kind": 6,
        "importPath": "src.selkies.webrtc.codecs.base",
        "description": "src.selkies.webrtc.codecs.base",
        "peekOfCode": "class Encoder(metaclass=ABCMeta):\n    @abstractmethod\n    def encode(\n        self, frame: Frame, force_keyframe: bool = False\n    ) -> tuple[list[bytes], int]:\n        pass  # pragma: no cover\n    @abstractmethod\n    def pack(self, packet: Packet) -> tuple[list[bytes], int]:\n        pass  # pragma: no cover",
        "detail": "src.selkies.webrtc.codecs.base",
        "documentation": {}
    },
    {
        "label": "PcmDecoder",
        "kind": 6,
        "importPath": "src.selkies.webrtc.codecs.g711",
        "description": "src.selkies.webrtc.codecs.g711",
        "peekOfCode": "class PcmDecoder(Decoder):\n    def __init__(self, codec_name: Literal[\"pcm_alaw\", \"pcm_mulaw\"]) -> None:\n        self.codec = CodecContext.create(codec_name, \"r\")\n        self.codec.format = \"s16\"\n        self.codec.layout = \"mono\"\n        self.codec.sample_rate = SAMPLE_RATE\n    def decode(self, encoded_frame: JitterFrame) -> list[Frame]:\n        packet = Packet(encoded_frame.data)\n        packet.pts = encoded_frame.timestamp\n        packet.time_base = TIME_BASE",
        "detail": "src.selkies.webrtc.codecs.g711",
        "documentation": {}
    },
    {
        "label": "PcmEncoder",
        "kind": 6,
        "importPath": "src.selkies.webrtc.codecs.g711",
        "description": "src.selkies.webrtc.codecs.g711",
        "peekOfCode": "class PcmEncoder(Encoder):\n    def __init__(self, codec_name: Literal[\"pcm_alaw\", \"pcm_mulaw\"]) -> None:\n        self.codec = CodecContext.create(codec_name, \"w\")\n        self.codec.format = \"s16\"\n        self.codec.layout = \"mono\"\n        self.codec.sample_rate = SAMPLE_RATE\n        self.codec.time_base = TIME_BASE\n        # Create our own resampler to control the frame size.\n        self.resampler = AudioResampler(\n            format=\"s16\",",
        "detail": "src.selkies.webrtc.codecs.g711",
        "documentation": {}
    },
    {
        "label": "PcmaDecoder",
        "kind": 6,
        "importPath": "src.selkies.webrtc.codecs.g711",
        "description": "src.selkies.webrtc.codecs.g711",
        "peekOfCode": "class PcmaDecoder(PcmDecoder):\n    def __init__(self) -> None:\n        super().__init__(\"pcm_alaw\")\nclass PcmaEncoder(PcmEncoder):\n    def __init__(self) -> None:\n        super().__init__(\"pcm_alaw\")\nclass PcmuDecoder(PcmDecoder):\n    def __init__(self) -> None:\n        super().__init__(\"pcm_mulaw\")\nclass PcmuEncoder(PcmEncoder):",
        "detail": "src.selkies.webrtc.codecs.g711",
        "documentation": {}
    },
    {
        "label": "PcmaEncoder",
        "kind": 6,
        "importPath": "src.selkies.webrtc.codecs.g711",
        "description": "src.selkies.webrtc.codecs.g711",
        "peekOfCode": "class PcmaEncoder(PcmEncoder):\n    def __init__(self) -> None:\n        super().__init__(\"pcm_alaw\")\nclass PcmuDecoder(PcmDecoder):\n    def __init__(self) -> None:\n        super().__init__(\"pcm_mulaw\")\nclass PcmuEncoder(PcmEncoder):\n    def __init__(self) -> None:\n        super().__init__(\"pcm_mulaw\")",
        "detail": "src.selkies.webrtc.codecs.g711",
        "documentation": {}
    },
    {
        "label": "PcmuDecoder",
        "kind": 6,
        "importPath": "src.selkies.webrtc.codecs.g711",
        "description": "src.selkies.webrtc.codecs.g711",
        "peekOfCode": "class PcmuDecoder(PcmDecoder):\n    def __init__(self) -> None:\n        super().__init__(\"pcm_mulaw\")\nclass PcmuEncoder(PcmEncoder):\n    def __init__(self) -> None:\n        super().__init__(\"pcm_mulaw\")",
        "detail": "src.selkies.webrtc.codecs.g711",
        "documentation": {}
    },
    {
        "label": "PcmuEncoder",
        "kind": 6,
        "importPath": "src.selkies.webrtc.codecs.g711",
        "description": "src.selkies.webrtc.codecs.g711",
        "peekOfCode": "class PcmuEncoder(PcmEncoder):\n    def __init__(self) -> None:\n        super().__init__(\"pcm_mulaw\")",
        "detail": "src.selkies.webrtc.codecs.g711",
        "documentation": {}
    },
    {
        "label": "SAMPLE_RATE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.g711",
        "description": "src.selkies.webrtc.codecs.g711",
        "peekOfCode": "SAMPLE_RATE = 8000\nSAMPLE_WIDTH = 2\nSAMPLES_PER_FRAME = 160\nTIME_BASE = fractions.Fraction(1, 8000)\nclass PcmDecoder(Decoder):\n    def __init__(self, codec_name: Literal[\"pcm_alaw\", \"pcm_mulaw\"]) -> None:\n        self.codec = CodecContext.create(codec_name, \"r\")\n        self.codec.format = \"s16\"\n        self.codec.layout = \"mono\"\n        self.codec.sample_rate = SAMPLE_RATE",
        "detail": "src.selkies.webrtc.codecs.g711",
        "documentation": {}
    },
    {
        "label": "SAMPLE_WIDTH",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.g711",
        "description": "src.selkies.webrtc.codecs.g711",
        "peekOfCode": "SAMPLE_WIDTH = 2\nSAMPLES_PER_FRAME = 160\nTIME_BASE = fractions.Fraction(1, 8000)\nclass PcmDecoder(Decoder):\n    def __init__(self, codec_name: Literal[\"pcm_alaw\", \"pcm_mulaw\"]) -> None:\n        self.codec = CodecContext.create(codec_name, \"r\")\n        self.codec.format = \"s16\"\n        self.codec.layout = \"mono\"\n        self.codec.sample_rate = SAMPLE_RATE\n    def decode(self, encoded_frame: JitterFrame) -> list[Frame]:",
        "detail": "src.selkies.webrtc.codecs.g711",
        "documentation": {}
    },
    {
        "label": "SAMPLES_PER_FRAME",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.g711",
        "description": "src.selkies.webrtc.codecs.g711",
        "peekOfCode": "SAMPLES_PER_FRAME = 160\nTIME_BASE = fractions.Fraction(1, 8000)\nclass PcmDecoder(Decoder):\n    def __init__(self, codec_name: Literal[\"pcm_alaw\", \"pcm_mulaw\"]) -> None:\n        self.codec = CodecContext.create(codec_name, \"r\")\n        self.codec.format = \"s16\"\n        self.codec.layout = \"mono\"\n        self.codec.sample_rate = SAMPLE_RATE\n    def decode(self, encoded_frame: JitterFrame) -> list[Frame]:\n        packet = Packet(encoded_frame.data)",
        "detail": "src.selkies.webrtc.codecs.g711",
        "documentation": {}
    },
    {
        "label": "TIME_BASE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.g711",
        "description": "src.selkies.webrtc.codecs.g711",
        "peekOfCode": "TIME_BASE = fractions.Fraction(1, 8000)\nclass PcmDecoder(Decoder):\n    def __init__(self, codec_name: Literal[\"pcm_alaw\", \"pcm_mulaw\"]) -> None:\n        self.codec = CodecContext.create(codec_name, \"r\")\n        self.codec.format = \"s16\"\n        self.codec.layout = \"mono\"\n        self.codec.sample_rate = SAMPLE_RATE\n    def decode(self, encoded_frame: JitterFrame) -> list[Frame]:\n        packet = Packet(encoded_frame.data)\n        packet.pts = encoded_frame.timestamp",
        "detail": "src.selkies.webrtc.codecs.g711",
        "documentation": {}
    },
    {
        "label": "G722Decoder",
        "kind": 6,
        "importPath": "src.selkies.webrtc.codecs.g722",
        "description": "src.selkies.webrtc.codecs.g722",
        "peekOfCode": "class G722Decoder(Decoder):\n    def __init__(self) -> None:\n        self.codec = cast(AudioCodecContext, CodecContext.create(\"g722\", \"r\"))\n        self.codec.format = \"s16\"\n        self.codec.layout = \"mono\"\n        self.codec.sample_rate = SAMPLE_RATE\n    def decode(self, encoded_frame: JitterFrame) -> list[Frame]:\n        packet = Packet(encoded_frame.data)\n        packet.pts = encoded_frame.timestamp * 2\n        packet.time_base = TIME_BASE",
        "detail": "src.selkies.webrtc.codecs.g722",
        "documentation": {}
    },
    {
        "label": "G722Encoder",
        "kind": 6,
        "importPath": "src.selkies.webrtc.codecs.g722",
        "description": "src.selkies.webrtc.codecs.g722",
        "peekOfCode": "class G722Encoder(Encoder):\n    def __init__(self) -> None:\n        self.codec = cast(AudioCodecContext, CodecContext.create(\"g722\", \"w\"))\n        self.codec.format = \"s16\"\n        self.codec.layout = \"mono\"\n        self.codec.sample_rate = SAMPLE_RATE\n        self.codec.time_base = TIME_BASE\n        self.first_pts: Optional[int] = None\n        # Create our own resampler to control the frame size.\n        self.resampler = AudioResampler(",
        "detail": "src.selkies.webrtc.codecs.g722",
        "documentation": {}
    },
    {
        "label": "SAMPLE_RATE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.g722",
        "description": "src.selkies.webrtc.codecs.g722",
        "peekOfCode": "SAMPLE_RATE = 16000\nSAMPLE_WIDTH = 2\nSAMPLES_PER_FRAME = 320\nTIME_BASE = fractions.Fraction(1, 16000)\n# Even though the sample rate is 16kHz, the clockrate is defined as 8kHz.\n# This is why we have multiplications and divisions by 2 in the code.\nCLOCK_BASE = fractions.Fraction(1, 8000)\nclass G722Decoder(Decoder):\n    def __init__(self) -> None:\n        self.codec = cast(AudioCodecContext, CodecContext.create(\"g722\", \"r\"))",
        "detail": "src.selkies.webrtc.codecs.g722",
        "documentation": {}
    },
    {
        "label": "SAMPLE_WIDTH",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.g722",
        "description": "src.selkies.webrtc.codecs.g722",
        "peekOfCode": "SAMPLE_WIDTH = 2\nSAMPLES_PER_FRAME = 320\nTIME_BASE = fractions.Fraction(1, 16000)\n# Even though the sample rate is 16kHz, the clockrate is defined as 8kHz.\n# This is why we have multiplications and divisions by 2 in the code.\nCLOCK_BASE = fractions.Fraction(1, 8000)\nclass G722Decoder(Decoder):\n    def __init__(self) -> None:\n        self.codec = cast(AudioCodecContext, CodecContext.create(\"g722\", \"r\"))\n        self.codec.format = \"s16\"",
        "detail": "src.selkies.webrtc.codecs.g722",
        "documentation": {}
    },
    {
        "label": "SAMPLES_PER_FRAME",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.g722",
        "description": "src.selkies.webrtc.codecs.g722",
        "peekOfCode": "SAMPLES_PER_FRAME = 320\nTIME_BASE = fractions.Fraction(1, 16000)\n# Even though the sample rate is 16kHz, the clockrate is defined as 8kHz.\n# This is why we have multiplications and divisions by 2 in the code.\nCLOCK_BASE = fractions.Fraction(1, 8000)\nclass G722Decoder(Decoder):\n    def __init__(self) -> None:\n        self.codec = cast(AudioCodecContext, CodecContext.create(\"g722\", \"r\"))\n        self.codec.format = \"s16\"\n        self.codec.layout = \"mono\"",
        "detail": "src.selkies.webrtc.codecs.g722",
        "documentation": {}
    },
    {
        "label": "TIME_BASE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.g722",
        "description": "src.selkies.webrtc.codecs.g722",
        "peekOfCode": "TIME_BASE = fractions.Fraction(1, 16000)\n# Even though the sample rate is 16kHz, the clockrate is defined as 8kHz.\n# This is why we have multiplications and divisions by 2 in the code.\nCLOCK_BASE = fractions.Fraction(1, 8000)\nclass G722Decoder(Decoder):\n    def __init__(self) -> None:\n        self.codec = cast(AudioCodecContext, CodecContext.create(\"g722\", \"r\"))\n        self.codec.format = \"s16\"\n        self.codec.layout = \"mono\"\n        self.codec.sample_rate = SAMPLE_RATE",
        "detail": "src.selkies.webrtc.codecs.g722",
        "documentation": {}
    },
    {
        "label": "CLOCK_BASE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.g722",
        "description": "src.selkies.webrtc.codecs.g722",
        "peekOfCode": "CLOCK_BASE = fractions.Fraction(1, 8000)\nclass G722Decoder(Decoder):\n    def __init__(self) -> None:\n        self.codec = cast(AudioCodecContext, CodecContext.create(\"g722\", \"r\"))\n        self.codec.format = \"s16\"\n        self.codec.layout = \"mono\"\n        self.codec.sample_rate = SAMPLE_RATE\n    def decode(self, encoded_frame: JitterFrame) -> list[Frame]:\n        packet = Packet(encoded_frame.data)\n        packet.pts = encoded_frame.timestamp * 2",
        "detail": "src.selkies.webrtc.codecs.g722",
        "documentation": {}
    },
    {
        "label": "H264PayloadDescriptor",
        "kind": 6,
        "importPath": "src.selkies.webrtc.codecs.h264",
        "description": "src.selkies.webrtc.codecs.h264",
        "peekOfCode": "class H264PayloadDescriptor:\n    def __init__(self, first_fragment: bool) -> None:\n        self.first_fragment = first_fragment\n    def __repr__(self) -> str:\n        return f\"H264PayloadDescriptor(FF={self.first_fragment})\"\n    @classmethod\n    def parse(cls: Type[DESCRIPTOR_T], data: bytes) -> tuple[DESCRIPTOR_T, bytes]:\n        output = bytes()\n        # NAL unit header\n        if len(data) < 2:",
        "detail": "src.selkies.webrtc.codecs.h264",
        "documentation": {}
    },
    {
        "label": "H264Decoder",
        "kind": 6,
        "importPath": "src.selkies.webrtc.codecs.h264",
        "description": "src.selkies.webrtc.codecs.h264",
        "peekOfCode": "class H264Decoder(Decoder):\n    def __init__(self) -> None:\n        self.codec = av.CodecContext.create(\"h264\", \"r\")\n    def decode(self, encoded_frame: JitterFrame) -> list[Frame]:\n        try:\n            packet = av.Packet(encoded_frame.data)\n            packet.pts = encoded_frame.timestamp\n            packet.time_base = VIDEO_TIME_BASE\n            return cast(list[Frame], self.codec.decode(packet))\n        except av.FFmpegError as e:",
        "detail": "src.selkies.webrtc.codecs.h264",
        "documentation": {}
    },
    {
        "label": "H264Encoder",
        "kind": 6,
        "importPath": "src.selkies.webrtc.codecs.h264",
        "description": "src.selkies.webrtc.codecs.h264",
        "peekOfCode": "class H264Encoder(Encoder):\n    def __init__(self) -> None:\n        self.buffer_data = b\"\"\n        self.buffer_pts: Optional[int] = None\n        self.codec: Optional[VideoCodecContext] = None\n        self.__target_bitrate = DEFAULT_BITRATE\n    @staticmethod\n    def _packetize_fu_a(data: bytes) -> list[bytes]:\n        available_size = PACKET_MAX - FU_A_HEADER_SIZE\n        payload_size = len(data) - NAL_HEADER_SIZE",
        "detail": "src.selkies.webrtc.codecs.h264",
        "documentation": {}
    },
    {
        "label": "pairwise",
        "kind": 2,
        "importPath": "src.selkies.webrtc.codecs.h264",
        "description": "src.selkies.webrtc.codecs.h264",
        "peekOfCode": "def pairwise(iterable: Sequence[T]) -> Iterator[tuple[T, T]]:\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\nclass H264PayloadDescriptor:\n    def __init__(self, first_fragment: bool) -> None:\n        self.first_fragment = first_fragment\n    def __repr__(self) -> str:\n        return f\"H264PayloadDescriptor(FF={self.first_fragment})\"\n    @classmethod",
        "detail": "src.selkies.webrtc.codecs.h264",
        "documentation": {}
    },
    {
        "label": "h264_depayload",
        "kind": 2,
        "importPath": "src.selkies.webrtc.codecs.h264",
        "description": "src.selkies.webrtc.codecs.h264",
        "peekOfCode": "def h264_depayload(payload: bytes) -> bytes:\n    descriptor, data = H264PayloadDescriptor.parse(payload)\n    return data",
        "detail": "src.selkies.webrtc.codecs.h264",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.h264",
        "description": "src.selkies.webrtc.codecs.h264",
        "peekOfCode": "logger = logging.getLogger(__name__)\nDEFAULT_BITRATE = 1000000  # 1 Mbps\nMIN_BITRATE = 500000  # 500 kbps\nMAX_BITRATE = 3000000  # 3 Mbps\nMAX_FRAME_RATE = 30\nPACKET_MAX = 1300\nNAL_TYPE_FU_A = 28\nNAL_TYPE_STAP_A = 24\nNAL_HEADER_SIZE = 1\nFU_A_HEADER_SIZE = 2",
        "detail": "src.selkies.webrtc.codecs.h264",
        "documentation": {}
    },
    {
        "label": "DEFAULT_BITRATE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.h264",
        "description": "src.selkies.webrtc.codecs.h264",
        "peekOfCode": "DEFAULT_BITRATE = 1000000  # 1 Mbps\nMIN_BITRATE = 500000  # 500 kbps\nMAX_BITRATE = 3000000  # 3 Mbps\nMAX_FRAME_RATE = 30\nPACKET_MAX = 1300\nNAL_TYPE_FU_A = 28\nNAL_TYPE_STAP_A = 24\nNAL_HEADER_SIZE = 1\nFU_A_HEADER_SIZE = 2\nLENGTH_FIELD_SIZE = 2",
        "detail": "src.selkies.webrtc.codecs.h264",
        "documentation": {}
    },
    {
        "label": "MIN_BITRATE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.h264",
        "description": "src.selkies.webrtc.codecs.h264",
        "peekOfCode": "MIN_BITRATE = 500000  # 500 kbps\nMAX_BITRATE = 3000000  # 3 Mbps\nMAX_FRAME_RATE = 30\nPACKET_MAX = 1300\nNAL_TYPE_FU_A = 28\nNAL_TYPE_STAP_A = 24\nNAL_HEADER_SIZE = 1\nFU_A_HEADER_SIZE = 2\nLENGTH_FIELD_SIZE = 2\nSTAP_A_HEADER_SIZE = NAL_HEADER_SIZE + LENGTH_FIELD_SIZE",
        "detail": "src.selkies.webrtc.codecs.h264",
        "documentation": {}
    },
    {
        "label": "MAX_BITRATE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.h264",
        "description": "src.selkies.webrtc.codecs.h264",
        "peekOfCode": "MAX_BITRATE = 3000000  # 3 Mbps\nMAX_FRAME_RATE = 30\nPACKET_MAX = 1300\nNAL_TYPE_FU_A = 28\nNAL_TYPE_STAP_A = 24\nNAL_HEADER_SIZE = 1\nFU_A_HEADER_SIZE = 2\nLENGTH_FIELD_SIZE = 2\nSTAP_A_HEADER_SIZE = NAL_HEADER_SIZE + LENGTH_FIELD_SIZE\nDESCRIPTOR_T = TypeVar(\"DESCRIPTOR_T\", bound=\"H264PayloadDescriptor\")",
        "detail": "src.selkies.webrtc.codecs.h264",
        "documentation": {}
    },
    {
        "label": "MAX_FRAME_RATE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.h264",
        "description": "src.selkies.webrtc.codecs.h264",
        "peekOfCode": "MAX_FRAME_RATE = 30\nPACKET_MAX = 1300\nNAL_TYPE_FU_A = 28\nNAL_TYPE_STAP_A = 24\nNAL_HEADER_SIZE = 1\nFU_A_HEADER_SIZE = 2\nLENGTH_FIELD_SIZE = 2\nSTAP_A_HEADER_SIZE = NAL_HEADER_SIZE + LENGTH_FIELD_SIZE\nDESCRIPTOR_T = TypeVar(\"DESCRIPTOR_T\", bound=\"H264PayloadDescriptor\")\nT = TypeVar(\"T\")",
        "detail": "src.selkies.webrtc.codecs.h264",
        "documentation": {}
    },
    {
        "label": "PACKET_MAX",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.h264",
        "description": "src.selkies.webrtc.codecs.h264",
        "peekOfCode": "PACKET_MAX = 1300\nNAL_TYPE_FU_A = 28\nNAL_TYPE_STAP_A = 24\nNAL_HEADER_SIZE = 1\nFU_A_HEADER_SIZE = 2\nLENGTH_FIELD_SIZE = 2\nSTAP_A_HEADER_SIZE = NAL_HEADER_SIZE + LENGTH_FIELD_SIZE\nDESCRIPTOR_T = TypeVar(\"DESCRIPTOR_T\", bound=\"H264PayloadDescriptor\")\nT = TypeVar(\"T\")\ndef pairwise(iterable: Sequence[T]) -> Iterator[tuple[T, T]]:",
        "detail": "src.selkies.webrtc.codecs.h264",
        "documentation": {}
    },
    {
        "label": "NAL_TYPE_FU_A",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.h264",
        "description": "src.selkies.webrtc.codecs.h264",
        "peekOfCode": "NAL_TYPE_FU_A = 28\nNAL_TYPE_STAP_A = 24\nNAL_HEADER_SIZE = 1\nFU_A_HEADER_SIZE = 2\nLENGTH_FIELD_SIZE = 2\nSTAP_A_HEADER_SIZE = NAL_HEADER_SIZE + LENGTH_FIELD_SIZE\nDESCRIPTOR_T = TypeVar(\"DESCRIPTOR_T\", bound=\"H264PayloadDescriptor\")\nT = TypeVar(\"T\")\ndef pairwise(iterable: Sequence[T]) -> Iterator[tuple[T, T]]:\n    a, b = tee(iterable)",
        "detail": "src.selkies.webrtc.codecs.h264",
        "documentation": {}
    },
    {
        "label": "NAL_TYPE_STAP_A",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.h264",
        "description": "src.selkies.webrtc.codecs.h264",
        "peekOfCode": "NAL_TYPE_STAP_A = 24\nNAL_HEADER_SIZE = 1\nFU_A_HEADER_SIZE = 2\nLENGTH_FIELD_SIZE = 2\nSTAP_A_HEADER_SIZE = NAL_HEADER_SIZE + LENGTH_FIELD_SIZE\nDESCRIPTOR_T = TypeVar(\"DESCRIPTOR_T\", bound=\"H264PayloadDescriptor\")\nT = TypeVar(\"T\")\ndef pairwise(iterable: Sequence[T]) -> Iterator[tuple[T, T]]:\n    a, b = tee(iterable)\n    next(b, None)",
        "detail": "src.selkies.webrtc.codecs.h264",
        "documentation": {}
    },
    {
        "label": "NAL_HEADER_SIZE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.h264",
        "description": "src.selkies.webrtc.codecs.h264",
        "peekOfCode": "NAL_HEADER_SIZE = 1\nFU_A_HEADER_SIZE = 2\nLENGTH_FIELD_SIZE = 2\nSTAP_A_HEADER_SIZE = NAL_HEADER_SIZE + LENGTH_FIELD_SIZE\nDESCRIPTOR_T = TypeVar(\"DESCRIPTOR_T\", bound=\"H264PayloadDescriptor\")\nT = TypeVar(\"T\")\ndef pairwise(iterable: Sequence[T]) -> Iterator[tuple[T, T]]:\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)",
        "detail": "src.selkies.webrtc.codecs.h264",
        "documentation": {}
    },
    {
        "label": "FU_A_HEADER_SIZE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.h264",
        "description": "src.selkies.webrtc.codecs.h264",
        "peekOfCode": "FU_A_HEADER_SIZE = 2\nLENGTH_FIELD_SIZE = 2\nSTAP_A_HEADER_SIZE = NAL_HEADER_SIZE + LENGTH_FIELD_SIZE\nDESCRIPTOR_T = TypeVar(\"DESCRIPTOR_T\", bound=\"H264PayloadDescriptor\")\nT = TypeVar(\"T\")\ndef pairwise(iterable: Sequence[T]) -> Iterator[tuple[T, T]]:\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\nclass H264PayloadDescriptor:",
        "detail": "src.selkies.webrtc.codecs.h264",
        "documentation": {}
    },
    {
        "label": "LENGTH_FIELD_SIZE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.h264",
        "description": "src.selkies.webrtc.codecs.h264",
        "peekOfCode": "LENGTH_FIELD_SIZE = 2\nSTAP_A_HEADER_SIZE = NAL_HEADER_SIZE + LENGTH_FIELD_SIZE\nDESCRIPTOR_T = TypeVar(\"DESCRIPTOR_T\", bound=\"H264PayloadDescriptor\")\nT = TypeVar(\"T\")\ndef pairwise(iterable: Sequence[T]) -> Iterator[tuple[T, T]]:\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\nclass H264PayloadDescriptor:\n    def __init__(self, first_fragment: bool) -> None:",
        "detail": "src.selkies.webrtc.codecs.h264",
        "documentation": {}
    },
    {
        "label": "STAP_A_HEADER_SIZE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.h264",
        "description": "src.selkies.webrtc.codecs.h264",
        "peekOfCode": "STAP_A_HEADER_SIZE = NAL_HEADER_SIZE + LENGTH_FIELD_SIZE\nDESCRIPTOR_T = TypeVar(\"DESCRIPTOR_T\", bound=\"H264PayloadDescriptor\")\nT = TypeVar(\"T\")\ndef pairwise(iterable: Sequence[T]) -> Iterator[tuple[T, T]]:\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\nclass H264PayloadDescriptor:\n    def __init__(self, first_fragment: bool) -> None:\n        self.first_fragment = first_fragment",
        "detail": "src.selkies.webrtc.codecs.h264",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR_T",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.h264",
        "description": "src.selkies.webrtc.codecs.h264",
        "peekOfCode": "DESCRIPTOR_T = TypeVar(\"DESCRIPTOR_T\", bound=\"H264PayloadDescriptor\")\nT = TypeVar(\"T\")\ndef pairwise(iterable: Sequence[T]) -> Iterator[tuple[T, T]]:\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\nclass H264PayloadDescriptor:\n    def __init__(self, first_fragment: bool) -> None:\n        self.first_fragment = first_fragment\n    def __repr__(self) -> str:",
        "detail": "src.selkies.webrtc.codecs.h264",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.h264",
        "description": "src.selkies.webrtc.codecs.h264",
        "peekOfCode": "T = TypeVar(\"T\")\ndef pairwise(iterable: Sequence[T]) -> Iterator[tuple[T, T]]:\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\nclass H264PayloadDescriptor:\n    def __init__(self, first_fragment: bool) -> None:\n        self.first_fragment = first_fragment\n    def __repr__(self) -> str:\n        return f\"H264PayloadDescriptor(FF={self.first_fragment})\"",
        "detail": "src.selkies.webrtc.codecs.h264",
        "documentation": {}
    },
    {
        "label": "OpusDecoder",
        "kind": 6,
        "importPath": "src.selkies.webrtc.codecs.opus",
        "description": "src.selkies.webrtc.codecs.opus",
        "peekOfCode": "class OpusDecoder(Decoder):\n    def __init__(self) -> None:\n        self.codec = CodecContext.create(\"libopus\", \"r\")\n        self.codec.format = \"s16\"\n        self.codec.layout = \"stereo\"\n        self.codec.sample_rate = SAMPLE_RATE\n    def decode(self, encoded_frame: JitterFrame) -> list[Frame]:\n        packet = Packet(encoded_frame.data)\n        packet.pts = encoded_frame.timestamp\n        packet.time_base = TIME_BASE",
        "detail": "src.selkies.webrtc.codecs.opus",
        "documentation": {}
    },
    {
        "label": "OpusEncoder",
        "kind": 6,
        "importPath": "src.selkies.webrtc.codecs.opus",
        "description": "src.selkies.webrtc.codecs.opus",
        "peekOfCode": "class OpusEncoder(Encoder):\n    def __init__(self) -> None:\n        self.codec = CodecContext.create(\"libopus\", \"w\")\n        self.codec.bit_rate = 96000\n        self.codec.format = \"s16\"\n        self.codec.layout = \"stereo\"\n        self.codec.options = {\"application\": \"voip\"}\n        self.codec.sample_rate = SAMPLE_RATE\n        self.codec.time_base = TIME_BASE\n        # Create our own resampler to control the frame size.",
        "detail": "src.selkies.webrtc.codecs.opus",
        "documentation": {}
    },
    {
        "label": "SAMPLE_RATE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.opus",
        "description": "src.selkies.webrtc.codecs.opus",
        "peekOfCode": "SAMPLE_RATE = 48000\nSAMPLES_PER_FRAME = 960\nTIME_BASE = fractions.Fraction(1, SAMPLE_RATE)\nclass OpusDecoder(Decoder):\n    def __init__(self) -> None:\n        self.codec = CodecContext.create(\"libopus\", \"r\")\n        self.codec.format = \"s16\"\n        self.codec.layout = \"stereo\"\n        self.codec.sample_rate = SAMPLE_RATE\n    def decode(self, encoded_frame: JitterFrame) -> list[Frame]:",
        "detail": "src.selkies.webrtc.codecs.opus",
        "documentation": {}
    },
    {
        "label": "SAMPLES_PER_FRAME",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.opus",
        "description": "src.selkies.webrtc.codecs.opus",
        "peekOfCode": "SAMPLES_PER_FRAME = 960\nTIME_BASE = fractions.Fraction(1, SAMPLE_RATE)\nclass OpusDecoder(Decoder):\n    def __init__(self) -> None:\n        self.codec = CodecContext.create(\"libopus\", \"r\")\n        self.codec.format = \"s16\"\n        self.codec.layout = \"stereo\"\n        self.codec.sample_rate = SAMPLE_RATE\n    def decode(self, encoded_frame: JitterFrame) -> list[Frame]:\n        packet = Packet(encoded_frame.data)",
        "detail": "src.selkies.webrtc.codecs.opus",
        "documentation": {}
    },
    {
        "label": "TIME_BASE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.opus",
        "description": "src.selkies.webrtc.codecs.opus",
        "peekOfCode": "TIME_BASE = fractions.Fraction(1, SAMPLE_RATE)\nclass OpusDecoder(Decoder):\n    def __init__(self) -> None:\n        self.codec = CodecContext.create(\"libopus\", \"r\")\n        self.codec.format = \"s16\"\n        self.codec.layout = \"stereo\"\n        self.codec.sample_rate = SAMPLE_RATE\n    def decode(self, encoded_frame: JitterFrame) -> list[Frame]:\n        packet = Packet(encoded_frame.data)\n        packet.pts = encoded_frame.timestamp",
        "detail": "src.selkies.webrtc.codecs.opus",
        "documentation": {}
    },
    {
        "label": "VpxPayloadDescriptor",
        "kind": 6,
        "importPath": "src.selkies.webrtc.codecs.vpx",
        "description": "src.selkies.webrtc.codecs.vpx",
        "peekOfCode": "class VpxPayloadDescriptor:\n    def __init__(\n        self,\n        partition_start: int,\n        partition_id: int,\n        picture_id: Optional[int] = None,\n        tl0picidx: Optional[int] = None,\n        tid: Optional[tuple[int, int]] = None,\n        keyidx: Optional[int] = None,\n    ) -> None:",
        "detail": "src.selkies.webrtc.codecs.vpx",
        "documentation": {}
    },
    {
        "label": "Vp8Decoder",
        "kind": 6,
        "importPath": "src.selkies.webrtc.codecs.vpx",
        "description": "src.selkies.webrtc.codecs.vpx",
        "peekOfCode": "class Vp8Decoder(Decoder):\n    def __init__(self) -> None:\n        self.codec = CodecContext.create(\"libvpx\", \"r\")\n    def decode(self, encoded_frame: JitterFrame) -> list[Frame]:\n        try:\n            packet = Packet(encoded_frame.data)\n            packet.pts = encoded_frame.timestamp\n            packet.time_base = VIDEO_TIME_BASE\n            return cast(list[Frame], self.codec.decode(packet))\n        except av.FFmpegError as e:",
        "detail": "src.selkies.webrtc.codecs.vpx",
        "documentation": {}
    },
    {
        "label": "Vp8Encoder",
        "kind": 6,
        "importPath": "src.selkies.webrtc.codecs.vpx",
        "description": "src.selkies.webrtc.codecs.vpx",
        "peekOfCode": "class Vp8Encoder(Encoder):\n    def __init__(self) -> None:\n        self.codec: Optional[VideoCodecContext] = None\n        self.picture_id = random.randint(0, (1 << 15) - 1)\n        self.__target_bitrate = DEFAULT_BITRATE\n    def encode(\n        self, frame: Frame, force_keyframe: bool = False\n    ) -> tuple[list[bytes], int]:\n        assert isinstance(frame, VideoFrame)\n        if frame.format.name != \"yuv420p\":",
        "detail": "src.selkies.webrtc.codecs.vpx",
        "documentation": {}
    },
    {
        "label": "number_of_threads",
        "kind": 2,
        "importPath": "src.selkies.webrtc.codecs.vpx",
        "description": "src.selkies.webrtc.codecs.vpx",
        "peekOfCode": "def number_of_threads(pixels: int, cpus: int) -> int:\n    if pixels >= 1920 * 1080 and cpus > 8:\n        return 8\n    elif pixels > 1280 * 960 and cpus >= 6:\n        return 3\n    elif pixels > 640 * 480 and cpus >= 3:\n        return 2\n    else:\n        return 1\nclass VpxPayloadDescriptor:",
        "detail": "src.selkies.webrtc.codecs.vpx",
        "documentation": {}
    },
    {
        "label": "vp8_depayload",
        "kind": 2,
        "importPath": "src.selkies.webrtc.codecs.vpx",
        "description": "src.selkies.webrtc.codecs.vpx",
        "peekOfCode": "def vp8_depayload(payload: bytes) -> bytes:\n    descriptor, data = VpxPayloadDescriptor.parse(payload)\n    return data",
        "detail": "src.selkies.webrtc.codecs.vpx",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.vpx",
        "description": "src.selkies.webrtc.codecs.vpx",
        "peekOfCode": "logger = logging.getLogger(__name__)\nDEFAULT_BITRATE = 500000  # 500 kbps\nMIN_BITRATE = 250000  # 250 kbps\nMAX_BITRATE = 1500000  # 1.5 Mbps\nMAX_FRAME_RATE = 30\nPACKET_MAX = 1300\nDESCRIPTOR_T = TypeVar(\"DESCRIPTOR_T\", bound=\"VpxPayloadDescriptor\")\ndef number_of_threads(pixels: int, cpus: int) -> int:\n    if pixels >= 1920 * 1080 and cpus > 8:\n        return 8",
        "detail": "src.selkies.webrtc.codecs.vpx",
        "documentation": {}
    },
    {
        "label": "DEFAULT_BITRATE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.vpx",
        "description": "src.selkies.webrtc.codecs.vpx",
        "peekOfCode": "DEFAULT_BITRATE = 500000  # 500 kbps\nMIN_BITRATE = 250000  # 250 kbps\nMAX_BITRATE = 1500000  # 1.5 Mbps\nMAX_FRAME_RATE = 30\nPACKET_MAX = 1300\nDESCRIPTOR_T = TypeVar(\"DESCRIPTOR_T\", bound=\"VpxPayloadDescriptor\")\ndef number_of_threads(pixels: int, cpus: int) -> int:\n    if pixels >= 1920 * 1080 and cpus > 8:\n        return 8\n    elif pixels > 1280 * 960 and cpus >= 6:",
        "detail": "src.selkies.webrtc.codecs.vpx",
        "documentation": {}
    },
    {
        "label": "MIN_BITRATE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.vpx",
        "description": "src.selkies.webrtc.codecs.vpx",
        "peekOfCode": "MIN_BITRATE = 250000  # 250 kbps\nMAX_BITRATE = 1500000  # 1.5 Mbps\nMAX_FRAME_RATE = 30\nPACKET_MAX = 1300\nDESCRIPTOR_T = TypeVar(\"DESCRIPTOR_T\", bound=\"VpxPayloadDescriptor\")\ndef number_of_threads(pixels: int, cpus: int) -> int:\n    if pixels >= 1920 * 1080 and cpus > 8:\n        return 8\n    elif pixels > 1280 * 960 and cpus >= 6:\n        return 3",
        "detail": "src.selkies.webrtc.codecs.vpx",
        "documentation": {}
    },
    {
        "label": "MAX_BITRATE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.vpx",
        "description": "src.selkies.webrtc.codecs.vpx",
        "peekOfCode": "MAX_BITRATE = 1500000  # 1.5 Mbps\nMAX_FRAME_RATE = 30\nPACKET_MAX = 1300\nDESCRIPTOR_T = TypeVar(\"DESCRIPTOR_T\", bound=\"VpxPayloadDescriptor\")\ndef number_of_threads(pixels: int, cpus: int) -> int:\n    if pixels >= 1920 * 1080 and cpus > 8:\n        return 8\n    elif pixels > 1280 * 960 and cpus >= 6:\n        return 3\n    elif pixels > 640 * 480 and cpus >= 3:",
        "detail": "src.selkies.webrtc.codecs.vpx",
        "documentation": {}
    },
    {
        "label": "MAX_FRAME_RATE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.vpx",
        "description": "src.selkies.webrtc.codecs.vpx",
        "peekOfCode": "MAX_FRAME_RATE = 30\nPACKET_MAX = 1300\nDESCRIPTOR_T = TypeVar(\"DESCRIPTOR_T\", bound=\"VpxPayloadDescriptor\")\ndef number_of_threads(pixels: int, cpus: int) -> int:\n    if pixels >= 1920 * 1080 and cpus > 8:\n        return 8\n    elif pixels > 1280 * 960 and cpus >= 6:\n        return 3\n    elif pixels > 640 * 480 and cpus >= 3:\n        return 2",
        "detail": "src.selkies.webrtc.codecs.vpx",
        "documentation": {}
    },
    {
        "label": "PACKET_MAX",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.vpx",
        "description": "src.selkies.webrtc.codecs.vpx",
        "peekOfCode": "PACKET_MAX = 1300\nDESCRIPTOR_T = TypeVar(\"DESCRIPTOR_T\", bound=\"VpxPayloadDescriptor\")\ndef number_of_threads(pixels: int, cpus: int) -> int:\n    if pixels >= 1920 * 1080 and cpus > 8:\n        return 8\n    elif pixels > 1280 * 960 and cpus >= 6:\n        return 3\n    elif pixels > 640 * 480 and cpus >= 3:\n        return 2\n    else:",
        "detail": "src.selkies.webrtc.codecs.vpx",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR_T",
        "kind": 5,
        "importPath": "src.selkies.webrtc.codecs.vpx",
        "description": "src.selkies.webrtc.codecs.vpx",
        "peekOfCode": "DESCRIPTOR_T = TypeVar(\"DESCRIPTOR_T\", bound=\"VpxPayloadDescriptor\")\ndef number_of_threads(pixels: int, cpus: int) -> int:\n    if pixels >= 1920 * 1080 and cpus > 8:\n        return 8\n    elif pixels > 1280 * 960 and cpus >= 6:\n        return 3\n    elif pixels > 640 * 480 and cpus >= 3:\n        return 2\n    else:\n        return 1",
        "detail": "src.selkies.webrtc.codecs.vpx",
        "documentation": {}
    },
    {
        "label": "MediaBlackhole",
        "kind": 6,
        "importPath": "src.selkies.webrtc.contrib.media",
        "description": "src.selkies.webrtc.contrib.media",
        "peekOfCode": "class MediaBlackhole:\n    \"\"\"\n    A media sink that consumes and discards all media.\n    \"\"\"\n    def __init__(self) -> None:\n        self.__tracks: dict[MediaStreamTrack, Optional[asyncio.Future]] = {}\n    def addTrack(self, track: MediaStreamTrack) -> None:\n        \"\"\"\n        Add a track whose media should be discarded.\n        :param track: A :class:`aiortc.MediaStreamTrack`.",
        "detail": "src.selkies.webrtc.contrib.media",
        "documentation": {}
    },
    {
        "label": "PlayerStreamTrack",
        "kind": 6,
        "importPath": "src.selkies.webrtc.contrib.media",
        "description": "src.selkies.webrtc.contrib.media",
        "peekOfCode": "class PlayerStreamTrack(MediaStreamTrack):\n    def __init__(self, player: \"MediaPlayer\", kind: str) -> None:\n        super().__init__()\n        self.kind = kind\n        self._player: Optional[MediaPlayer] = player\n        self._queue: asyncio.Queue[Union[Frame, Packet]] = asyncio.Queue()\n        self._start: Optional[float] = None\n    async def recv(self) -> Union[Frame, Packet]:\n        if self.readyState != \"live\":\n            raise MediaStreamError",
        "detail": "src.selkies.webrtc.contrib.media",
        "documentation": {}
    },
    {
        "label": "MediaPlayer",
        "kind": 6,
        "importPath": "src.selkies.webrtc.contrib.media",
        "description": "src.selkies.webrtc.contrib.media",
        "peekOfCode": "class MediaPlayer:\n    \"\"\"\n    A media source that reads audio and/or video from a file.\n    Examples:\n    .. code-block:: python\n        # Open a video file.\n        player = MediaPlayer('/path/to/some.mp4')\n        # Open an HTTP stream.\n        player = MediaPlayer(\n            'http://download.tsi.telecom-paristech.fr/'",
        "detail": "src.selkies.webrtc.contrib.media",
        "documentation": {}
    },
    {
        "label": "MediaRecorderContext",
        "kind": 6,
        "importPath": "src.selkies.webrtc.contrib.media",
        "description": "src.selkies.webrtc.contrib.media",
        "peekOfCode": "class MediaRecorderContext:\n    def __init__(self, stream: _AudioOrVideoStream) -> None:\n        self.started = False\n        self.stream = stream\n        self.task: Optional[asyncio.Task[None]] = None\nclass MediaRecorder:\n    \"\"\"\n    A media sink that writes audio and/or video to a file.\n    Examples:\n    .. code-block:: python",
        "detail": "src.selkies.webrtc.contrib.media",
        "documentation": {}
    },
    {
        "label": "MediaRecorder",
        "kind": 6,
        "importPath": "src.selkies.webrtc.contrib.media",
        "description": "src.selkies.webrtc.contrib.media",
        "peekOfCode": "class MediaRecorder:\n    \"\"\"\n    A media sink that writes audio and/or video to a file.\n    Examples:\n    .. code-block:: python\n        # Write to a video file.\n        player = MediaRecorder('/path/to/file.mp4')\n        # Write to a set of images.\n        player = MediaRecorder('/path/to/file-%3d.png')\n    :param file: The path to a file, or a file-like object.",
        "detail": "src.selkies.webrtc.contrib.media",
        "documentation": {}
    },
    {
        "label": "RelayStreamTrack",
        "kind": 6,
        "importPath": "src.selkies.webrtc.contrib.media",
        "description": "src.selkies.webrtc.contrib.media",
        "peekOfCode": "class RelayStreamTrack(MediaStreamTrack):\n    def __init__(\n        self,\n        relay: \"MediaRelay\",\n        source: MediaStreamTrack,\n        buffered: bool,\n    ) -> None:\n        super().__init__()\n        self.kind = source.kind\n        self._relay = relay",
        "detail": "src.selkies.webrtc.contrib.media",
        "documentation": {}
    },
    {
        "label": "MediaRelay",
        "kind": 6,
        "importPath": "src.selkies.webrtc.contrib.media",
        "description": "src.selkies.webrtc.contrib.media",
        "peekOfCode": "class MediaRelay:\n    \"\"\"\n    A media source that relays one or more tracks to multiple consumers.\n    This is especially useful for live tracks such as webcams or media received\n    over the network.\n    \"\"\"\n    def __init__(self) -> None:\n        self.__proxies: dict[MediaStreamTrack, set[RelayStreamTrack]] = {}\n        self.__tasks: dict[MediaStreamTrack, asyncio.Future[None]] = {}\n    def subscribe(",
        "detail": "src.selkies.webrtc.contrib.media",
        "documentation": {}
    },
    {
        "label": "player_worker_decode",
        "kind": 2,
        "importPath": "src.selkies.webrtc.contrib.media",
        "description": "src.selkies.webrtc.contrib.media",
        "peekOfCode": "def player_worker_decode(\n    loop: asyncio.AbstractEventLoop,\n    container: av.container.InputContainer,\n    streams: list[_AudioOrVideoStream],\n    audio_track: \"PlayerStreamTrack\",\n    video_track: \"PlayerStreamTrack\",\n    quit_event: threading.Event,\n    throttle_playback: bool,\n    loop_playback: bool,\n) -> None:",
        "detail": "src.selkies.webrtc.contrib.media",
        "documentation": {}
    },
    {
        "label": "player_worker_demux",
        "kind": 2,
        "importPath": "src.selkies.webrtc.contrib.media",
        "description": "src.selkies.webrtc.contrib.media",
        "peekOfCode": "def player_worker_demux(\n    loop: asyncio.AbstractEventLoop,\n    container: av.container.InputContainer,\n    streams: list[_AudioOrVideoStream],\n    audio_track: \"PlayerStreamTrack\",\n    video_track: \"PlayerStreamTrack\",\n    quit_event: threading.Event,\n    throttle_playback: bool,\n    loop_playback: bool,\n) -> None:",
        "detail": "src.selkies.webrtc.contrib.media",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.webrtc.contrib.media",
        "description": "src.selkies.webrtc.contrib.media",
        "peekOfCode": "logger = logging.getLogger(__name__)\nREAL_TIME_FORMATS = [\n    \"alsa\",\n    \"android_camera\",\n    \"avfoundation\",\n    \"bktr\",\n    \"decklink\",\n    \"dshow\",\n    \"fbdev\",\n    \"gdigrab\",",
        "detail": "src.selkies.webrtc.contrib.media",
        "documentation": {}
    },
    {
        "label": "REAL_TIME_FORMATS",
        "kind": 5,
        "importPath": "src.selkies.webrtc.contrib.media",
        "description": "src.selkies.webrtc.contrib.media",
        "peekOfCode": "REAL_TIME_FORMATS = [\n    \"alsa\",\n    \"android_camera\",\n    \"avfoundation\",\n    \"bktr\",\n    \"decklink\",\n    \"dshow\",\n    \"fbdev\",\n    \"gdigrab\",\n    \"iec61883\",",
        "detail": "src.selkies.webrtc.contrib.media",
        "documentation": {}
    },
    {
        "label": "_AudioOrVideoStream",
        "kind": 5,
        "importPath": "src.selkies.webrtc.contrib.media",
        "description": "src.selkies.webrtc.contrib.media",
        "peekOfCode": "_AudioOrVideoStream = Union[AudioStream, VideoStream]\nasync def blackhole_consume(track: MediaStreamTrack) -> None:\n    while True:\n        try:\n            await track.recv()\n        except MediaStreamError:\n            return\nclass MediaBlackhole:\n    \"\"\"\n    A media sink that consumes and discards all media.",
        "detail": "src.selkies.webrtc.contrib.media",
        "documentation": {}
    },
    {
        "label": "SignalingBye",
        "kind": 6,
        "importPath": "src.selkies.webrtc.contrib.signaling",
        "description": "src.selkies.webrtc.contrib.signaling",
        "peekOfCode": "class SignalingBye:\n    pass\nBYE = SignalingBye()\n_SignalingObject = Union[RTCSessionDescription, RTCIceCandidate, SignalingBye]\ndef object_from_string(message_str: str) -> _SignalingObject:\n    message = json.loads(message_str)\n    if message[\"type\"] in [\"answer\", \"offer\"]:\n        return RTCSessionDescription(**message)\n    elif message[\"type\"] == \"candidate\" and message[\"candidate\"]:\n        candidate = candidate_from_sdp(message[\"candidate\"].split(\":\", 1)[1])",
        "detail": "src.selkies.webrtc.contrib.signaling",
        "documentation": {}
    },
    {
        "label": "BaseSignaling",
        "kind": 6,
        "importPath": "src.selkies.webrtc.contrib.signaling",
        "description": "src.selkies.webrtc.contrib.signaling",
        "peekOfCode": "class BaseSignaling(ABC):\n    @abstractmethod\n    async def connect(self) -> None: ...\n    @abstractmethod\n    async def close(self) -> None: ...\n    @abstractmethod\n    async def send(self, descr: _SignalingObject) -> None: ...\n    @abstractmethod\n    async def receive(self) -> Optional[_SignalingObject]: ...\nclass CopyAndPasteSignaling(BaseSignaling):",
        "detail": "src.selkies.webrtc.contrib.signaling",
        "documentation": {}
    },
    {
        "label": "CopyAndPasteSignaling",
        "kind": 6,
        "importPath": "src.selkies.webrtc.contrib.signaling",
        "description": "src.selkies.webrtc.contrib.signaling",
        "peekOfCode": "class CopyAndPasteSignaling(BaseSignaling):\n    def __init__(self) -> None:\n        self._read_pipe = sys.stdin\n        self._read_transport: Optional[asyncio.ReadTransport] = None\n        self._reader: Optional[asyncio.StreamReader] = None\n        self._write_pipe = sys.stdout\n    async def connect(self) -> None:\n        loop = asyncio.get_event_loop()\n        self._reader = asyncio.StreamReader(loop=loop)\n        self._read_transport, _ = await loop.connect_read_pipe(",
        "detail": "src.selkies.webrtc.contrib.signaling",
        "documentation": {}
    },
    {
        "label": "TcpSocketSignaling",
        "kind": 6,
        "importPath": "src.selkies.webrtc.contrib.signaling",
        "description": "src.selkies.webrtc.contrib.signaling",
        "peekOfCode": "class TcpSocketSignaling(BaseSignaling):\n    def __init__(self, host: str, port: int) -> None:\n        self._host = host\n        self._port = port\n        self._server: Optional[asyncio.Server] = None\n        self._reader: Optional[asyncio.StreamReader] = None\n        self._writer: Optional[asyncio.StreamWriter] = None\n    async def connect(self) -> None:\n        pass\n    async def _connect(self, server: bool) -> None:",
        "detail": "src.selkies.webrtc.contrib.signaling",
        "documentation": {}
    },
    {
        "label": "UnixSocketSignaling",
        "kind": 6,
        "importPath": "src.selkies.webrtc.contrib.signaling",
        "description": "src.selkies.webrtc.contrib.signaling",
        "peekOfCode": "class UnixSocketSignaling(BaseSignaling):\n    def __init__(self, path: str) -> None:\n        self._path = path\n        self._server: Optional[asyncio.Server] = None\n        self._reader: Optional[asyncio.StreamReader] = None\n        self._writer: Optional[asyncio.StreamWriter] = None\n    async def connect(self) -> None:\n        pass\n    async def _connect(self, server: bool) -> None:\n        if self._writer is not None:",
        "detail": "src.selkies.webrtc.contrib.signaling",
        "documentation": {}
    },
    {
        "label": "object_from_string",
        "kind": 2,
        "importPath": "src.selkies.webrtc.contrib.signaling",
        "description": "src.selkies.webrtc.contrib.signaling",
        "peekOfCode": "def object_from_string(message_str: str) -> _SignalingObject:\n    message = json.loads(message_str)\n    if message[\"type\"] in [\"answer\", \"offer\"]:\n        return RTCSessionDescription(**message)\n    elif message[\"type\"] == \"candidate\" and message[\"candidate\"]:\n        candidate = candidate_from_sdp(message[\"candidate\"].split(\":\", 1)[1])\n        candidate.sdpMid = message[\"id\"]\n        candidate.sdpMLineIndex = message[\"label\"]\n        return candidate\n    else:",
        "detail": "src.selkies.webrtc.contrib.signaling",
        "documentation": {}
    },
    {
        "label": "object_to_string",
        "kind": 2,
        "importPath": "src.selkies.webrtc.contrib.signaling",
        "description": "src.selkies.webrtc.contrib.signaling",
        "peekOfCode": "def object_to_string(obj: _SignalingObject) -> str:\n    message: dict[str, Union[int, str]]\n    if isinstance(obj, RTCSessionDescription):\n        message = {\"sdp\": obj.sdp, \"type\": obj.type}\n    elif isinstance(obj, RTCIceCandidate):\n        message = {\n            \"candidate\": \"candidate:\" + candidate_to_sdp(obj),\n            \"id\": obj.sdpMid,\n            \"label\": obj.sdpMLineIndex,\n            \"type\": \"candidate\",",
        "detail": "src.selkies.webrtc.contrib.signaling",
        "documentation": {}
    },
    {
        "label": "add_signaling_arguments",
        "kind": 2,
        "importPath": "src.selkies.webrtc.contrib.signaling",
        "description": "src.selkies.webrtc.contrib.signaling",
        "peekOfCode": "def add_signaling_arguments(parser: argparse.ArgumentParser) -> None:\n    \"\"\"\n    Add signaling method arguments to an argparse.ArgumentParser.\n    \"\"\"\n    parser.add_argument(\n        \"--signaling\",\n        \"-s\",\n        choices=[\"copy-and-paste\", \"tcp-socket\", \"unix-socket\"],\n    )\n    parser.add_argument(",
        "detail": "src.selkies.webrtc.contrib.signaling",
        "documentation": {}
    },
    {
        "label": "create_signaling",
        "kind": 2,
        "importPath": "src.selkies.webrtc.contrib.signaling",
        "description": "src.selkies.webrtc.contrib.signaling",
        "peekOfCode": "def create_signaling(args: argparse.Namespace) -> BaseSignaling:\n    \"\"\"\n    Create a signaling method based on command-line arguments.\n    \"\"\"\n    if args.signaling == \"tcp-socket\":\n        return TcpSocketSignaling(args.signaling_host, args.signaling_port)\n    elif args.signaling == \"unix-socket\":\n        return UnixSocketSignaling(args.signaling_path)\n    else:\n        return CopyAndPasteSignaling()",
        "detail": "src.selkies.webrtc.contrib.signaling",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.webrtc.contrib.signaling",
        "description": "src.selkies.webrtc.contrib.signaling",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass SignalingBye:\n    pass\nBYE = SignalingBye()\n_SignalingObject = Union[RTCSessionDescription, RTCIceCandidate, SignalingBye]\ndef object_from_string(message_str: str) -> _SignalingObject:\n    message = json.loads(message_str)\n    if message[\"type\"] in [\"answer\", \"offer\"]:\n        return RTCSessionDescription(**message)\n    elif message[\"type\"] == \"candidate\" and message[\"candidate\"]:",
        "detail": "src.selkies.webrtc.contrib.signaling",
        "documentation": {}
    },
    {
        "label": "BYE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.contrib.signaling",
        "description": "src.selkies.webrtc.contrib.signaling",
        "peekOfCode": "BYE = SignalingBye()\n_SignalingObject = Union[RTCSessionDescription, RTCIceCandidate, SignalingBye]\ndef object_from_string(message_str: str) -> _SignalingObject:\n    message = json.loads(message_str)\n    if message[\"type\"] in [\"answer\", \"offer\"]:\n        return RTCSessionDescription(**message)\n    elif message[\"type\"] == \"candidate\" and message[\"candidate\"]:\n        candidate = candidate_from_sdp(message[\"candidate\"].split(\":\", 1)[1])\n        candidate.sdpMid = message[\"id\"]\n        candidate.sdpMLineIndex = message[\"label\"]",
        "detail": "src.selkies.webrtc.contrib.signaling",
        "documentation": {}
    },
    {
        "label": "_SignalingObject",
        "kind": 5,
        "importPath": "src.selkies.webrtc.contrib.signaling",
        "description": "src.selkies.webrtc.contrib.signaling",
        "peekOfCode": "_SignalingObject = Union[RTCSessionDescription, RTCIceCandidate, SignalingBye]\ndef object_from_string(message_str: str) -> _SignalingObject:\n    message = json.loads(message_str)\n    if message[\"type\"] in [\"answer\", \"offer\"]:\n        return RTCSessionDescription(**message)\n    elif message[\"type\"] == \"candidate\" and message[\"candidate\"]:\n        candidate = candidate_from_sdp(message[\"candidate\"].split(\":\", 1)[1])\n        candidate.sdpMid = message[\"id\"]\n        candidate.sdpMLineIndex = message[\"label\"]\n        return candidate",
        "detail": "src.selkies.webrtc.contrib.signaling",
        "documentation": {}
    },
    {
        "label": "current_datetime",
        "kind": 2,
        "importPath": "src.selkies.webrtc.clock",
        "description": "src.selkies.webrtc.clock",
        "peekOfCode": "def current_datetime() -> datetime.datetime:\n    return datetime.datetime.now(datetime.timezone.utc)\ndef current_ms() -> int:\n    delta = current_datetime() - NTP_EPOCH\n    return int(delta.total_seconds() * 1000)\ndef current_ntp_time() -> int:\n    return datetime_to_ntp(current_datetime())\ndef datetime_from_ntp(ntp: int) -> datetime.datetime:\n    seconds = ntp >> 32\n    microseconds = ((ntp & 0xFFFFFFFF) * 1000000) / (1 << 32)",
        "detail": "src.selkies.webrtc.clock",
        "documentation": {}
    },
    {
        "label": "current_ms",
        "kind": 2,
        "importPath": "src.selkies.webrtc.clock",
        "description": "src.selkies.webrtc.clock",
        "peekOfCode": "def current_ms() -> int:\n    delta = current_datetime() - NTP_EPOCH\n    return int(delta.total_seconds() * 1000)\ndef current_ntp_time() -> int:\n    return datetime_to_ntp(current_datetime())\ndef datetime_from_ntp(ntp: int) -> datetime.datetime:\n    seconds = ntp >> 32\n    microseconds = ((ntp & 0xFFFFFFFF) * 1000000) / (1 << 32)\n    return NTP_EPOCH + datetime.timedelta(seconds=seconds, microseconds=microseconds)\ndef datetime_to_ntp(dt: datetime.datetime) -> int:",
        "detail": "src.selkies.webrtc.clock",
        "documentation": {}
    },
    {
        "label": "current_ntp_time",
        "kind": 2,
        "importPath": "src.selkies.webrtc.clock",
        "description": "src.selkies.webrtc.clock",
        "peekOfCode": "def current_ntp_time() -> int:\n    return datetime_to_ntp(current_datetime())\ndef datetime_from_ntp(ntp: int) -> datetime.datetime:\n    seconds = ntp >> 32\n    microseconds = ((ntp & 0xFFFFFFFF) * 1000000) / (1 << 32)\n    return NTP_EPOCH + datetime.timedelta(seconds=seconds, microseconds=microseconds)\ndef datetime_to_ntp(dt: datetime.datetime) -> int:\n    delta = dt - NTP_EPOCH\n    high = int(delta.total_seconds())\n    low = round((delta.microseconds * (1 << 32)) // 1000000)",
        "detail": "src.selkies.webrtc.clock",
        "documentation": {}
    },
    {
        "label": "datetime_from_ntp",
        "kind": 2,
        "importPath": "src.selkies.webrtc.clock",
        "description": "src.selkies.webrtc.clock",
        "peekOfCode": "def datetime_from_ntp(ntp: int) -> datetime.datetime:\n    seconds = ntp >> 32\n    microseconds = ((ntp & 0xFFFFFFFF) * 1000000) / (1 << 32)\n    return NTP_EPOCH + datetime.timedelta(seconds=seconds, microseconds=microseconds)\ndef datetime_to_ntp(dt: datetime.datetime) -> int:\n    delta = dt - NTP_EPOCH\n    high = int(delta.total_seconds())\n    low = round((delta.microseconds * (1 << 32)) // 1000000)\n    return (high << 32) | low",
        "detail": "src.selkies.webrtc.clock",
        "documentation": {}
    },
    {
        "label": "datetime_to_ntp",
        "kind": 2,
        "importPath": "src.selkies.webrtc.clock",
        "description": "src.selkies.webrtc.clock",
        "peekOfCode": "def datetime_to_ntp(dt: datetime.datetime) -> int:\n    delta = dt - NTP_EPOCH\n    high = int(delta.total_seconds())\n    low = round((delta.microseconds * (1 << 32)) // 1000000)\n    return (high << 32) | low",
        "detail": "src.selkies.webrtc.clock",
        "documentation": {}
    },
    {
        "label": "NTP_EPOCH",
        "kind": 5,
        "importPath": "src.selkies.webrtc.clock",
        "description": "src.selkies.webrtc.clock",
        "peekOfCode": "NTP_EPOCH = datetime.datetime(1900, 1, 1, tzinfo=datetime.timezone.utc)\ndef current_datetime() -> datetime.datetime:\n    return datetime.datetime.now(datetime.timezone.utc)\ndef current_ms() -> int:\n    delta = current_datetime() - NTP_EPOCH\n    return int(delta.total_seconds() * 1000)\ndef current_ntp_time() -> int:\n    return datetime_to_ntp(current_datetime())\ndef datetime_from_ntp(ntp: int) -> datetime.datetime:\n    seconds = ntp >> 32",
        "detail": "src.selkies.webrtc.clock",
        "documentation": {}
    },
    {
        "label": "RTCTrackEvent",
        "kind": 6,
        "importPath": "src.selkies.webrtc.events",
        "description": "src.selkies.webrtc.events",
        "peekOfCode": "class RTCTrackEvent:\n    \"\"\"\n    This event is fired on :class:`RTCPeerConnection` when a new\n    :class:`MediaStreamTrack` is added by the remote party.\n    \"\"\"\n    receiver: RTCRtpReceiver\n    \"The :class:`RTCRtpReceiver` associated with the event.\"\n    track: MediaStreamTrack\n    \"The :class:`MediaStreamTrack` associated with the event.\"\n    transceiver: RTCRtpTransceiver",
        "detail": "src.selkies.webrtc.events",
        "documentation": {}
    },
    {
        "label": "InternalError",
        "kind": 6,
        "importPath": "src.selkies.webrtc.exceptions",
        "description": "src.selkies.webrtc.exceptions",
        "peekOfCode": "class InternalError(Exception):\n    pass\nclass InvalidAccessError(Exception):\n    pass\nclass InvalidStateError(Exception):\n    pass\nclass OperationError(Exception):\n    pass",
        "detail": "src.selkies.webrtc.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidAccessError",
        "kind": 6,
        "importPath": "src.selkies.webrtc.exceptions",
        "description": "src.selkies.webrtc.exceptions",
        "peekOfCode": "class InvalidAccessError(Exception):\n    pass\nclass InvalidStateError(Exception):\n    pass\nclass OperationError(Exception):\n    pass",
        "detail": "src.selkies.webrtc.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidStateError",
        "kind": 6,
        "importPath": "src.selkies.webrtc.exceptions",
        "description": "src.selkies.webrtc.exceptions",
        "peekOfCode": "class InvalidStateError(Exception):\n    pass\nclass OperationError(Exception):\n    pass",
        "detail": "src.selkies.webrtc.exceptions",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "kind": 6,
        "importPath": "src.selkies.webrtc.exceptions",
        "description": "src.selkies.webrtc.exceptions",
        "peekOfCode": "class OperationError(Exception):\n    pass",
        "detail": "src.selkies.webrtc.exceptions",
        "documentation": {}
    },
    {
        "label": "JitterFrame",
        "kind": 6,
        "importPath": "src.selkies.webrtc.jitterbuffer",
        "description": "src.selkies.webrtc.jitterbuffer",
        "peekOfCode": "class JitterFrame:\n    def __init__(self, data: bytes, timestamp: int) -> None:\n        self.data = data\n        self.timestamp = timestamp\nclass JitterBuffer:\n    def __init__(\n        self, capacity: int, prefetch: int = 0, is_video: bool = False\n    ) -> None:\n        assert capacity & (capacity - 1) == 0, \"capacity must be a power of 2\"\n        self._capacity = capacity",
        "detail": "src.selkies.webrtc.jitterbuffer",
        "documentation": {}
    },
    {
        "label": "JitterBuffer",
        "kind": 6,
        "importPath": "src.selkies.webrtc.jitterbuffer",
        "description": "src.selkies.webrtc.jitterbuffer",
        "peekOfCode": "class JitterBuffer:\n    def __init__(\n        self, capacity: int, prefetch: int = 0, is_video: bool = False\n    ) -> None:\n        assert capacity & (capacity - 1) == 0, \"capacity must be a power of 2\"\n        self._capacity = capacity\n        self._origin: Optional[int] = None\n        self._packets: list[Optional[RtpPacket]] = [None for i in range(capacity)]\n        self._prefetch = prefetch\n        self._is_video = is_video",
        "detail": "src.selkies.webrtc.jitterbuffer",
        "documentation": {}
    },
    {
        "label": "MAX_MISORDER",
        "kind": 5,
        "importPath": "src.selkies.webrtc.jitterbuffer",
        "description": "src.selkies.webrtc.jitterbuffer",
        "peekOfCode": "MAX_MISORDER = 100\nclass JitterFrame:\n    def __init__(self, data: bytes, timestamp: int) -> None:\n        self.data = data\n        self.timestamp = timestamp\nclass JitterBuffer:\n    def __init__(\n        self, capacity: int, prefetch: int = 0, is_video: bool = False\n    ) -> None:\n        assert capacity & (capacity - 1) == 0, \"capacity must be a power of 2\"",
        "detail": "src.selkies.webrtc.jitterbuffer",
        "documentation": {}
    },
    {
        "label": "MediaStreamError",
        "kind": 6,
        "importPath": "src.selkies.webrtc.mediastreams",
        "description": "src.selkies.webrtc.mediastreams",
        "peekOfCode": "class MediaStreamError(Exception):\n    pass\nclass MediaStreamTrack(AsyncIOEventEmitter, metaclass=ABCMeta):\n    \"\"\"\n    A single media track within a stream.\n    \"\"\"\n    kind = \"unknown\"\n    def __init__(self) -> None:\n        super().__init__()\n        self.__ended = False",
        "detail": "src.selkies.webrtc.mediastreams",
        "documentation": {}
    },
    {
        "label": "MediaStreamTrack",
        "kind": 6,
        "importPath": "src.selkies.webrtc.mediastreams",
        "description": "src.selkies.webrtc.mediastreams",
        "peekOfCode": "class MediaStreamTrack(AsyncIOEventEmitter, metaclass=ABCMeta):\n    \"\"\"\n    A single media track within a stream.\n    \"\"\"\n    kind = \"unknown\"\n    def __init__(self) -> None:\n        super().__init__()\n        self.__ended = False\n        self._id = str(uuid.uuid4())\n    @property",
        "detail": "src.selkies.webrtc.mediastreams",
        "documentation": {}
    },
    {
        "label": "AudioStreamTrack",
        "kind": 6,
        "importPath": "src.selkies.webrtc.mediastreams",
        "description": "src.selkies.webrtc.mediastreams",
        "peekOfCode": "class AudioStreamTrack(MediaStreamTrack):\n    \"\"\"\n    A dummy audio track which reads silence.\n    \"\"\"\n    kind = \"audio\"\n    _start: float\n    _timestamp: int\n    async def recv(self) -> Frame:\n        \"\"\"\n        Receive the next :class:`~av.audio.frame.AudioFrame`.",
        "detail": "src.selkies.webrtc.mediastreams",
        "documentation": {}
    },
    {
        "label": "VideoStreamTrack",
        "kind": 6,
        "importPath": "src.selkies.webrtc.mediastreams",
        "description": "src.selkies.webrtc.mediastreams",
        "peekOfCode": "class VideoStreamTrack(MediaStreamTrack):\n    \"\"\"\n    A dummy video track which reads green frames.\n    \"\"\"\n    kind = \"video\"\n    _start: float\n    _timestamp: int\n    async def next_timestamp(self) -> tuple[int, fractions.Fraction]:\n        if self.readyState != \"live\":\n            raise MediaStreamError",
        "detail": "src.selkies.webrtc.mediastreams",
        "documentation": {}
    },
    {
        "label": "convert_timebase",
        "kind": 2,
        "importPath": "src.selkies.webrtc.mediastreams",
        "description": "src.selkies.webrtc.mediastreams",
        "peekOfCode": "def convert_timebase(\n    pts: int, from_base: fractions.Fraction, to_base: fractions.Fraction\n) -> int:\n    if from_base != to_base:\n        pts = int(pts * from_base / to_base)\n    return pts\nclass MediaStreamError(Exception):\n    pass\nclass MediaStreamTrack(AsyncIOEventEmitter, metaclass=ABCMeta):\n    \"\"\"",
        "detail": "src.selkies.webrtc.mediastreams",
        "documentation": {}
    },
    {
        "label": "AUDIO_PTIME",
        "kind": 5,
        "importPath": "src.selkies.webrtc.mediastreams",
        "description": "src.selkies.webrtc.mediastreams",
        "peekOfCode": "AUDIO_PTIME = 0.020  # 20ms audio packetization\nVIDEO_CLOCK_RATE = 90000\nVIDEO_PTIME = 1 / 30  # 30fps\nVIDEO_TIME_BASE = fractions.Fraction(1, VIDEO_CLOCK_RATE)\ndef convert_timebase(\n    pts: int, from_base: fractions.Fraction, to_base: fractions.Fraction\n) -> int:\n    if from_base != to_base:\n        pts = int(pts * from_base / to_base)\n    return pts",
        "detail": "src.selkies.webrtc.mediastreams",
        "documentation": {}
    },
    {
        "label": "VIDEO_CLOCK_RATE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.mediastreams",
        "description": "src.selkies.webrtc.mediastreams",
        "peekOfCode": "VIDEO_CLOCK_RATE = 90000\nVIDEO_PTIME = 1 / 30  # 30fps\nVIDEO_TIME_BASE = fractions.Fraction(1, VIDEO_CLOCK_RATE)\ndef convert_timebase(\n    pts: int, from_base: fractions.Fraction, to_base: fractions.Fraction\n) -> int:\n    if from_base != to_base:\n        pts = int(pts * from_base / to_base)\n    return pts\nclass MediaStreamError(Exception):",
        "detail": "src.selkies.webrtc.mediastreams",
        "documentation": {}
    },
    {
        "label": "VIDEO_PTIME",
        "kind": 5,
        "importPath": "src.selkies.webrtc.mediastreams",
        "description": "src.selkies.webrtc.mediastreams",
        "peekOfCode": "VIDEO_PTIME = 1 / 30  # 30fps\nVIDEO_TIME_BASE = fractions.Fraction(1, VIDEO_CLOCK_RATE)\ndef convert_timebase(\n    pts: int, from_base: fractions.Fraction, to_base: fractions.Fraction\n) -> int:\n    if from_base != to_base:\n        pts = int(pts * from_base / to_base)\n    return pts\nclass MediaStreamError(Exception):\n    pass",
        "detail": "src.selkies.webrtc.mediastreams",
        "documentation": {}
    },
    {
        "label": "VIDEO_TIME_BASE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.mediastreams",
        "description": "src.selkies.webrtc.mediastreams",
        "peekOfCode": "VIDEO_TIME_BASE = fractions.Fraction(1, VIDEO_CLOCK_RATE)\ndef convert_timebase(\n    pts: int, from_base: fractions.Fraction, to_base: fractions.Fraction\n) -> int:\n    if from_base != to_base:\n        pts = int(pts * from_base / to_base)\n    return pts\nclass MediaStreamError(Exception):\n    pass\nclass MediaStreamTrack(AsyncIOEventEmitter, metaclass=ABCMeta):",
        "detail": "src.selkies.webrtc.mediastreams",
        "documentation": {}
    },
    {
        "label": "BandwidthUsage",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rate",
        "description": "src.selkies.webrtc.rate",
        "peekOfCode": "class BandwidthUsage(Enum):\n    NORMAL = 0\n    UNDERUSING = 1\n    OVERUSING = 2\nclass RateControlState(Enum):\n    HOLD = 0\n    INCREASE = 1\n    DECREASE = 2\nclass AimdRateControl:\n    def __init__(self) -> None:",
        "detail": "src.selkies.webrtc.rate",
        "documentation": {}
    },
    {
        "label": "RateControlState",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rate",
        "description": "src.selkies.webrtc.rate",
        "peekOfCode": "class RateControlState(Enum):\n    HOLD = 0\n    INCREASE = 1\n    DECREASE = 2\nclass AimdRateControl:\n    def __init__(self) -> None:\n        self.avg_max_bitrate_kbps: Optional[float] = None\n        self.var_max_bitrate_kbps = 0.4\n        self.current_bitrate = 30000000\n        self.current_bitrate_initialized = False",
        "detail": "src.selkies.webrtc.rate",
        "documentation": {}
    },
    {
        "label": "AimdRateControl",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rate",
        "description": "src.selkies.webrtc.rate",
        "peekOfCode": "class AimdRateControl:\n    def __init__(self) -> None:\n        self.avg_max_bitrate_kbps: Optional[float] = None\n        self.var_max_bitrate_kbps = 0.4\n        self.current_bitrate = 30000000\n        self.current_bitrate_initialized = False\n        self.first_estimated_throughput_time: Optional[int] = None\n        self.last_change_ms: Optional[int] = None\n        self.near_max = False\n        self.latest_estimated_throughput = 30000000",
        "detail": "src.selkies.webrtc.rate",
        "documentation": {}
    },
    {
        "label": "TimestampGroup",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rate",
        "description": "src.selkies.webrtc.rate",
        "peekOfCode": "class TimestampGroup:\n    def __init__(self, timestamp: Optional[int] = None) -> None:\n        self.arrival_time: Optional[int] = None\n        self.first_timestamp = timestamp\n        self.last_timestamp = timestamp\n        self.size = 0\nclass InterArrivalDelta:\n    def __init__(self, timestamp: int, arrival_time: int, size: int) -> None:\n        self.timestamp = timestamp\n        self.arrival_time = arrival_time",
        "detail": "src.selkies.webrtc.rate",
        "documentation": {}
    },
    {
        "label": "InterArrivalDelta",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rate",
        "description": "src.selkies.webrtc.rate",
        "peekOfCode": "class InterArrivalDelta:\n    def __init__(self, timestamp: int, arrival_time: int, size: int) -> None:\n        self.timestamp = timestamp\n        self.arrival_time = arrival_time\n        self.size = size\nclass InterArrival:\n    \"\"\"\n    Inter-arrival time and size filter.\n    Adapted from the webrtc.org codebase.\n    \"\"\"",
        "detail": "src.selkies.webrtc.rate",
        "documentation": {}
    },
    {
        "label": "InterArrival",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rate",
        "description": "src.selkies.webrtc.rate",
        "peekOfCode": "class InterArrival:\n    \"\"\"\n    Inter-arrival time and size filter.\n    Adapted from the webrtc.org codebase.\n    \"\"\"\n    def __init__(self, group_length: int, timestamp_to_ms: float) -> None:\n        self.group_length = group_length\n        self.timestamp_to_ms = timestamp_to_ms\n        self.current_group: Optional[TimestampGroup] = None\n        self.previous_group: Optional[TimestampGroup] = None",
        "detail": "src.selkies.webrtc.rate",
        "documentation": {}
    },
    {
        "label": "OveruseDetector",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rate",
        "description": "src.selkies.webrtc.rate",
        "peekOfCode": "class OveruseDetector:\n    \"\"\"\n    Bandwidth overuse detector.\n    Adapted from the webrtc.org codebase.\n    \"\"\"\n    def __init__(self) -> None:\n        self.hypothesis = BandwidthUsage.NORMAL\n        self.last_update_ms: Optional[int] = None\n        self.k_up = 0.0087\n        self.k_down = 0.039",
        "detail": "src.selkies.webrtc.rate",
        "documentation": {}
    },
    {
        "label": "OveruseEstimator",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rate",
        "description": "src.selkies.webrtc.rate",
        "peekOfCode": "class OveruseEstimator:\n    \"\"\"\n    Bandwidth overuse estimator.\n    Adapted from the webrtc.org codebase.\n    \"\"\"\n    def __init__(self) -> None:\n        self.E = [[100.0, 0.0], [0.0, 0.1]]\n        self._num_of_deltas = 0\n        self._offset = 0.0\n        self.previous_offset = 0.0",
        "detail": "src.selkies.webrtc.rate",
        "documentation": {}
    },
    {
        "label": "RateBucket",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rate",
        "description": "src.selkies.webrtc.rate",
        "peekOfCode": "class RateBucket:\n    def __init__(self, count: int = 0, value: int = 0) -> None:\n        self.count = count\n        self.value = value\n    def __eq__(self, other: Any) -> bool:\n        return self.count == other.count and self.value == other.value\nclass RateCounter:\n    \"\"\"\n    Rate counter, which stores the amount received in 1ms buckets.\n    \"\"\"",
        "detail": "src.selkies.webrtc.rate",
        "documentation": {}
    },
    {
        "label": "RateCounter",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rate",
        "description": "src.selkies.webrtc.rate",
        "peekOfCode": "class RateCounter:\n    \"\"\"\n    Rate counter, which stores the amount received in 1ms buckets.\n    \"\"\"\n    def __init__(self, window_size: int, scale: int = 8000) -> None:\n        self._origin_index = 0\n        self._origin_ms: Optional[int] = None\n        self._scale = scale\n        self._window_size = window_size\n        self.reset()",
        "detail": "src.selkies.webrtc.rate",
        "documentation": {}
    },
    {
        "label": "RemoteBitrateEstimator",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rate",
        "description": "src.selkies.webrtc.rate",
        "peekOfCode": "class RemoteBitrateEstimator:\n    def __init__(self) -> None:\n        self.incoming_bitrate = RateCounter(1000, 8000)\n        self.incoming_bitrate_initialized = True\n        self.inter_arrival = InterArrival(\n            (TIMESTAMP_GROUP_LENGTH_MS << INTER_ARRIVAL_SHIFT) // 1000, TIMESTAMP_TO_MS\n        )\n        self.estimator = OveruseEstimator()\n        self.detector = OveruseDetector()\n        self.rate_control = AimdRateControl()",
        "detail": "src.selkies.webrtc.rate",
        "documentation": {}
    },
    {
        "label": "BURST_DELTA_THRESHOLD_MS",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rate",
        "description": "src.selkies.webrtc.rate",
        "peekOfCode": "BURST_DELTA_THRESHOLD_MS = 5\n# overuse detector\nMAX_ADAPT_OFFSET_MS = 15\nMIN_NUM_DELTAS = 60\n# overuse estimator\nDELTA_COUNTER_MAX = 1000\nMIN_FRAME_PERIOD_HISTORY_LENGTH = 60\n# abs-send-time estimator\nINTER_ARRIVAL_SHIFT = 26\nTIMESTAMP_GROUP_LENGTH_MS = 5",
        "detail": "src.selkies.webrtc.rate",
        "documentation": {}
    },
    {
        "label": "MAX_ADAPT_OFFSET_MS",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rate",
        "description": "src.selkies.webrtc.rate",
        "peekOfCode": "MAX_ADAPT_OFFSET_MS = 15\nMIN_NUM_DELTAS = 60\n# overuse estimator\nDELTA_COUNTER_MAX = 1000\nMIN_FRAME_PERIOD_HISTORY_LENGTH = 60\n# abs-send-time estimator\nINTER_ARRIVAL_SHIFT = 26\nTIMESTAMP_GROUP_LENGTH_MS = 5\nTIMESTAMP_TO_MS = 1000.0 / (1 << INTER_ARRIVAL_SHIFT)\nclass BandwidthUsage(Enum):",
        "detail": "src.selkies.webrtc.rate",
        "documentation": {}
    },
    {
        "label": "MIN_NUM_DELTAS",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rate",
        "description": "src.selkies.webrtc.rate",
        "peekOfCode": "MIN_NUM_DELTAS = 60\n# overuse estimator\nDELTA_COUNTER_MAX = 1000\nMIN_FRAME_PERIOD_HISTORY_LENGTH = 60\n# abs-send-time estimator\nINTER_ARRIVAL_SHIFT = 26\nTIMESTAMP_GROUP_LENGTH_MS = 5\nTIMESTAMP_TO_MS = 1000.0 / (1 << INTER_ARRIVAL_SHIFT)\nclass BandwidthUsage(Enum):\n    NORMAL = 0",
        "detail": "src.selkies.webrtc.rate",
        "documentation": {}
    },
    {
        "label": "DELTA_COUNTER_MAX",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rate",
        "description": "src.selkies.webrtc.rate",
        "peekOfCode": "DELTA_COUNTER_MAX = 1000\nMIN_FRAME_PERIOD_HISTORY_LENGTH = 60\n# abs-send-time estimator\nINTER_ARRIVAL_SHIFT = 26\nTIMESTAMP_GROUP_LENGTH_MS = 5\nTIMESTAMP_TO_MS = 1000.0 / (1 << INTER_ARRIVAL_SHIFT)\nclass BandwidthUsage(Enum):\n    NORMAL = 0\n    UNDERUSING = 1\n    OVERUSING = 2",
        "detail": "src.selkies.webrtc.rate",
        "documentation": {}
    },
    {
        "label": "MIN_FRAME_PERIOD_HISTORY_LENGTH",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rate",
        "description": "src.selkies.webrtc.rate",
        "peekOfCode": "MIN_FRAME_PERIOD_HISTORY_LENGTH = 60\n# abs-send-time estimator\nINTER_ARRIVAL_SHIFT = 26\nTIMESTAMP_GROUP_LENGTH_MS = 5\nTIMESTAMP_TO_MS = 1000.0 / (1 << INTER_ARRIVAL_SHIFT)\nclass BandwidthUsage(Enum):\n    NORMAL = 0\n    UNDERUSING = 1\n    OVERUSING = 2\nclass RateControlState(Enum):",
        "detail": "src.selkies.webrtc.rate",
        "documentation": {}
    },
    {
        "label": "INTER_ARRIVAL_SHIFT",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rate",
        "description": "src.selkies.webrtc.rate",
        "peekOfCode": "INTER_ARRIVAL_SHIFT = 26\nTIMESTAMP_GROUP_LENGTH_MS = 5\nTIMESTAMP_TO_MS = 1000.0 / (1 << INTER_ARRIVAL_SHIFT)\nclass BandwidthUsage(Enum):\n    NORMAL = 0\n    UNDERUSING = 1\n    OVERUSING = 2\nclass RateControlState(Enum):\n    HOLD = 0\n    INCREASE = 1",
        "detail": "src.selkies.webrtc.rate",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP_GROUP_LENGTH_MS",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rate",
        "description": "src.selkies.webrtc.rate",
        "peekOfCode": "TIMESTAMP_GROUP_LENGTH_MS = 5\nTIMESTAMP_TO_MS = 1000.0 / (1 << INTER_ARRIVAL_SHIFT)\nclass BandwidthUsage(Enum):\n    NORMAL = 0\n    UNDERUSING = 1\n    OVERUSING = 2\nclass RateControlState(Enum):\n    HOLD = 0\n    INCREASE = 1\n    DECREASE = 2",
        "detail": "src.selkies.webrtc.rate",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP_TO_MS",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rate",
        "description": "src.selkies.webrtc.rate",
        "peekOfCode": "TIMESTAMP_TO_MS = 1000.0 / (1 << INTER_ARRIVAL_SHIFT)\nclass BandwidthUsage(Enum):\n    NORMAL = 0\n    UNDERUSING = 1\n    OVERUSING = 2\nclass RateControlState(Enum):\n    HOLD = 0\n    INCREASE = 1\n    DECREASE = 2\nclass AimdRateControl:",
        "detail": "src.selkies.webrtc.rate",
        "documentation": {}
    },
    {
        "label": "RTCIceServer",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcconfiguration",
        "description": "src.selkies.webrtc.rtcconfiguration",
        "peekOfCode": "class RTCIceServer:\n    \"\"\"\n    The :class:`RTCIceServer` dictionary defines how to connect to a single\n    STUN or TURN server. It includes both the URL and the necessary credentials,\n    if any, to connect to the server.\n    \"\"\"\n    urls: Union[str, list[str]]\n    \"\"\"\n    This required property is either a single string or a list of strings,\n    each specifying a URL which can be used to connect to the server.",
        "detail": "src.selkies.webrtc.rtcconfiguration",
        "documentation": {}
    },
    {
        "label": "RTCBundlePolicy",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcconfiguration",
        "description": "src.selkies.webrtc.rtcconfiguration",
        "peekOfCode": "class RTCBundlePolicy(enum.Enum):\n    \"\"\"\n    The :class:`RTCBundlePolicy` affects which media tracks are negotiated if\n    the remote endpoint is not bundle-aware, and what ICE candidates are\n    gathered.\n    See https://w3c.github.io/webrtc-pc/#rtcbundlepolicy-enum\n    \"\"\"\n    BALANCED = \"balanced\"\n    \"\"\"\n    Gather ICE candidates for each media type in use (audio, video, and data).",
        "detail": "src.selkies.webrtc.rtcconfiguration",
        "documentation": {}
    },
    {
        "label": "RTCConfiguration",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcconfiguration",
        "description": "src.selkies.webrtc.rtcconfiguration",
        "peekOfCode": "class RTCConfiguration:\n    \"\"\"\n    The :class:`RTCConfiguration` dictionary is used to provide configuration\n    options for an :class:`RTCPeerConnection`.\n    \"\"\"\n    iceServers: Optional[list[RTCIceServer]] = None\n    \"A list of :class:`RTCIceServer` objects to configure STUN / TURN servers.\"\n    bundlePolicy: RTCBundlePolicy = RTCBundlePolicy.BALANCED\n    \"The media-bundling policy to use when gathering ICE candidates.\"",
        "detail": "src.selkies.webrtc.rtcconfiguration",
        "documentation": {}
    },
    {
        "label": "RTCDataChannelParameters",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcdatachannel",
        "description": "src.selkies.webrtc.rtcdatachannel",
        "peekOfCode": "class RTCDataChannelParameters:\n    \"\"\"\n    The :class:`RTCDataChannelParameters` dictionary describes the\n    configuration of an :class:`RTCDataChannel`.\n    \"\"\"\n    label: str = \"\"\n    \"A name describing the data channel.\"\n    maxPacketLifeTime: Optional[int] = None\n    \"The maximum time in milliseconds during which transmissions are attempted.\"\n    maxRetransmits: Optional[int] = None",
        "detail": "src.selkies.webrtc.rtcdatachannel",
        "documentation": {}
    },
    {
        "label": "RTCDataChannel",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcdatachannel",
        "description": "src.selkies.webrtc.rtcdatachannel",
        "peekOfCode": "class RTCDataChannel(AsyncIOEventEmitter):\n    \"\"\"\n    The :class:`RTCDataChannel` interface represents a network channel which\n    can be used for bidirectional peer-to-peer transfers of arbitrary data.\n    :param transport: An :class:`RTCSctpTransport`.\n    :param parameters: An :class:`RTCDataChannelParameters`.\n    \"\"\"\n    def __init__(\n        self,\n        transport: \"RTCSctpTransport\",",
        "detail": "src.selkies.webrtc.rtcdatachannel",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcdatachannel",
        "description": "src.selkies.webrtc.rtcdatachannel",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@dataclass\nclass RTCDataChannelParameters:\n    \"\"\"\n    The :class:`RTCDataChannelParameters` dictionary describes the\n    configuration of an :class:`RTCDataChannel`.\n    \"\"\"\n    label: str = \"\"\n    \"A name describing the data channel.\"\n    maxPacketLifeTime: Optional[int] = None",
        "detail": "src.selkies.webrtc.rtcdatachannel",
        "documentation": {}
    },
    {
        "label": "SRTPProtectionProfile",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcdtlstransport",
        "description": "src.selkies.webrtc.rtcdtlstransport",
        "peekOfCode": "class SRTPProtectionProfile:\n    libsrtp_profile: int\n    openssl_profile: bytes\n    key_length: int\n    salt_length: int\n    def get_key_and_salt(self, src: bytes, idx: int) -> bytes:\n        key_start = idx * self.key_length\n        salt_start = 2 * self.key_length + idx * self.salt_length\n        return (\n            src[key_start : key_start + self.key_length]",
        "detail": "src.selkies.webrtc.rtcdtlstransport",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcdtlstransport",
        "description": "src.selkies.webrtc.rtcdtlstransport",
        "peekOfCode": "class State(enum.Enum):\n    NEW = 0\n    CONNECTING = 1\n    CONNECTED = 2\n    CLOSED = 3\n    FAILED = 4\n@dataclass\nclass RTCDtlsFingerprint:\n    \"\"\"\n    The :class:`RTCDtlsFingerprint` dictionary includes the hash function",
        "detail": "src.selkies.webrtc.rtcdtlstransport",
        "documentation": {}
    },
    {
        "label": "RTCDtlsFingerprint",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcdtlstransport",
        "description": "src.selkies.webrtc.rtcdtlstransport",
        "peekOfCode": "class RTCDtlsFingerprint:\n    \"\"\"\n    The :class:`RTCDtlsFingerprint` dictionary includes the hash function\n    algorithm and certificate fingerprint.\n    \"\"\"\n    algorithm: str\n    \"The hash function name, for instance `'sha-256'`.\"\n    value: str\n    \"The fingerprint value.\"\nclass RTCCertificate:",
        "detail": "src.selkies.webrtc.rtcdtlstransport",
        "documentation": {}
    },
    {
        "label": "RTCCertificate",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcdtlstransport",
        "description": "src.selkies.webrtc.rtcdtlstransport",
        "peekOfCode": "class RTCCertificate:\n    \"\"\"\n    The :class:`RTCCertificate` interface enables the certificates used by an\n    :class:`RTCDtlsTransport`.\n    To generate a certificate and the corresponding private key use\n    :func:`generateCertificate`.\n    \"\"\"\n    def __init__(self, key: ec.EllipticCurvePrivateKey, cert: x509.Certificate) -> None:\n        self._key = key\n        self._cert = cert",
        "detail": "src.selkies.webrtc.rtcdtlstransport",
        "documentation": {}
    },
    {
        "label": "RTCDtlsParameters",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcdtlstransport",
        "description": "src.selkies.webrtc.rtcdtlstransport",
        "peekOfCode": "class RTCDtlsParameters:\n    \"\"\"\n    The :class:`RTCDtlsParameters` dictionary includes information relating to\n    DTLS configuration.\n    \"\"\"\n    fingerprints: list[RTCDtlsFingerprint] = field(default_factory=list)\n    \"List of :class:`RTCDtlsFingerprint`, one fingerprint for each certificate.\"\n    role: str = \"auto\"\n    \"The DTLS role, with a default of auto.\"\nclass DataReceiver(Protocol):",
        "detail": "src.selkies.webrtc.rtcdtlstransport",
        "documentation": {}
    },
    {
        "label": "DataReceiver",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcdtlstransport",
        "description": "src.selkies.webrtc.rtcdtlstransport",
        "peekOfCode": "class DataReceiver(Protocol):\n    async def _handle_data(self, data: bytes) -> None: ...\nclass RtpReceiver(Protocol):\n    def _handle_disconnect(self) -> None: ...\n    async def _handle_rtcp_packet(self, packet: AnyRtcpPacket) -> None: ...\n    async def _handle_rtp_packet(\n        self, packet: RtpPacket, arrival_time_ms: int\n    ) -> None: ...\nclass RtpSender(Protocol):\n    _ssrc: int",
        "detail": "src.selkies.webrtc.rtcdtlstransport",
        "documentation": {}
    },
    {
        "label": "RtpReceiver",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcdtlstransport",
        "description": "src.selkies.webrtc.rtcdtlstransport",
        "peekOfCode": "class RtpReceiver(Protocol):\n    def _handle_disconnect(self) -> None: ...\n    async def _handle_rtcp_packet(self, packet: AnyRtcpPacket) -> None: ...\n    async def _handle_rtp_packet(\n        self, packet: RtpPacket, arrival_time_ms: int\n    ) -> None: ...\nclass RtpSender(Protocol):\n    _ssrc: int\n    async def _handle_rtcp_packet(self, packet: AnyRtcpPacket) -> None: ...\nclass RtpRouter:",
        "detail": "src.selkies.webrtc.rtcdtlstransport",
        "documentation": {}
    },
    {
        "label": "RtpSender",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcdtlstransport",
        "description": "src.selkies.webrtc.rtcdtlstransport",
        "peekOfCode": "class RtpSender(Protocol):\n    _ssrc: int\n    async def _handle_rtcp_packet(self, packet: AnyRtcpPacket) -> None: ...\nclass RtpRouter:\n    \"\"\"\n    Router to associate RTP/RTCP packets with streams.\n    https://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-53\n    \"\"\"\n    def __init__(self) -> None:\n        self.receivers: set[RtpReceiver] = set()",
        "detail": "src.selkies.webrtc.rtcdtlstransport",
        "documentation": {}
    },
    {
        "label": "RtpRouter",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcdtlstransport",
        "description": "src.selkies.webrtc.rtcdtlstransport",
        "peekOfCode": "class RtpRouter:\n    \"\"\"\n    Router to associate RTP/RTCP packets with streams.\n    https://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-53\n    \"\"\"\n    def __init__(self) -> None:\n        self.receivers: set[RtpReceiver] = set()\n        self.senders: dict[int, RtpSender] = {}\n        self.mid_table: dict[str, RtpReceiver] = {}\n        self.ssrc_table: dict[int, RtpReceiver] = {}",
        "detail": "src.selkies.webrtc.rtcdtlstransport",
        "documentation": {}
    },
    {
        "label": "RTCDtlsTransport",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcdtlstransport",
        "description": "src.selkies.webrtc.rtcdtlstransport",
        "peekOfCode": "class RTCDtlsTransport(AsyncIOEventEmitter):\n    \"\"\"\n    The :class:`RTCDtlsTransport` object includes information relating to\n    Datagram Transport Layer Security (DTLS) transport.\n    :param transport: An :class:`RTCIceTransport`.\n    :param certificates: A list of :class:`RTCCertificate` (only one is allowed\n        currently).\n    \"\"\"\n    def __init__(\n        self, transport: RTCIceTransport, certificates: list[RTCCertificate]",
        "detail": "src.selkies.webrtc.rtcdtlstransport",
        "documentation": {}
    },
    {
        "label": "certificate_digest",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcdtlstransport",
        "description": "src.selkies.webrtc.rtcdtlstransport",
        "peekOfCode": "def certificate_digest(certificate: x509.Certificate, algorithm: str) -> str:\n    hexstring = certificate.fingerprint(X509_DIGEST_ALGORITHMS[algorithm]).hex().upper()\n    return \":\".join(hexstring[x : x + 2] for x in range(0, len(hexstring), 2))\ndef generate_certificate(key: ec.EllipticCurvePrivateKey) -> x509.Certificate:\n    name = x509.Name(\n        [\n            x509.NameAttribute(\n                x509.NameOID.COMMON_NAME,\n                binascii.hexlify(os.urandom(16)).decode(\"ascii\"),\n            )",
        "detail": "src.selkies.webrtc.rtcdtlstransport",
        "documentation": {}
    },
    {
        "label": "generate_certificate",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcdtlstransport",
        "description": "src.selkies.webrtc.rtcdtlstransport",
        "peekOfCode": "def generate_certificate(key: ec.EllipticCurvePrivateKey) -> x509.Certificate:\n    name = x509.Name(\n        [\n            x509.NameAttribute(\n                x509.NameOID.COMMON_NAME,\n                binascii.hexlify(os.urandom(16)).decode(\"ascii\"),\n            )\n        ]\n    )\n    now = datetime.datetime.now(tz=datetime.timezone.utc)",
        "detail": "src.selkies.webrtc.rtcdtlstransport",
        "documentation": {}
    },
    {
        "label": "CERTIFICATE_T",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcdtlstransport",
        "description": "src.selkies.webrtc.rtcdtlstransport",
        "peekOfCode": "CERTIFICATE_T = TypeVar(\"CERTIFICATE_T\", bound=\"RTCCertificate\")\nK = TypeVar(\"K\")\nV = TypeVar(\"V\")\nlogger = logging.getLogger(__name__)\n# Mapping of supported `RTCDtlsFingerprint` algorithms to the\n# corresponding argument for `x509.Certificate.fingerprint`.\nX509_DIGEST_ALGORITHMS = {\n    \"sha-256\": hashes.SHA256(),\n    \"sha-384\": hashes.SHA384(),\n    \"sha-512\": hashes.SHA512(),",
        "detail": "src.selkies.webrtc.rtcdtlstransport",
        "documentation": {}
    },
    {
        "label": "K",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcdtlstransport",
        "description": "src.selkies.webrtc.rtcdtlstransport",
        "peekOfCode": "K = TypeVar(\"K\")\nV = TypeVar(\"V\")\nlogger = logging.getLogger(__name__)\n# Mapping of supported `RTCDtlsFingerprint` algorithms to the\n# corresponding argument for `x509.Certificate.fingerprint`.\nX509_DIGEST_ALGORITHMS = {\n    \"sha-256\": hashes.SHA256(),\n    \"sha-384\": hashes.SHA384(),\n    \"sha-512\": hashes.SHA512(),\n}",
        "detail": "src.selkies.webrtc.rtcdtlstransport",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcdtlstransport",
        "description": "src.selkies.webrtc.rtcdtlstransport",
        "peekOfCode": "V = TypeVar(\"V\")\nlogger = logging.getLogger(__name__)\n# Mapping of supported `RTCDtlsFingerprint` algorithms to the\n# corresponding argument for `x509.Certificate.fingerprint`.\nX509_DIGEST_ALGORITHMS = {\n    \"sha-256\": hashes.SHA256(),\n    \"sha-384\": hashes.SHA384(),\n    \"sha-512\": hashes.SHA512(),\n}\n@dataclass(frozen=True)",
        "detail": "src.selkies.webrtc.rtcdtlstransport",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcdtlstransport",
        "description": "src.selkies.webrtc.rtcdtlstransport",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Mapping of supported `RTCDtlsFingerprint` algorithms to the\n# corresponding argument for `x509.Certificate.fingerprint`.\nX509_DIGEST_ALGORITHMS = {\n    \"sha-256\": hashes.SHA256(),\n    \"sha-384\": hashes.SHA384(),\n    \"sha-512\": hashes.SHA512(),\n}\n@dataclass(frozen=True)\nclass SRTPProtectionProfile:",
        "detail": "src.selkies.webrtc.rtcdtlstransport",
        "documentation": {}
    },
    {
        "label": "X509_DIGEST_ALGORITHMS",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcdtlstransport",
        "description": "src.selkies.webrtc.rtcdtlstransport",
        "peekOfCode": "X509_DIGEST_ALGORITHMS = {\n    \"sha-256\": hashes.SHA256(),\n    \"sha-384\": hashes.SHA384(),\n    \"sha-512\": hashes.SHA512(),\n}\n@dataclass(frozen=True)\nclass SRTPProtectionProfile:\n    libsrtp_profile: int\n    openssl_profile: bytes\n    key_length: int",
        "detail": "src.selkies.webrtc.rtcdtlstransport",
        "documentation": {}
    },
    {
        "label": "SRTP_AEAD_AES_256_GCM",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcdtlstransport",
        "description": "src.selkies.webrtc.rtcdtlstransport",
        "peekOfCode": "SRTP_AEAD_AES_256_GCM = SRTPProtectionProfile(\n    libsrtp_profile=Policy.SRTP_PROFILE_AEAD_AES_256_GCM,\n    openssl_profile=b\"SRTP_AEAD_AES_256_GCM\",\n    key_length=32,\n    salt_length=12,\n)\nSRTP_AEAD_AES_128_GCM = SRTPProtectionProfile(\n    libsrtp_profile=Policy.SRTP_PROFILE_AEAD_AES_128_GCM,\n    openssl_profile=b\"SRTP_AEAD_AES_128_GCM\",\n    key_length=16,",
        "detail": "src.selkies.webrtc.rtcdtlstransport",
        "documentation": {}
    },
    {
        "label": "SRTP_AEAD_AES_128_GCM",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcdtlstransport",
        "description": "src.selkies.webrtc.rtcdtlstransport",
        "peekOfCode": "SRTP_AEAD_AES_128_GCM = SRTPProtectionProfile(\n    libsrtp_profile=Policy.SRTP_PROFILE_AEAD_AES_128_GCM,\n    openssl_profile=b\"SRTP_AEAD_AES_128_GCM\",\n    key_length=16,\n    salt_length=12,\n)\nSRTP_AES128_CM_SHA1_80 = SRTPProtectionProfile(\n    libsrtp_profile=Policy.SRTP_PROFILE_AES128_CM_SHA1_80,\n    openssl_profile=b\"SRTP_AES128_CM_SHA1_80\",\n    key_length=16,",
        "detail": "src.selkies.webrtc.rtcdtlstransport",
        "documentation": {}
    },
    {
        "label": "SRTP_AES128_CM_SHA1_80",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcdtlstransport",
        "description": "src.selkies.webrtc.rtcdtlstransport",
        "peekOfCode": "SRTP_AES128_CM_SHA1_80 = SRTPProtectionProfile(\n    libsrtp_profile=Policy.SRTP_PROFILE_AES128_CM_SHA1_80,\n    openssl_profile=b\"SRTP_AES128_CM_SHA1_80\",\n    key_length=16,\n    salt_length=14,\n)\n# AES-GCM may not be available depending on how libsrtp2 was built.\nSRTP_PROFILES: list[SRTPProtectionProfile] = []\nfor srtp_profile in [\n    SRTP_AEAD_AES_256_GCM,",
        "detail": "src.selkies.webrtc.rtcdtlstransport",
        "documentation": {}
    },
    {
        "label": "RTCIceCandidate",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcicetransport",
        "description": "src.selkies.webrtc.rtcicetransport",
        "peekOfCode": "class RTCIceCandidate:\n    \"\"\"\n    The :class:`RTCIceCandidate` interface represents a candidate Interactive\n    Connectivity Establishment (ICE) configuration which may be used to\n    establish an RTCPeerConnection.\n    \"\"\"\n    component: int\n    foundation: str\n    ip: str\n    port: int",
        "detail": "src.selkies.webrtc.rtcicetransport",
        "documentation": {}
    },
    {
        "label": "RTCIceParameters",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcicetransport",
        "description": "src.selkies.webrtc.rtcicetransport",
        "peekOfCode": "class RTCIceParameters:\n    \"\"\"\n    The :class:`RTCIceParameters` dictionary includes the ICE username\n    fragment and password and other ICE-related parameters.\n    \"\"\"\n    usernameFragment: Optional[str] = None\n    \"ICE username fragment.\"\n    password: Optional[str] = None\n    \"ICE password.\"\n    iceLite: bool = False",
        "detail": "src.selkies.webrtc.rtcicetransport",
        "documentation": {}
    },
    {
        "label": "RTCIceGatherer",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcicetransport",
        "description": "src.selkies.webrtc.rtcicetransport",
        "peekOfCode": "class RTCIceGatherer(AsyncIOEventEmitter):\n    \"\"\"\n    The :class:`RTCIceGatherer` interface gathers local host, server reflexive\n    and relay candidates, as well as enabling the retrieval of local\n    Interactive Connectivity Establishment (ICE) parameters which can be\n    exchanged in signaling.\n    \"\"\"\n    def __init__(\n        self,\n        iceServers: Optional[list[RTCIceServer]] = None,",
        "detail": "src.selkies.webrtc.rtcicetransport",
        "documentation": {}
    },
    {
        "label": "RTCIceTransport",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcicetransport",
        "description": "src.selkies.webrtc.rtcicetransport",
        "peekOfCode": "class RTCIceTransport(AsyncIOEventEmitter):\n    \"\"\"\n    The :class:`RTCIceTransport` interface allows an application access to\n    information about the Interactive Connectivity Establishment (ICE)\n    transport over which packets are sent and received.\n    :param gatherer: An :class:`RTCIceGatherer`.\n    \"\"\"\n    def __init__(self, gatherer: RTCIceGatherer) -> None:\n        super().__init__()\n        self.__iceGatherer = gatherer",
        "detail": "src.selkies.webrtc.rtcicetransport",
        "documentation": {}
    },
    {
        "label": "candidate_from_aioice",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcicetransport",
        "description": "src.selkies.webrtc.rtcicetransport",
        "peekOfCode": "def candidate_from_aioice(x: Candidate) -> RTCIceCandidate:\n    return RTCIceCandidate(\n        component=x.component,\n        foundation=x.foundation,\n        ip=x.host,\n        port=x.port,\n        priority=x.priority,\n        protocol=x.transport,\n        relatedAddress=x.related_address,\n        relatedPort=x.related_port,",
        "detail": "src.selkies.webrtc.rtcicetransport",
        "documentation": {}
    },
    {
        "label": "candidate_to_aioice",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcicetransport",
        "description": "src.selkies.webrtc.rtcicetransport",
        "peekOfCode": "def candidate_to_aioice(x: RTCIceCandidate) -> Candidate:\n    return Candidate(\n        component=x.component,\n        foundation=x.foundation,\n        host=x.ip,\n        port=x.port,\n        priority=x.priority,\n        related_address=x.relatedAddress,\n        related_port=x.relatedPort,\n        transport=x.protocol,",
        "detail": "src.selkies.webrtc.rtcicetransport",
        "documentation": {}
    },
    {
        "label": "connection_kwargs",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcicetransport",
        "description": "src.selkies.webrtc.rtcicetransport",
        "peekOfCode": "def connection_kwargs(servers: list[RTCIceServer]) -> dict[str, Any]:\n    kwargs: dict[str, Any] = {}\n    for server in servers:\n        if isinstance(server.urls, list):\n            uris = server.urls\n        else:\n            uris = [server.urls]\n        for uri in uris:\n            parsed = parse_stun_turn_uri(uri)\n            if parsed[\"scheme\"] == \"stun\":",
        "detail": "src.selkies.webrtc.rtcicetransport",
        "documentation": {}
    },
    {
        "label": "parse_stun_turn_uri",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcicetransport",
        "description": "src.selkies.webrtc.rtcicetransport",
        "peekOfCode": "def parse_stun_turn_uri(uri: str) -> dict[str, Any]:\n    if uri.startswith(\"stun\"):\n        match = STUN_REGEX.fullmatch(uri)\n    elif uri.startswith(\"turn\"):\n        match = TURN_REGEX.fullmatch(uri)\n    else:\n        raise ValueError(\"malformed uri: invalid scheme\")\n    if not match:\n        raise ValueError(\"malformed uri\")\n    # set port",
        "detail": "src.selkies.webrtc.rtcicetransport",
        "documentation": {}
    },
    {
        "label": "STUN_REGEX",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcicetransport",
        "description": "src.selkies.webrtc.rtcicetransport",
        "peekOfCode": "STUN_REGEX = re.compile(\n    r\"(?P<scheme>stun|stuns)\\:(?P<host>[^?:]+)(\\:(?P<port>[0-9]+?))?\"\n    r\"(\\?transport=(?P<transport>.*))?\"\n)\n# See https://datatracker.ietf.org/doc/html/rfc7065\nTURN_REGEX = re.compile(\n    r\"(?P<scheme>turn|turns)\\:(?P<host>[^?:]+)(\\:(?P<port>[0-9]+?))?\"\n    r\"(\\?transport=(?P<transport>.*))?\"\n)\nlogger = logging.getLogger(__name__)",
        "detail": "src.selkies.webrtc.rtcicetransport",
        "documentation": {}
    },
    {
        "label": "TURN_REGEX",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcicetransport",
        "description": "src.selkies.webrtc.rtcicetransport",
        "peekOfCode": "TURN_REGEX = re.compile(\n    r\"(?P<scheme>turn|turns)\\:(?P<host>[^?:]+)(\\:(?P<port>[0-9]+?))?\"\n    r\"(\\?transport=(?P<transport>.*))?\"\n)\nlogger = logging.getLogger(__name__)\n@dataclass\nclass RTCIceCandidate:\n    \"\"\"\n    The :class:`RTCIceCandidate` interface represents a candidate Interactive\n    Connectivity Establishment (ICE) configuration which may be used to",
        "detail": "src.selkies.webrtc.rtcicetransport",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcicetransport",
        "description": "src.selkies.webrtc.rtcicetransport",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@dataclass\nclass RTCIceCandidate:\n    \"\"\"\n    The :class:`RTCIceCandidate` interface represents a candidate Interactive\n    Connectivity Establishment (ICE) configuration which may be used to\n    establish an RTCPeerConnection.\n    \"\"\"\n    component: int\n    foundation: str",
        "detail": "src.selkies.webrtc.rtcicetransport",
        "documentation": {}
    },
    {
        "label": "RTCPeerConnection",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcpeerconnection",
        "description": "src.selkies.webrtc.rtcpeerconnection",
        "peekOfCode": "class RTCPeerConnection(AsyncIOEventEmitter):\n    \"\"\"\n    The :class:`RTCPeerConnection` interface represents a WebRTC connection\n    between the local computer and a remote peer.\n    :param configuration: An optional :class:`RTCConfiguration`.\n    \"\"\"\n    def __init__(self, configuration: Optional[RTCConfiguration] = None) -> None:\n        super().__init__()\n        self.__certificates = [RTCCertificate.generateCertificate()]\n        self.__cname = f\"{uuid.uuid4()}\"",
        "detail": "src.selkies.webrtc.rtcpeerconnection",
        "documentation": {}
    },
    {
        "label": "filter_preferred_codecs",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcpeerconnection",
        "description": "src.selkies.webrtc.rtcpeerconnection",
        "peekOfCode": "def filter_preferred_codecs(\n    codecs: list[RTCRtpCodecParameters], preferred: list[RTCRtpCodecCapability]\n) -> list[RTCRtpCodecParameters]:\n    if not preferred:\n        return codecs\n    rtx_codecs = list(filter(is_rtx, codecs))\n    rtx_enabled = next(filter(is_rtx, preferred), None) is not None\n    filtered = []\n    for pref in filter(lambda x: not is_rtx(x), preferred):\n        for codec in codecs:",
        "detail": "src.selkies.webrtc.rtcpeerconnection",
        "documentation": {}
    },
    {
        "label": "find_common_codecs",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcpeerconnection",
        "description": "src.selkies.webrtc.rtcpeerconnection",
        "peekOfCode": "def find_common_codecs(\n    local_codecs: list[RTCRtpCodecParameters],\n    remote_codecs: list[RTCRtpCodecParameters],\n) -> list[RTCRtpCodecParameters]:\n    common = []\n    common_base: dict[int, RTCRtpCodecParameters] = {}\n    for c in remote_codecs:\n        # for RTX, check we accepted the base codec\n        if is_rtx(c):\n            apt = c.parameters.get(\"apt\")",
        "detail": "src.selkies.webrtc.rtcpeerconnection",
        "documentation": {}
    },
    {
        "label": "find_common_header_extensions",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcpeerconnection",
        "description": "src.selkies.webrtc.rtcpeerconnection",
        "peekOfCode": "def find_common_header_extensions(\n    local_extensions: list[RTCRtpHeaderExtensionParameters],\n    remote_extensions: list[RTCRtpHeaderExtensionParameters],\n) -> list[RTCRtpHeaderExtensionParameters]:\n    common = []\n    for rx in remote_extensions:\n        for lx in local_extensions:\n            if lx.uri == rx.uri:\n                common.append(rx)\n    return common",
        "detail": "src.selkies.webrtc.rtcpeerconnection",
        "documentation": {}
    },
    {
        "label": "is_codec_compatible",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcpeerconnection",
        "description": "src.selkies.webrtc.rtcpeerconnection",
        "peekOfCode": "def is_codec_compatible(a: RTCRtpCodecParameters, b: RTCRtpCodecParameters) -> bool:\n    if a.mimeType.lower() != b.mimeType.lower() or a.clockRate != b.clockRate:\n        return False\n    if a.mimeType.lower() == \"video/h264\":\n        def packetization(c: RTCRtpCodecParameters) -> int:\n            return int(c.parameters.get(\"packetization-mode\", \"0\"))\n        def profile(c: RTCRtpCodecParameters) -> sdp.H264Profile:\n            # for backwards compatibility with older versions of WebRTC,\n            # consider the absence of a profile-level-id parameter to mean\n            # \"constrained baseline level 3.1\"",
        "detail": "src.selkies.webrtc.rtcpeerconnection",
        "documentation": {}
    },
    {
        "label": "add_transport_description",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcpeerconnection",
        "description": "src.selkies.webrtc.rtcpeerconnection",
        "peekOfCode": "def add_transport_description(\n    media: sdp.MediaDescription, dtlsTransport: RTCDtlsTransport\n) -> None:\n    # ice\n    iceTransport = dtlsTransport.transport\n    iceGatherer = iceTransport.iceGatherer\n    media.ice_candidates = iceGatherer.getLocalCandidates()\n    media.ice_candidates_complete = iceGatherer.state == \"completed\"\n    media.ice = iceGatherer.getLocalParameters()\n    if media.ice_candidates:",
        "detail": "src.selkies.webrtc.rtcpeerconnection",
        "documentation": {}
    },
    {
        "label": "allocate_mid",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcpeerconnection",
        "description": "src.selkies.webrtc.rtcpeerconnection",
        "peekOfCode": "def allocate_mid(mids: set[str]) -> str:\n    \"\"\"\n    Allocate a MID which has not been used yet.\n    \"\"\"\n    i = 0\n    while True:\n        mid = str(i)\n        if mid not in mids:\n            mids.add(mid)\n            return mid",
        "detail": "src.selkies.webrtc.rtcpeerconnection",
        "documentation": {}
    },
    {
        "label": "create_media_description_for_sctp",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcpeerconnection",
        "description": "src.selkies.webrtc.rtcpeerconnection",
        "peekOfCode": "def create_media_description_for_sctp(\n    sctp: RTCSctpTransport, legacy: bool, mid: str\n) -> sdp.MediaDescription:\n    if legacy:\n        media = sdp.MediaDescription(\n            kind=\"application\", port=DISCARD_PORT, profile=\"DTLS/SCTP\", fmt=[sctp.port]\n        )\n        media.sctpmap[sctp.port] = f\"webrtc-datachannel {sctp._outbound_streams_count}\"\n    else:\n        media = sdp.MediaDescription(",
        "detail": "src.selkies.webrtc.rtcpeerconnection",
        "documentation": {}
    },
    {
        "label": "create_media_description_for_transceiver",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcpeerconnection",
        "description": "src.selkies.webrtc.rtcpeerconnection",
        "peekOfCode": "def create_media_description_for_transceiver(\n    transceiver: RTCRtpTransceiver, cname: str, direction: str, mid: str\n) -> sdp.MediaDescription:\n    media = sdp.MediaDescription(\n        kind=transceiver.kind,\n        port=DISCARD_PORT,\n        profile=\"UDP/TLS/RTP/SAVPF\",\n        fmt=[c.payloadType for c in transceiver._codecs],\n    )\n    media.direction = direction",
        "detail": "src.selkies.webrtc.rtcpeerconnection",
        "documentation": {}
    },
    {
        "label": "and_direction",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcpeerconnection",
        "description": "src.selkies.webrtc.rtcpeerconnection",
        "peekOfCode": "def and_direction(a: str, b: str) -> str:\n    return sdp.DIRECTIONS[sdp.DIRECTIONS.index(a) & sdp.DIRECTIONS.index(b)]\ndef or_direction(a: str, b: str) -> str:\n    return sdp.DIRECTIONS[sdp.DIRECTIONS.index(a) | sdp.DIRECTIONS.index(b)]\ndef reverse_direction(direction: str) -> str:\n    if direction == \"sendonly\":\n        return \"recvonly\"\n    elif direction == \"recvonly\":\n        return \"sendonly\"\n    return direction",
        "detail": "src.selkies.webrtc.rtcpeerconnection",
        "documentation": {}
    },
    {
        "label": "or_direction",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcpeerconnection",
        "description": "src.selkies.webrtc.rtcpeerconnection",
        "peekOfCode": "def or_direction(a: str, b: str) -> str:\n    return sdp.DIRECTIONS[sdp.DIRECTIONS.index(a) | sdp.DIRECTIONS.index(b)]\ndef reverse_direction(direction: str) -> str:\n    if direction == \"sendonly\":\n        return \"recvonly\"\n    elif direction == \"recvonly\":\n        return \"sendonly\"\n    return direction\ndef wrap_session_description(\n    session_description: Optional[sdp.SessionDescription],",
        "detail": "src.selkies.webrtc.rtcpeerconnection",
        "documentation": {}
    },
    {
        "label": "reverse_direction",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcpeerconnection",
        "description": "src.selkies.webrtc.rtcpeerconnection",
        "peekOfCode": "def reverse_direction(direction: str) -> str:\n    if direction == \"sendonly\":\n        return \"recvonly\"\n    elif direction == \"recvonly\":\n        return \"sendonly\"\n    return direction\ndef wrap_session_description(\n    session_description: Optional[sdp.SessionDescription],\n) -> Optional[RTCSessionDescription]:\n    if session_description is not None:",
        "detail": "src.selkies.webrtc.rtcpeerconnection",
        "documentation": {}
    },
    {
        "label": "wrap_session_description",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcpeerconnection",
        "description": "src.selkies.webrtc.rtcpeerconnection",
        "peekOfCode": "def wrap_session_description(\n    session_description: Optional[sdp.SessionDescription],\n) -> Optional[RTCSessionDescription]:\n    if session_description is not None:\n        return RTCSessionDescription(\n            sdp=str(session_description), type=session_description.type\n        )\n    return None\nclass RTCPeerConnection(AsyncIOEventEmitter):\n    \"\"\"",
        "detail": "src.selkies.webrtc.rtcpeerconnection",
        "documentation": {}
    },
    {
        "label": "DISCARD_HOST",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcpeerconnection",
        "description": "src.selkies.webrtc.rtcpeerconnection",
        "peekOfCode": "DISCARD_HOST = \"0.0.0.0\"\nDISCARD_PORT = 9\nMEDIA_KINDS = [\"audio\", \"video\"]\nlogger = logging.getLogger(__name__)\ndef filter_preferred_codecs(\n    codecs: list[RTCRtpCodecParameters], preferred: list[RTCRtpCodecCapability]\n) -> list[RTCRtpCodecParameters]:\n    if not preferred:\n        return codecs\n    rtx_codecs = list(filter(is_rtx, codecs))",
        "detail": "src.selkies.webrtc.rtcpeerconnection",
        "documentation": {}
    },
    {
        "label": "DISCARD_PORT",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcpeerconnection",
        "description": "src.selkies.webrtc.rtcpeerconnection",
        "peekOfCode": "DISCARD_PORT = 9\nMEDIA_KINDS = [\"audio\", \"video\"]\nlogger = logging.getLogger(__name__)\ndef filter_preferred_codecs(\n    codecs: list[RTCRtpCodecParameters], preferred: list[RTCRtpCodecCapability]\n) -> list[RTCRtpCodecParameters]:\n    if not preferred:\n        return codecs\n    rtx_codecs = list(filter(is_rtx, codecs))\n    rtx_enabled = next(filter(is_rtx, preferred), None) is not None",
        "detail": "src.selkies.webrtc.rtcpeerconnection",
        "documentation": {}
    },
    {
        "label": "MEDIA_KINDS",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcpeerconnection",
        "description": "src.selkies.webrtc.rtcpeerconnection",
        "peekOfCode": "MEDIA_KINDS = [\"audio\", \"video\"]\nlogger = logging.getLogger(__name__)\ndef filter_preferred_codecs(\n    codecs: list[RTCRtpCodecParameters], preferred: list[RTCRtpCodecCapability]\n) -> list[RTCRtpCodecParameters]:\n    if not preferred:\n        return codecs\n    rtx_codecs = list(filter(is_rtx, codecs))\n    rtx_enabled = next(filter(is_rtx, preferred), None) is not None\n    filtered = []",
        "detail": "src.selkies.webrtc.rtcpeerconnection",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcpeerconnection",
        "description": "src.selkies.webrtc.rtcpeerconnection",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef filter_preferred_codecs(\n    codecs: list[RTCRtpCodecParameters], preferred: list[RTCRtpCodecCapability]\n) -> list[RTCRtpCodecParameters]:\n    if not preferred:\n        return codecs\n    rtx_codecs = list(filter(is_rtx, codecs))\n    rtx_enabled = next(filter(is_rtx, preferred), None) is not None\n    filtered = []\n    for pref in filter(lambda x: not is_rtx(x), preferred):",
        "detail": "src.selkies.webrtc.rtcpeerconnection",
        "documentation": {}
    },
    {
        "label": "RTCRtpCodecCapability",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpparameters",
        "description": "src.selkies.webrtc.rtcrtpparameters",
        "peekOfCode": "class RTCRtpCodecCapability:\n    \"\"\"\n    The :class:`RTCRtpCodecCapability` dictionary provides information on\n    codec capabilities.\n    \"\"\"\n    mimeType: str\n    \"The codec MIME media type/subtype, for instance `'audio/PCMU'`.\"\n    clockRate: int\n    \"The codec clock rate expressed in Hertz.\"\n    channels: Optional[int] = None",
        "detail": "src.selkies.webrtc.rtcrtpparameters",
        "documentation": {}
    },
    {
        "label": "RTCRtpCodecParameters",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpparameters",
        "description": "src.selkies.webrtc.rtcrtpparameters",
        "peekOfCode": "class RTCRtpCodecParameters:\n    \"\"\"\n    The :class:`RTCRtpCodecParameters` dictionary provides information on\n    codec settings.\n    \"\"\"\n    mimeType: str\n    \"The codec MIME media type/subtype, for instance `'audio/PCMU'`.\"\n    clockRate: int\n    \"The codec clock rate expressed in Hertz.\"\n    channels: Optional[int] = None",
        "detail": "src.selkies.webrtc.rtcrtpparameters",
        "documentation": {}
    },
    {
        "label": "RTCRtpRtxParameters",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpparameters",
        "description": "src.selkies.webrtc.rtcrtpparameters",
        "peekOfCode": "class RTCRtpRtxParameters:\n    ssrc: int\n@dataclass\nclass RTCRtpCodingParameters:\n    ssrc: int\n    payloadType: int\n    rtx: Optional[RTCRtpRtxParameters] = None\nclass RTCRtpDecodingParameters(RTCRtpCodingParameters):\n    pass\nclass RTCRtpEncodingParameters(RTCRtpCodingParameters):",
        "detail": "src.selkies.webrtc.rtcrtpparameters",
        "documentation": {}
    },
    {
        "label": "RTCRtpCodingParameters",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpparameters",
        "description": "src.selkies.webrtc.rtcrtpparameters",
        "peekOfCode": "class RTCRtpCodingParameters:\n    ssrc: int\n    payloadType: int\n    rtx: Optional[RTCRtpRtxParameters] = None\nclass RTCRtpDecodingParameters(RTCRtpCodingParameters):\n    pass\nclass RTCRtpEncodingParameters(RTCRtpCodingParameters):\n    pass\n@dataclass\nclass RTCRtpHeaderExtensionCapability:",
        "detail": "src.selkies.webrtc.rtcrtpparameters",
        "documentation": {}
    },
    {
        "label": "RTCRtpDecodingParameters",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpparameters",
        "description": "src.selkies.webrtc.rtcrtpparameters",
        "peekOfCode": "class RTCRtpDecodingParameters(RTCRtpCodingParameters):\n    pass\nclass RTCRtpEncodingParameters(RTCRtpCodingParameters):\n    pass\n@dataclass\nclass RTCRtpHeaderExtensionCapability:\n    \"\"\"\n    The :class:`RTCRtpHeaderExtensionCapability` dictionary provides information\n    on a supported header extension.\n    \"\"\"",
        "detail": "src.selkies.webrtc.rtcrtpparameters",
        "documentation": {}
    },
    {
        "label": "RTCRtpEncodingParameters",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpparameters",
        "description": "src.selkies.webrtc.rtcrtpparameters",
        "peekOfCode": "class RTCRtpEncodingParameters(RTCRtpCodingParameters):\n    pass\n@dataclass\nclass RTCRtpHeaderExtensionCapability:\n    \"\"\"\n    The :class:`RTCRtpHeaderExtensionCapability` dictionary provides information\n    on a supported header extension.\n    \"\"\"\n    uri: str\n    \"The URI of the RTP header extension.\"",
        "detail": "src.selkies.webrtc.rtcrtpparameters",
        "documentation": {}
    },
    {
        "label": "RTCRtpHeaderExtensionCapability",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpparameters",
        "description": "src.selkies.webrtc.rtcrtpparameters",
        "peekOfCode": "class RTCRtpHeaderExtensionCapability:\n    \"\"\"\n    The :class:`RTCRtpHeaderExtensionCapability` dictionary provides information\n    on a supported header extension.\n    \"\"\"\n    uri: str\n    \"The URI of the RTP header extension.\"\n@dataclass\nclass RTCRtpHeaderExtensionParameters:\n    \"\"\"",
        "detail": "src.selkies.webrtc.rtcrtpparameters",
        "documentation": {}
    },
    {
        "label": "RTCRtpHeaderExtensionParameters",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpparameters",
        "description": "src.selkies.webrtc.rtcrtpparameters",
        "peekOfCode": "class RTCRtpHeaderExtensionParameters:\n    \"\"\"\n    The :class:`RTCRtpHeaderExtensionParameters` dictionary enables a header\n    extension to be configured for use within an :class:`RTCRtpSender` or\n    :class:`RTCRtpReceiver`.\n    \"\"\"\n    id: int\n    \"The value that goes in the packet.\"\n    uri: str\n    \"The URI of the RTP header extension.\"",
        "detail": "src.selkies.webrtc.rtcrtpparameters",
        "documentation": {}
    },
    {
        "label": "RTCRtpCapabilities",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpparameters",
        "description": "src.selkies.webrtc.rtcrtpparameters",
        "peekOfCode": "class RTCRtpCapabilities:\n    \"\"\"\n    The :class:`RTCRtpCapabilities` dictionary provides information about\n    support codecs and header extensions.\n    \"\"\"\n    codecs: list[RTCRtpCodecCapability] = field(default_factory=list)\n    \"A list of :class:`RTCRtpCodecCapability`.\"\n    headerExtensions: list[RTCRtpHeaderExtensionCapability] = field(\n        default_factory=list\n    )",
        "detail": "src.selkies.webrtc.rtcrtpparameters",
        "documentation": {}
    },
    {
        "label": "RTCRtcpFeedback",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpparameters",
        "description": "src.selkies.webrtc.rtcrtpparameters",
        "peekOfCode": "class RTCRtcpFeedback:\n    \"\"\"\n    The :class:`RTCRtcpFeedback` dictionary provides information on RTCP feedback\n    messages.\n    \"\"\"\n    type: str\n    parameter: Optional[str] = None\n@dataclass\nclass RTCRtcpParameters:\n    \"\"\"",
        "detail": "src.selkies.webrtc.rtcrtpparameters",
        "documentation": {}
    },
    {
        "label": "RTCRtcpParameters",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpparameters",
        "description": "src.selkies.webrtc.rtcrtpparameters",
        "peekOfCode": "class RTCRtcpParameters:\n    \"\"\"\n    The :class:`RTCRtcpParameters` dictionary provides information on RTCP settings.\n    \"\"\"\n    cname: Optional[str] = None\n    \"The Canonical Name (CNAME) used by RTCP.\"\n    mux: bool = False\n    \"Whether RTP and RTCP are multiplexed.\"\n    ssrc: Optional[int] = None\n    \"The Synchronization Source identifier.\"",
        "detail": "src.selkies.webrtc.rtcrtpparameters",
        "documentation": {}
    },
    {
        "label": "RTCRtpParameters",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpparameters",
        "description": "src.selkies.webrtc.rtcrtpparameters",
        "peekOfCode": "class RTCRtpParameters:\n    \"\"\"\n    The :class:`RTCRtpParameters` dictionary describes the configuration of\n    an :class:`RTCRtpReceiver` or an :class:`RTCRtpSender`.\n    \"\"\"\n    codecs: list[RTCRtpCodecParameters] = field(default_factory=list)\n    \"A list of :class:`RTCRtpCodecParameters` to send or receive.\"\n    headerExtensions: list[RTCRtpHeaderExtensionParameters] = field(\n        default_factory=list\n    )",
        "detail": "src.selkies.webrtc.rtcrtpparameters",
        "documentation": {}
    },
    {
        "label": "RTCRtpReceiveParameters",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpparameters",
        "description": "src.selkies.webrtc.rtcrtpparameters",
        "peekOfCode": "class RTCRtpReceiveParameters(RTCRtpParameters):\n    encodings: list[RTCRtpDecodingParameters] = field(default_factory=list)\n@dataclass\nclass RTCRtpSendParameters(RTCRtpParameters):\n    encodings: list[RTCRtpEncodingParameters] = field(default_factory=list)",
        "detail": "src.selkies.webrtc.rtcrtpparameters",
        "documentation": {}
    },
    {
        "label": "RTCRtpSendParameters",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpparameters",
        "description": "src.selkies.webrtc.rtcrtpparameters",
        "peekOfCode": "class RTCRtpSendParameters(RTCRtpParameters):\n    encodings: list[RTCRtpEncodingParameters] = field(default_factory=list)",
        "detail": "src.selkies.webrtc.rtcrtpparameters",
        "documentation": {}
    },
    {
        "label": "ParametersDict",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcrtpparameters",
        "description": "src.selkies.webrtc.rtcrtpparameters",
        "peekOfCode": "ParametersDict = dict[str, Union[int, str, None]]\n@dataclass\nclass RTCRtpCodecCapability:\n    \"\"\"\n    The :class:`RTCRtpCodecCapability` dictionary provides information on\n    codec capabilities.\n    \"\"\"\n    mimeType: str\n    \"The codec MIME media type/subtype, for instance `'audio/PCMU'`.\"\n    clockRate: int",
        "detail": "src.selkies.webrtc.rtcrtpparameters",
        "documentation": {}
    },
    {
        "label": "NackGenerator",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpreceiver",
        "description": "src.selkies.webrtc.rtcrtpreceiver",
        "peekOfCode": "class NackGenerator:\n    def __init__(self) -> None:\n        self.max_seq: Optional[int] = None\n        self.missing: set[int] = set()\n    def add(self, packet: RtpPacket) -> bool:\n        \"\"\"\n        Mark a new packet as received, and deduce missing packets.\n        \"\"\"\n        missed = False\n        if self.max_seq is None:",
        "detail": "src.selkies.webrtc.rtcrtpreceiver",
        "documentation": {}
    },
    {
        "label": "StreamStatistics",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpreceiver",
        "description": "src.selkies.webrtc.rtcrtpreceiver",
        "peekOfCode": "class StreamStatistics:\n    def __init__(self, clockrate: int) -> None:\n        self.base_seq: Optional[int] = None\n        self.max_seq: Optional[int] = None\n        self.cycles = 0\n        self.packets_received = 0\n        # jitter\n        self._clockrate = clockrate\n        self._jitter_q4 = 0\n        self._last_arrival: Optional[int] = None",
        "detail": "src.selkies.webrtc.rtcrtpreceiver",
        "documentation": {}
    },
    {
        "label": "RemoteStreamTrack",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpreceiver",
        "description": "src.selkies.webrtc.rtcrtpreceiver",
        "peekOfCode": "class RemoteStreamTrack(MediaStreamTrack):\n    def __init__(self, kind: str, id: Optional[str] = None) -> None:\n        super().__init__()\n        self.kind = kind\n        if id is not None:\n            self._id = id\n        self._queue: asyncio.Queue = asyncio.Queue()\n    async def recv(self) -> Frame:\n        \"\"\"\n        Receive the next frame.",
        "detail": "src.selkies.webrtc.rtcrtpreceiver",
        "documentation": {}
    },
    {
        "label": "TimestampMapper",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpreceiver",
        "description": "src.selkies.webrtc.rtcrtpreceiver",
        "peekOfCode": "class TimestampMapper:\n    def __init__(self) -> None:\n        self._last: Optional[int] = None\n        self._origin: Optional[int] = None\n    def map(self, timestamp: int) -> int:\n        if self._origin is None:\n            # first timestamp\n            self._origin = timestamp\n        elif timestamp < self._last:\n            # RTP timestamp wrapped",
        "detail": "src.selkies.webrtc.rtcrtpreceiver",
        "documentation": {}
    },
    {
        "label": "RTCRtpContributingSource",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpreceiver",
        "description": "src.selkies.webrtc.rtcrtpreceiver",
        "peekOfCode": "class RTCRtpContributingSource:\n    \"\"\"\n    The :class:`RTCRtpContributingSource` dictionary contains information about\n    a contributing source (CSRC).\n    \"\"\"\n    timestamp: datetime.datetime\n    \"The timestamp associated with this source.\"\n    source: int\n    \"The CSRC identifier associated with this source.\"\n@dataclass",
        "detail": "src.selkies.webrtc.rtcrtpreceiver",
        "documentation": {}
    },
    {
        "label": "RTCRtpSynchronizationSource",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpreceiver",
        "description": "src.selkies.webrtc.rtcrtpreceiver",
        "peekOfCode": "class RTCRtpSynchronizationSource:\n    \"\"\"\n    The :class:`RTCRtpSynchronizationSource` dictionary contains information about\n    a synchronization source (SSRC).\n    \"\"\"\n    timestamp: datetime.datetime\n    \"The timestamp associated with this source.\"\n    source: int\n    \"The SSRC identifier associated with this source.\"\nclass RTCRtpReceiver:",
        "detail": "src.selkies.webrtc.rtcrtpreceiver",
        "documentation": {}
    },
    {
        "label": "RTCRtpReceiver",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpreceiver",
        "description": "src.selkies.webrtc.rtcrtpreceiver",
        "peekOfCode": "class RTCRtpReceiver:\n    \"\"\"\n    The :class:`RTCRtpReceiver` interface manages the reception and decoding\n    of data for a :class:`MediaStreamTrack`.\n    :param kind: The kind of media (`'audio'` or `'video'`).\n    :param transport: An :class:`RTCDtlsTransport`.\n    \"\"\"\n    def __init__(self, kind: str, transport: RTCDtlsTransport) -> None:\n        if transport.state == \"closed\":\n            raise InvalidStateError",
        "detail": "src.selkies.webrtc.rtcrtpreceiver",
        "documentation": {}
    },
    {
        "label": "decoder_worker",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcrtpreceiver",
        "description": "src.selkies.webrtc.rtcrtpreceiver",
        "peekOfCode": "def decoder_worker(\n    loop: asyncio.AbstractEventLoop, input_q: queue.Queue, output_q: asyncio.Queue\n) -> None:\n    codec_name = None\n    decoder = None\n    while True:\n        task = input_q.get()\n        if task is None:\n            # inform the track that is has ended\n            asyncio.run_coroutine_threadsafe(output_q.put(None), loop)",
        "detail": "src.selkies.webrtc.rtcrtpreceiver",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcrtpreceiver",
        "description": "src.selkies.webrtc.rtcrtpreceiver",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef decoder_worker(\n    loop: asyncio.AbstractEventLoop, input_q: queue.Queue, output_q: asyncio.Queue\n) -> None:\n    codec_name = None\n    decoder = None\n    while True:\n        task = input_q.get()\n        if task is None:\n            # inform the track that is has ended",
        "detail": "src.selkies.webrtc.rtcrtpreceiver",
        "documentation": {}
    },
    {
        "label": "RTCEncodedFrame",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpsender",
        "description": "src.selkies.webrtc.rtcrtpsender",
        "peekOfCode": "class RTCEncodedFrame:\n    def __init__(self, payloads: list[bytes], timestamp: int, audio_level: int):\n        self.payloads = payloads\n        self.timestamp = timestamp\n        self.audio_level = audio_level\nclass RTCRtpSender:\n    \"\"\"\n    The :class:`RTCRtpSender` interface provides the ability to control and\n    obtain details about how a particular :class:`MediaStreamTrack` is encoded\n    and sent to a remote peer.",
        "detail": "src.selkies.webrtc.rtcrtpsender",
        "documentation": {}
    },
    {
        "label": "RTCRtpSender",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtpsender",
        "description": "src.selkies.webrtc.rtcrtpsender",
        "peekOfCode": "class RTCRtpSender:\n    \"\"\"\n    The :class:`RTCRtpSender` interface provides the ability to control and\n    obtain details about how a particular :class:`MediaStreamTrack` is encoded\n    and sent to a remote peer.\n    :param trackOrKind: Either a :class:`MediaStreamTrack` instance or a\n                         media kind (`'audio'` or `'video'`).\n    :param transport: An :class:`RTCDtlsTransport`.\n    \"\"\"\n    def __init__(",
        "detail": "src.selkies.webrtc.rtcrtpsender",
        "documentation": {}
    },
    {
        "label": "random_sequence_number",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcrtpsender",
        "description": "src.selkies.webrtc.rtcrtpsender",
        "peekOfCode": "def random_sequence_number() -> int:\n    \"\"\"\n    Generate a random RTP sequence number.\n    The sequence number is chosen in the lower half of the allowed range in\n    order to avoid wraparounds which break SRTP decryption.\n    See:\n    https://chromiumdash.appspot.com/commit/13b327b05fa3788b4daa9c3463e13282824cb320\n    \"\"\"\n    return random16() % 32768\nclass RTCEncodedFrame:",
        "detail": "src.selkies.webrtc.rtcrtpsender",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcrtpsender",
        "description": "src.selkies.webrtc.rtcrtpsender",
        "peekOfCode": "logger = logging.getLogger(__name__)\nRTT_ALPHA = 0.85\ndef random_sequence_number() -> int:\n    \"\"\"\n    Generate a random RTP sequence number.\n    The sequence number is chosen in the lower half of the allowed range in\n    order to avoid wraparounds which break SRTP decryption.\n    See:\n    https://chromiumdash.appspot.com/commit/13b327b05fa3788b4daa9c3463e13282824cb320\n    \"\"\"",
        "detail": "src.selkies.webrtc.rtcrtpsender",
        "documentation": {}
    },
    {
        "label": "RTT_ALPHA",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcrtpsender",
        "description": "src.selkies.webrtc.rtcrtpsender",
        "peekOfCode": "RTT_ALPHA = 0.85\ndef random_sequence_number() -> int:\n    \"\"\"\n    Generate a random RTP sequence number.\n    The sequence number is chosen in the lower half of the allowed range in\n    order to avoid wraparounds which break SRTP decryption.\n    See:\n    https://chromiumdash.appspot.com/commit/13b327b05fa3788b4daa9c3463e13282824cb320\n    \"\"\"\n    return random16() % 32768",
        "detail": "src.selkies.webrtc.rtcrtpsender",
        "documentation": {}
    },
    {
        "label": "RTCRtpTransceiver",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcrtptransceiver",
        "description": "src.selkies.webrtc.rtcrtptransceiver",
        "peekOfCode": "class RTCRtpTransceiver:\n    \"\"\"\n    The RTCRtpTransceiver interface describes a permanent pairing of an\n    :class:`RTCRtpSender` and an :class:`RTCRtpReceiver`, along with some\n    shared state.\n    \"\"\"\n    def __init__(\n        self,\n        kind: str,\n        receiver: RTCRtpReceiver,",
        "detail": "src.selkies.webrtc.rtcrtptransceiver",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcrtptransceiver",
        "description": "src.selkies.webrtc.rtcrtptransceiver",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass RTCRtpTransceiver:\n    \"\"\"\n    The RTCRtpTransceiver interface describes a permanent pairing of an\n    :class:`RTCRtpSender` and an :class:`RTCRtpReceiver`, along with some\n    shared state.\n    \"\"\"\n    def __init__(\n        self,\n        kind: str,",
        "detail": "src.selkies.webrtc.rtcrtptransceiver",
        "documentation": {}
    },
    {
        "label": "Chunk",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class Chunk:\n    type = -1\n    def __init__(self, flags: int = 0, body: bytes = b\"\") -> None:\n        self.flags = flags\n        self.body = body\n    def __bytes__(self) -> bytes:\n        body = self.body\n        data = pack(\"!BBH\", self.type, self.flags, len(body) + 4) + body\n        data += b\"\\x00\" * padl(len(body))\n        return data",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "BaseParamsChunk",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class BaseParamsChunk(Chunk):\n    def __init__(self, flags: int = 0, body: Optional[bytes] = None) -> None:\n        self.flags = flags\n        if body:\n            self.params = decode_params(body)\n        else:\n            self.params = []\n    @property\n    def body(self) -> bytes:  # type: ignore\n        return encode_params(self.params)",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "AbortChunk",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class AbortChunk(BaseParamsChunk):\n    type = 6\nclass CookieAckChunk(Chunk):\n    type = 11\nclass CookieEchoChunk(Chunk):\n    type = 10\nclass DataChunk(Chunk):\n    type = 0\n    _acked: bool\n    _abandoned: bool",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "CookieAckChunk",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class CookieAckChunk(Chunk):\n    type = 11\nclass CookieEchoChunk(Chunk):\n    type = 10\nclass DataChunk(Chunk):\n    type = 0\n    _acked: bool\n    _abandoned: bool\n    _book_size: int\n    _expiry: Optional[float]",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "CookieEchoChunk",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class CookieEchoChunk(Chunk):\n    type = 10\nclass DataChunk(Chunk):\n    type = 0\n    _acked: bool\n    _abandoned: bool\n    _book_size: int\n    _expiry: Optional[float]\n    _max_retransmits: Optional[int]\n    _misses: int",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "DataChunk",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class DataChunk(Chunk):\n    type = 0\n    _acked: bool\n    _abandoned: bool\n    _book_size: int\n    _expiry: Optional[float]\n    _max_retransmits: Optional[int]\n    _misses: int\n    _retransmit: bool\n    _sent_count: int",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "ErrorChunk",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class ErrorChunk(BaseParamsChunk):\n    type = 9\nclass ForwardTsnChunk(Chunk):\n    type = 192\n    def __init__(self, flags: int = 0, body: Optional[bytes] = None) -> None:\n        self.flags = flags\n        self.streams: list[tuple[int, int]] = []\n        if body:\n            self.cumulative_tsn = unpack_from(\"!L\", body, 0)[0]\n            pos = 4",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "ForwardTsnChunk",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class ForwardTsnChunk(Chunk):\n    type = 192\n    def __init__(self, flags: int = 0, body: Optional[bytes] = None) -> None:\n        self.flags = flags\n        self.streams: list[tuple[int, int]] = []\n        if body:\n            self.cumulative_tsn = unpack_from(\"!L\", body, 0)[0]\n            pos = 4\n            while pos < len(body):\n                self.streams.append(",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "HeartbeatChunk",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class HeartbeatChunk(BaseParamsChunk):\n    type = 4\nclass HeartbeatAckChunk(BaseParamsChunk):\n    type = 5\nclass BaseInitChunk(Chunk):\n    def __init__(self, flags: int = 0, body: Optional[bytes] = None) -> None:\n        self.flags = flags\n        if body:\n            (\n                self.initiate_tag,",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "HeartbeatAckChunk",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class HeartbeatAckChunk(BaseParamsChunk):\n    type = 5\nclass BaseInitChunk(Chunk):\n    def __init__(self, flags: int = 0, body: Optional[bytes] = None) -> None:\n        self.flags = flags\n        if body:\n            (\n                self.initiate_tag,\n                self.advertised_rwnd,\n                self.outbound_streams,",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "BaseInitChunk",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class BaseInitChunk(Chunk):\n    def __init__(self, flags: int = 0, body: Optional[bytes] = None) -> None:\n        self.flags = flags\n        if body:\n            (\n                self.initiate_tag,\n                self.advertised_rwnd,\n                self.outbound_streams,\n                self.inbound_streams,\n                self.initial_tsn,",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "InitChunk",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class InitChunk(BaseInitChunk):\n    type = 1\nclass InitAckChunk(BaseInitChunk):\n    type = 2\nclass ReconfigChunk(BaseParamsChunk):\n    type = 130\nclass SackChunk(Chunk):\n    type = 3\n    def __init__(self, flags: int = 0, body: Optional[bytes] = None) -> None:\n        self.flags = flags",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "InitAckChunk",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class InitAckChunk(BaseInitChunk):\n    type = 2\nclass ReconfigChunk(BaseParamsChunk):\n    type = 130\nclass SackChunk(Chunk):\n    type = 3\n    def __init__(self, flags: int = 0, body: Optional[bytes] = None) -> None:\n        self.flags = flags\n        self.gaps = []\n        self.duplicates = []",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "ReconfigChunk",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class ReconfigChunk(BaseParamsChunk):\n    type = 130\nclass SackChunk(Chunk):\n    type = 3\n    def __init__(self, flags: int = 0, body: Optional[bytes] = None) -> None:\n        self.flags = flags\n        self.gaps = []\n        self.duplicates = []\n        if body:\n            (",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SackChunk",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class SackChunk(Chunk):\n    type = 3\n    def __init__(self, flags: int = 0, body: Optional[bytes] = None) -> None:\n        self.flags = flags\n        self.gaps = []\n        self.duplicates = []\n        if body:\n            (\n                self.cumulative_tsn,\n                self.advertised_rwnd,",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "ShutdownChunk",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class ShutdownChunk(Chunk):\n    type = 7\n    def __init__(self, flags: int = 0, body: Optional[bytes] = None) -> None:\n        self.flags = flags\n        if body:\n            self.cumulative_tsn = unpack_from(\"!L\", body)[0]\n        else:\n            self.cumulative_tsn = 0\n    @property\n    def body(self) -> bytes:  # type: ignore",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "ShutdownAckChunk",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class ShutdownAckChunk(Chunk):\n    type = 8\nclass ShutdownCompleteChunk(Chunk):\n    type = 14\nCHUNK_CLASSES = [\n    DataChunk,\n    InitChunk,\n    InitAckChunk,\n    SackChunk,\n    HeartbeatChunk,",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "ShutdownCompleteChunk",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class ShutdownCompleteChunk(Chunk):\n    type = 14\nCHUNK_CLASSES = [\n    DataChunk,\n    InitChunk,\n    InitAckChunk,\n    SackChunk,\n    HeartbeatChunk,\n    HeartbeatAckChunk,\n    AbortChunk,",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "StreamResetOutgoingParam",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class StreamResetOutgoingParam:\n    request_sequence: int\n    response_sequence: int\n    last_tsn: int\n    streams: list[int] = field(default_factory=list)\n    def __bytes__(self) -> bytes:\n        data = pack(\n            \"!LLL\", self.request_sequence, self.response_sequence, self.last_tsn\n        )\n        for stream in self.streams:",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "StreamAddOutgoingParam",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class StreamAddOutgoingParam:\n    request_sequence: int\n    new_streams: int\n    def __bytes__(self) -> bytes:\n        data = pack(\"!LHH\", self.request_sequence, self.new_streams, 0)\n        return data\n    @classmethod\n    def parse(cls, data: bytes) -> \"StreamAddOutgoingParam\":\n        request_sequence, new_streams, reserved = unpack_from(\"!LHH\", data)\n        return cls(request_sequence=request_sequence, new_streams=new_streams)",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "StreamResetResponseParam",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class StreamResetResponseParam:\n    response_sequence: int\n    result: int\n    def __bytes__(self) -> bytes:\n        return pack(\"!LL\", self.response_sequence, self.result)\n    @classmethod\n    def parse(cls, data: bytes) -> \"StreamResetResponseParam\":\n        response_sequence, result = unpack_from(\"!LL\", data)\n        return cls(response_sequence=response_sequence, result=result)\nRECONFIG_PARAM_TYPES: dict[",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "InboundStream",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class InboundStream:\n    def __init__(self) -> None:\n        self.reassembly: list[DataChunk] = []\n        self.sequence_number = 0\n    def add_chunk(self, chunk: DataChunk) -> None:\n        if not self.reassembly or uint32_gt(chunk.tsn, self.reassembly[-1].tsn):\n            self.reassembly.append(chunk)\n            return\n        for i, rchunk in enumerate(self.reassembly):\n            # should never happen, the chunk should have been eliminated",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "RTCSctpCapabilities",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class RTCSctpCapabilities:\n    \"\"\"\n    The :class:`RTCSctpCapabilities` dictionary provides information about the\n    capabilities of the :class:`RTCSctpTransport`.\n    \"\"\"\n    maxMessageSize: int\n    \"\"\"\n    The maximum size of data that the implementation can send or\n    0 if the implementation can handle messages of any size.\n    \"\"\"",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "RTCSctpTransport",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "class RTCSctpTransport(AsyncIOEventEmitter):\n    \"\"\"\n    The :class:`RTCSctpTransport` interface includes information relating to\n    Stream Control Transmission Protocol (SCTP) transport.\n    :param transport: An :class:`RTCDtlsTransport`.\n    \"\"\"\n    def __init__(self, transport: RTCDtlsTransport, port: int = 5000) -> None:\n        if transport.state == \"closed\":\n            raise InvalidStateError\n        super().__init__()",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "chunk_type",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "def chunk_type(chunk: \"Chunk\") -> str:\n    return chunk.__class__.__name__\ndef decode_params(body: bytes) -> list[tuple[int, bytes]]:\n    params = []\n    pos = 0\n    while pos <= len(body) - 4:\n        param_type, param_length = unpack_from(\"!HH\", body, pos)\n        params.append((param_type, body[pos + 4 : pos + param_length]))\n        pos += param_length + padl(param_length)\n    return params",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "decode_params",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "def decode_params(body: bytes) -> list[tuple[int, bytes]]:\n    params = []\n    pos = 0\n    while pos <= len(body) - 4:\n        param_type, param_length = unpack_from(\"!HH\", body, pos)\n        params.append((param_type, body[pos + 4 : pos + param_length]))\n        pos += param_length + padl(param_length)\n    return params\ndef encode_params(params: list[tuple[int, bytes]]) -> bytes:\n    body = b\"\"",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "encode_params",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "def encode_params(params: list[tuple[int, bytes]]) -> bytes:\n    body = b\"\"\n    padding = b\"\"\n    for param_type, param_value in params:\n        param_length = len(param_value) + 4\n        body += padding\n        body += pack(\"!HH\", param_type, param_length) + param_value\n        padding = b\"\\x00\" * padl(param_length)\n    return body\ndef padl(length: int) -> int:",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "padl",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "def padl(length: int) -> int:\n    m = length % 4\n    return 4 - m if m else 0\ndef tsn_minus_one(a: int) -> int:\n    return (a - 1) % SCTP_TSN_MODULO\ndef tsn_plus_one(a: int) -> int:\n    return (a + 1) % SCTP_TSN_MODULO\nclass Chunk:\n    type = -1\n    def __init__(self, flags: int = 0, body: bytes = b\"\") -> None:",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "tsn_minus_one",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "def tsn_minus_one(a: int) -> int:\n    return (a - 1) % SCTP_TSN_MODULO\ndef tsn_plus_one(a: int) -> int:\n    return (a + 1) % SCTP_TSN_MODULO\nclass Chunk:\n    type = -1\n    def __init__(self, flags: int = 0, body: bytes = b\"\") -> None:\n        self.flags = flags\n        self.body = body\n    def __bytes__(self) -> bytes:",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "tsn_plus_one",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "def tsn_plus_one(a: int) -> int:\n    return (a + 1) % SCTP_TSN_MODULO\nclass Chunk:\n    type = -1\n    def __init__(self, flags: int = 0, body: bytes = b\"\") -> None:\n        self.flags = flags\n        self.body = body\n    def __bytes__(self) -> bytes:\n        body = self.body\n        data = pack(\"!BBH\", self.type, self.flags, len(body) + 4) + body",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "parse_packet",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "def parse_packet(data: bytes) -> tuple[int, int, int, list[Chunk]]:\n    length = len(data)\n    if length < 12:\n        raise ValueError(\"SCTP packet length is less than 12 bytes\")\n    source_port, destination_port, verification_tag = unpack_from(\"!HHL\", data)\n    # verify checksum\n    checksum = unpack_from(\"<L\", data, 8)[0]\n    if checksum != crc32c(data[0:8] + b\"\\x00\\x00\\x00\\x00\" + data[12:]):\n        raise ValueError(\"SCTP packet has invalid checksum\")\n    chunks: list[Chunk] = []",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "serialize_packet",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "def serialize_packet(\n    source_port: int, destination_port: int, verification_tag: int, chunk: Chunk\n) -> bytes:\n    header = pack(\"!HHL\", source_port, destination_port, verification_tag)\n    data = bytes(chunk)\n    checksum = crc32c(header + b\"\\x00\\x00\\x00\\x00\" + data)\n    return header + pack(\"<L\", checksum) + data\n# RFC 6525\n@dataclass\nclass StreamResetOutgoingParam:",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# local constants\nCOOKIE_LENGTH = 24\nCOOKIE_LIFETIME = 60\nMAX_STREAMS = 65535\nUSERDATA_MAX_LENGTH = 1200\n# protocol constants\nSCTP_CAUSE_INVALID_STREAM = 0x0001\nSCTP_CAUSE_STALE_COOKIE = 0x0003\nSCTP_DATA_LAST_FRAG = 0x01",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "COOKIE_LENGTH",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "COOKIE_LENGTH = 24\nCOOKIE_LIFETIME = 60\nMAX_STREAMS = 65535\nUSERDATA_MAX_LENGTH = 1200\n# protocol constants\nSCTP_CAUSE_INVALID_STREAM = 0x0001\nSCTP_CAUSE_STALE_COOKIE = 0x0003\nSCTP_DATA_LAST_FRAG = 0x01\nSCTP_DATA_FIRST_FRAG = 0x02\nSCTP_DATA_UNORDERED = 0x04",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "COOKIE_LIFETIME",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "COOKIE_LIFETIME = 60\nMAX_STREAMS = 65535\nUSERDATA_MAX_LENGTH = 1200\n# protocol constants\nSCTP_CAUSE_INVALID_STREAM = 0x0001\nSCTP_CAUSE_STALE_COOKIE = 0x0003\nSCTP_DATA_LAST_FRAG = 0x01\nSCTP_DATA_FIRST_FRAG = 0x02\nSCTP_DATA_UNORDERED = 0x04\nSCTP_MAX_ASSOCIATION_RETRANS = 10",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "MAX_STREAMS",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "MAX_STREAMS = 65535\nUSERDATA_MAX_LENGTH = 1200\n# protocol constants\nSCTP_CAUSE_INVALID_STREAM = 0x0001\nSCTP_CAUSE_STALE_COOKIE = 0x0003\nSCTP_DATA_LAST_FRAG = 0x01\nSCTP_DATA_FIRST_FRAG = 0x02\nSCTP_DATA_UNORDERED = 0x04\nSCTP_MAX_ASSOCIATION_RETRANS = 10\nSCTP_MAX_BURST = 4",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "USERDATA_MAX_LENGTH",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "USERDATA_MAX_LENGTH = 1200\n# protocol constants\nSCTP_CAUSE_INVALID_STREAM = 0x0001\nSCTP_CAUSE_STALE_COOKIE = 0x0003\nSCTP_DATA_LAST_FRAG = 0x01\nSCTP_DATA_FIRST_FRAG = 0x02\nSCTP_DATA_UNORDERED = 0x04\nSCTP_MAX_ASSOCIATION_RETRANS = 10\nSCTP_MAX_BURST = 4\nSCTP_MAX_INIT_RETRANS = 8",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SCTP_CAUSE_INVALID_STREAM",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "SCTP_CAUSE_INVALID_STREAM = 0x0001\nSCTP_CAUSE_STALE_COOKIE = 0x0003\nSCTP_DATA_LAST_FRAG = 0x01\nSCTP_DATA_FIRST_FRAG = 0x02\nSCTP_DATA_UNORDERED = 0x04\nSCTP_MAX_ASSOCIATION_RETRANS = 10\nSCTP_MAX_BURST = 4\nSCTP_MAX_INIT_RETRANS = 8\nSCTP_RTO_ALPHA = 1 / 8\nSCTP_RTO_BETA = 1 / 4",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SCTP_CAUSE_STALE_COOKIE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "SCTP_CAUSE_STALE_COOKIE = 0x0003\nSCTP_DATA_LAST_FRAG = 0x01\nSCTP_DATA_FIRST_FRAG = 0x02\nSCTP_DATA_UNORDERED = 0x04\nSCTP_MAX_ASSOCIATION_RETRANS = 10\nSCTP_MAX_BURST = 4\nSCTP_MAX_INIT_RETRANS = 8\nSCTP_RTO_ALPHA = 1 / 8\nSCTP_RTO_BETA = 1 / 4\nSCTP_RTO_INITIAL = 3.0",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SCTP_DATA_LAST_FRAG",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "SCTP_DATA_LAST_FRAG = 0x01\nSCTP_DATA_FIRST_FRAG = 0x02\nSCTP_DATA_UNORDERED = 0x04\nSCTP_MAX_ASSOCIATION_RETRANS = 10\nSCTP_MAX_BURST = 4\nSCTP_MAX_INIT_RETRANS = 8\nSCTP_RTO_ALPHA = 1 / 8\nSCTP_RTO_BETA = 1 / 4\nSCTP_RTO_INITIAL = 3.0\nSCTP_RTO_MIN = 1",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SCTP_DATA_FIRST_FRAG",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "SCTP_DATA_FIRST_FRAG = 0x02\nSCTP_DATA_UNORDERED = 0x04\nSCTP_MAX_ASSOCIATION_RETRANS = 10\nSCTP_MAX_BURST = 4\nSCTP_MAX_INIT_RETRANS = 8\nSCTP_RTO_ALPHA = 1 / 8\nSCTP_RTO_BETA = 1 / 4\nSCTP_RTO_INITIAL = 3.0\nSCTP_RTO_MIN = 1\nSCTP_RTO_MAX = 60",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SCTP_DATA_UNORDERED",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "SCTP_DATA_UNORDERED = 0x04\nSCTP_MAX_ASSOCIATION_RETRANS = 10\nSCTP_MAX_BURST = 4\nSCTP_MAX_INIT_RETRANS = 8\nSCTP_RTO_ALPHA = 1 / 8\nSCTP_RTO_BETA = 1 / 4\nSCTP_RTO_INITIAL = 3.0\nSCTP_RTO_MIN = 1\nSCTP_RTO_MAX = 60\nSCTP_TSN_MODULO = 2**32",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SCTP_MAX_ASSOCIATION_RETRANS",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "SCTP_MAX_ASSOCIATION_RETRANS = 10\nSCTP_MAX_BURST = 4\nSCTP_MAX_INIT_RETRANS = 8\nSCTP_RTO_ALPHA = 1 / 8\nSCTP_RTO_BETA = 1 / 4\nSCTP_RTO_INITIAL = 3.0\nSCTP_RTO_MIN = 1\nSCTP_RTO_MAX = 60\nSCTP_TSN_MODULO = 2**32\nRECONFIG_MAX_STREAMS = 135",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SCTP_MAX_BURST",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "SCTP_MAX_BURST = 4\nSCTP_MAX_INIT_RETRANS = 8\nSCTP_RTO_ALPHA = 1 / 8\nSCTP_RTO_BETA = 1 / 4\nSCTP_RTO_INITIAL = 3.0\nSCTP_RTO_MIN = 1\nSCTP_RTO_MAX = 60\nSCTP_TSN_MODULO = 2**32\nRECONFIG_MAX_STREAMS = 135\n# parameters",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SCTP_MAX_INIT_RETRANS",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "SCTP_MAX_INIT_RETRANS = 8\nSCTP_RTO_ALPHA = 1 / 8\nSCTP_RTO_BETA = 1 / 4\nSCTP_RTO_INITIAL = 3.0\nSCTP_RTO_MIN = 1\nSCTP_RTO_MAX = 60\nSCTP_TSN_MODULO = 2**32\nRECONFIG_MAX_STREAMS = 135\n# parameters\nSCTP_STATE_COOKIE = 0x0007",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SCTP_RTO_ALPHA",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "SCTP_RTO_ALPHA = 1 / 8\nSCTP_RTO_BETA = 1 / 4\nSCTP_RTO_INITIAL = 3.0\nSCTP_RTO_MIN = 1\nSCTP_RTO_MAX = 60\nSCTP_TSN_MODULO = 2**32\nRECONFIG_MAX_STREAMS = 135\n# parameters\nSCTP_STATE_COOKIE = 0x0007\nSCTP_STR_RESET_OUT_REQUEST = 0x000D",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SCTP_RTO_BETA",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "SCTP_RTO_BETA = 1 / 4\nSCTP_RTO_INITIAL = 3.0\nSCTP_RTO_MIN = 1\nSCTP_RTO_MAX = 60\nSCTP_TSN_MODULO = 2**32\nRECONFIG_MAX_STREAMS = 135\n# parameters\nSCTP_STATE_COOKIE = 0x0007\nSCTP_STR_RESET_OUT_REQUEST = 0x000D\nSCTP_STR_RESET_RESPONSE = 0x0010",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SCTP_RTO_INITIAL",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "SCTP_RTO_INITIAL = 3.0\nSCTP_RTO_MIN = 1\nSCTP_RTO_MAX = 60\nSCTP_TSN_MODULO = 2**32\nRECONFIG_MAX_STREAMS = 135\n# parameters\nSCTP_STATE_COOKIE = 0x0007\nSCTP_STR_RESET_OUT_REQUEST = 0x000D\nSCTP_STR_RESET_RESPONSE = 0x0010\nSCTP_STR_RESET_ADD_OUT_STREAMS = 0x0011",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SCTP_RTO_MIN",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "SCTP_RTO_MIN = 1\nSCTP_RTO_MAX = 60\nSCTP_TSN_MODULO = 2**32\nRECONFIG_MAX_STREAMS = 135\n# parameters\nSCTP_STATE_COOKIE = 0x0007\nSCTP_STR_RESET_OUT_REQUEST = 0x000D\nSCTP_STR_RESET_RESPONSE = 0x0010\nSCTP_STR_RESET_ADD_OUT_STREAMS = 0x0011\nSCTP_SUPPORTED_CHUNK_EXT = 0x8008",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SCTP_RTO_MAX",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "SCTP_RTO_MAX = 60\nSCTP_TSN_MODULO = 2**32\nRECONFIG_MAX_STREAMS = 135\n# parameters\nSCTP_STATE_COOKIE = 0x0007\nSCTP_STR_RESET_OUT_REQUEST = 0x000D\nSCTP_STR_RESET_RESPONSE = 0x0010\nSCTP_STR_RESET_ADD_OUT_STREAMS = 0x0011\nSCTP_SUPPORTED_CHUNK_EXT = 0x8008\nSCTP_PRSCTP_SUPPORTED = 0xC000",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SCTP_TSN_MODULO",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "SCTP_TSN_MODULO = 2**32\nRECONFIG_MAX_STREAMS = 135\n# parameters\nSCTP_STATE_COOKIE = 0x0007\nSCTP_STR_RESET_OUT_REQUEST = 0x000D\nSCTP_STR_RESET_RESPONSE = 0x0010\nSCTP_STR_RESET_ADD_OUT_STREAMS = 0x0011\nSCTP_SUPPORTED_CHUNK_EXT = 0x8008\nSCTP_PRSCTP_SUPPORTED = 0xC000\n# data channel constants",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "RECONFIG_MAX_STREAMS",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "RECONFIG_MAX_STREAMS = 135\n# parameters\nSCTP_STATE_COOKIE = 0x0007\nSCTP_STR_RESET_OUT_REQUEST = 0x000D\nSCTP_STR_RESET_RESPONSE = 0x0010\nSCTP_STR_RESET_ADD_OUT_STREAMS = 0x0011\nSCTP_SUPPORTED_CHUNK_EXT = 0x8008\nSCTP_PRSCTP_SUPPORTED = 0xC000\n# data channel constants\nDATA_CHANNEL_ACK = 2",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SCTP_STATE_COOKIE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "SCTP_STATE_COOKIE = 0x0007\nSCTP_STR_RESET_OUT_REQUEST = 0x000D\nSCTP_STR_RESET_RESPONSE = 0x0010\nSCTP_STR_RESET_ADD_OUT_STREAMS = 0x0011\nSCTP_SUPPORTED_CHUNK_EXT = 0x8008\nSCTP_PRSCTP_SUPPORTED = 0xC000\n# data channel constants\nDATA_CHANNEL_ACK = 2\nDATA_CHANNEL_OPEN = 3\nDATA_CHANNEL_RELIABLE = 0x00",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SCTP_STR_RESET_OUT_REQUEST",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "SCTP_STR_RESET_OUT_REQUEST = 0x000D\nSCTP_STR_RESET_RESPONSE = 0x0010\nSCTP_STR_RESET_ADD_OUT_STREAMS = 0x0011\nSCTP_SUPPORTED_CHUNK_EXT = 0x8008\nSCTP_PRSCTP_SUPPORTED = 0xC000\n# data channel constants\nDATA_CHANNEL_ACK = 2\nDATA_CHANNEL_OPEN = 3\nDATA_CHANNEL_RELIABLE = 0x00\nDATA_CHANNEL_PARTIAL_RELIABLE_REXMIT = 0x01",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SCTP_STR_RESET_RESPONSE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "SCTP_STR_RESET_RESPONSE = 0x0010\nSCTP_STR_RESET_ADD_OUT_STREAMS = 0x0011\nSCTP_SUPPORTED_CHUNK_EXT = 0x8008\nSCTP_PRSCTP_SUPPORTED = 0xC000\n# data channel constants\nDATA_CHANNEL_ACK = 2\nDATA_CHANNEL_OPEN = 3\nDATA_CHANNEL_RELIABLE = 0x00\nDATA_CHANNEL_PARTIAL_RELIABLE_REXMIT = 0x01\nDATA_CHANNEL_PARTIAL_RELIABLE_TIMED = 0x02",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SCTP_STR_RESET_ADD_OUT_STREAMS",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "SCTP_STR_RESET_ADD_OUT_STREAMS = 0x0011\nSCTP_SUPPORTED_CHUNK_EXT = 0x8008\nSCTP_PRSCTP_SUPPORTED = 0xC000\n# data channel constants\nDATA_CHANNEL_ACK = 2\nDATA_CHANNEL_OPEN = 3\nDATA_CHANNEL_RELIABLE = 0x00\nDATA_CHANNEL_PARTIAL_RELIABLE_REXMIT = 0x01\nDATA_CHANNEL_PARTIAL_RELIABLE_TIMED = 0x02\nDATA_CHANNEL_RELIABLE_UNORDERED = 0x80",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SCTP_SUPPORTED_CHUNK_EXT",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "SCTP_SUPPORTED_CHUNK_EXT = 0x8008\nSCTP_PRSCTP_SUPPORTED = 0xC000\n# data channel constants\nDATA_CHANNEL_ACK = 2\nDATA_CHANNEL_OPEN = 3\nDATA_CHANNEL_RELIABLE = 0x00\nDATA_CHANNEL_PARTIAL_RELIABLE_REXMIT = 0x01\nDATA_CHANNEL_PARTIAL_RELIABLE_TIMED = 0x02\nDATA_CHANNEL_RELIABLE_UNORDERED = 0x80\nDATA_CHANNEL_PARTIAL_RELIABLE_REXMIT_UNORDERED = 0x81",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "SCTP_PRSCTP_SUPPORTED",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "SCTP_PRSCTP_SUPPORTED = 0xC000\n# data channel constants\nDATA_CHANNEL_ACK = 2\nDATA_CHANNEL_OPEN = 3\nDATA_CHANNEL_RELIABLE = 0x00\nDATA_CHANNEL_PARTIAL_RELIABLE_REXMIT = 0x01\nDATA_CHANNEL_PARTIAL_RELIABLE_TIMED = 0x02\nDATA_CHANNEL_RELIABLE_UNORDERED = 0x80\nDATA_CHANNEL_PARTIAL_RELIABLE_REXMIT_UNORDERED = 0x81\nDATA_CHANNEL_PARTIAL_RELIABLE_TIMED_UNORDERED = 0x82",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "DATA_CHANNEL_ACK",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "DATA_CHANNEL_ACK = 2\nDATA_CHANNEL_OPEN = 3\nDATA_CHANNEL_RELIABLE = 0x00\nDATA_CHANNEL_PARTIAL_RELIABLE_REXMIT = 0x01\nDATA_CHANNEL_PARTIAL_RELIABLE_TIMED = 0x02\nDATA_CHANNEL_RELIABLE_UNORDERED = 0x80\nDATA_CHANNEL_PARTIAL_RELIABLE_REXMIT_UNORDERED = 0x81\nDATA_CHANNEL_PARTIAL_RELIABLE_TIMED_UNORDERED = 0x82\nWEBRTC_DCEP = 50\nWEBRTC_STRING = 51",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "DATA_CHANNEL_OPEN",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "DATA_CHANNEL_OPEN = 3\nDATA_CHANNEL_RELIABLE = 0x00\nDATA_CHANNEL_PARTIAL_RELIABLE_REXMIT = 0x01\nDATA_CHANNEL_PARTIAL_RELIABLE_TIMED = 0x02\nDATA_CHANNEL_RELIABLE_UNORDERED = 0x80\nDATA_CHANNEL_PARTIAL_RELIABLE_REXMIT_UNORDERED = 0x81\nDATA_CHANNEL_PARTIAL_RELIABLE_TIMED_UNORDERED = 0x82\nWEBRTC_DCEP = 50\nWEBRTC_STRING = 51\nWEBRTC_BINARY = 53",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "DATA_CHANNEL_RELIABLE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "DATA_CHANNEL_RELIABLE = 0x00\nDATA_CHANNEL_PARTIAL_RELIABLE_REXMIT = 0x01\nDATA_CHANNEL_PARTIAL_RELIABLE_TIMED = 0x02\nDATA_CHANNEL_RELIABLE_UNORDERED = 0x80\nDATA_CHANNEL_PARTIAL_RELIABLE_REXMIT_UNORDERED = 0x81\nDATA_CHANNEL_PARTIAL_RELIABLE_TIMED_UNORDERED = 0x82\nWEBRTC_DCEP = 50\nWEBRTC_STRING = 51\nWEBRTC_BINARY = 53\nWEBRTC_STRING_EMPTY = 56",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT = 0x01\nDATA_CHANNEL_PARTIAL_RELIABLE_TIMED = 0x02\nDATA_CHANNEL_RELIABLE_UNORDERED = 0x80\nDATA_CHANNEL_PARTIAL_RELIABLE_REXMIT_UNORDERED = 0x81\nDATA_CHANNEL_PARTIAL_RELIABLE_TIMED_UNORDERED = 0x82\nWEBRTC_DCEP = 50\nWEBRTC_STRING = 51\nWEBRTC_BINARY = 53\nWEBRTC_STRING_EMPTY = 56\nWEBRTC_BINARY_EMPTY = 57",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "DATA_CHANNEL_PARTIAL_RELIABLE_TIMED",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "DATA_CHANNEL_PARTIAL_RELIABLE_TIMED = 0x02\nDATA_CHANNEL_RELIABLE_UNORDERED = 0x80\nDATA_CHANNEL_PARTIAL_RELIABLE_REXMIT_UNORDERED = 0x81\nDATA_CHANNEL_PARTIAL_RELIABLE_TIMED_UNORDERED = 0x82\nWEBRTC_DCEP = 50\nWEBRTC_STRING = 51\nWEBRTC_BINARY = 53\nWEBRTC_STRING_EMPTY = 56\nWEBRTC_BINARY_EMPTY = 57\nDataChannelQueue = Deque[tuple[RTCDataChannel, int, bytes]]",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "DATA_CHANNEL_RELIABLE_UNORDERED",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "DATA_CHANNEL_RELIABLE_UNORDERED = 0x80\nDATA_CHANNEL_PARTIAL_RELIABLE_REXMIT_UNORDERED = 0x81\nDATA_CHANNEL_PARTIAL_RELIABLE_TIMED_UNORDERED = 0x82\nWEBRTC_DCEP = 50\nWEBRTC_STRING = 51\nWEBRTC_BINARY = 53\nWEBRTC_STRING_EMPTY = 56\nWEBRTC_BINARY_EMPTY = 57\nDataChannelQueue = Deque[tuple[RTCDataChannel, int, bytes]]\ndef chunk_type(chunk: \"Chunk\") -> str:",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT_UNORDERED",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT_UNORDERED = 0x81\nDATA_CHANNEL_PARTIAL_RELIABLE_TIMED_UNORDERED = 0x82\nWEBRTC_DCEP = 50\nWEBRTC_STRING = 51\nWEBRTC_BINARY = 53\nWEBRTC_STRING_EMPTY = 56\nWEBRTC_BINARY_EMPTY = 57\nDataChannelQueue = Deque[tuple[RTCDataChannel, int, bytes]]\ndef chunk_type(chunk: \"Chunk\") -> str:\n    return chunk.__class__.__name__",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "DATA_CHANNEL_PARTIAL_RELIABLE_TIMED_UNORDERED",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "DATA_CHANNEL_PARTIAL_RELIABLE_TIMED_UNORDERED = 0x82\nWEBRTC_DCEP = 50\nWEBRTC_STRING = 51\nWEBRTC_BINARY = 53\nWEBRTC_STRING_EMPTY = 56\nWEBRTC_BINARY_EMPTY = 57\nDataChannelQueue = Deque[tuple[RTCDataChannel, int, bytes]]\ndef chunk_type(chunk: \"Chunk\") -> str:\n    return chunk.__class__.__name__\ndef decode_params(body: bytes) -> list[tuple[int, bytes]]:",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "WEBRTC_DCEP",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "WEBRTC_DCEP = 50\nWEBRTC_STRING = 51\nWEBRTC_BINARY = 53\nWEBRTC_STRING_EMPTY = 56\nWEBRTC_BINARY_EMPTY = 57\nDataChannelQueue = Deque[tuple[RTCDataChannel, int, bytes]]\ndef chunk_type(chunk: \"Chunk\") -> str:\n    return chunk.__class__.__name__\ndef decode_params(body: bytes) -> list[tuple[int, bytes]]:\n    params = []",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "WEBRTC_STRING",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "WEBRTC_STRING = 51\nWEBRTC_BINARY = 53\nWEBRTC_STRING_EMPTY = 56\nWEBRTC_BINARY_EMPTY = 57\nDataChannelQueue = Deque[tuple[RTCDataChannel, int, bytes]]\ndef chunk_type(chunk: \"Chunk\") -> str:\n    return chunk.__class__.__name__\ndef decode_params(body: bytes) -> list[tuple[int, bytes]]:\n    params = []\n    pos = 0",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "WEBRTC_BINARY",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "WEBRTC_BINARY = 53\nWEBRTC_STRING_EMPTY = 56\nWEBRTC_BINARY_EMPTY = 57\nDataChannelQueue = Deque[tuple[RTCDataChannel, int, bytes]]\ndef chunk_type(chunk: \"Chunk\") -> str:\n    return chunk.__class__.__name__\ndef decode_params(body: bytes) -> list[tuple[int, bytes]]:\n    params = []\n    pos = 0\n    while pos <= len(body) - 4:",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "WEBRTC_STRING_EMPTY",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "WEBRTC_STRING_EMPTY = 56\nWEBRTC_BINARY_EMPTY = 57\nDataChannelQueue = Deque[tuple[RTCDataChannel, int, bytes]]\ndef chunk_type(chunk: \"Chunk\") -> str:\n    return chunk.__class__.__name__\ndef decode_params(body: bytes) -> list[tuple[int, bytes]]:\n    params = []\n    pos = 0\n    while pos <= len(body) - 4:\n        param_type, param_length = unpack_from(\"!HH\", body, pos)",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "WEBRTC_BINARY_EMPTY",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "WEBRTC_BINARY_EMPTY = 57\nDataChannelQueue = Deque[tuple[RTCDataChannel, int, bytes]]\ndef chunk_type(chunk: \"Chunk\") -> str:\n    return chunk.__class__.__name__\ndef decode_params(body: bytes) -> list[tuple[int, bytes]]:\n    params = []\n    pos = 0\n    while pos <= len(body) - 4:\n        param_type, param_length = unpack_from(\"!HH\", body, pos)\n        params.append((param_type, body[pos + 4 : pos + param_length]))",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "DataChannelQueue",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "DataChannelQueue = Deque[tuple[RTCDataChannel, int, bytes]]\ndef chunk_type(chunk: \"Chunk\") -> str:\n    return chunk.__class__.__name__\ndef decode_params(body: bytes) -> list[tuple[int, bytes]]:\n    params = []\n    pos = 0\n    while pos <= len(body) - 4:\n        param_type, param_length = unpack_from(\"!HH\", body, pos)\n        params.append((param_type, body[pos + 4 : pos + param_length]))\n        pos += param_length + padl(param_length)",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "CHUNK_CLASSES",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "CHUNK_CLASSES = [\n    DataChunk,\n    InitChunk,\n    InitAckChunk,\n    SackChunk,\n    HeartbeatChunk,\n    HeartbeatAckChunk,\n    AbortChunk,\n    ShutdownChunk,\n    ShutdownAckChunk,",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "CHUNK_TYPES",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "CHUNK_TYPES = dict((cls.type, cls) for cls in CHUNK_CLASSES)\ndef parse_packet(data: bytes) -> tuple[int, int, int, list[Chunk]]:\n    length = len(data)\n    if length < 12:\n        raise ValueError(\"SCTP packet length is less than 12 bytes\")\n    source_port, destination_port, verification_tag = unpack_from(\"!HHL\", data)\n    # verify checksum\n    checksum = unpack_from(\"<L\", data, 8)[0]\n    if checksum != crc32c(data[0:8] + b\"\\x00\\x00\\x00\\x00\" + data[12:]):\n        raise ValueError(\"SCTP packet has invalid checksum\")",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "]",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtcsctptransport",
        "description": "src.selkies.webrtc.rtcsctptransport",
        "peekOfCode": "] = {\n    13: StreamResetOutgoingParam,\n    16: StreamResetResponseParam,\n    17: StreamAddOutgoingParam,\n}\nclass InboundStream:\n    def __init__(self) -> None:\n        self.reassembly: list[DataChunk] = []\n        self.sequence_number = 0\n    def add_chunk(self, chunk: DataChunk) -> None:",
        "detail": "src.selkies.webrtc.rtcsctptransport",
        "documentation": {}
    },
    {
        "label": "RTCSessionDescription",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtcsessiondescription",
        "description": "src.selkies.webrtc.rtcsessiondescription",
        "peekOfCode": "class RTCSessionDescription:\n    \"\"\"\n    The :class:`RTCSessionDescription` dictionary describes one end of a\n    connection and how it's configured.\n    \"\"\"\n    sdp: str\n    type: str\n    def __post_init__(self) -> None:\n        if self.type not in {\"offer\", \"pranswer\", \"answer\", \"rollback\"}:\n            raise ValueError(",
        "detail": "src.selkies.webrtc.rtcsessiondescription",
        "documentation": {}
    },
    {
        "label": "HeaderExtensions",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "class HeaderExtensions:\n    abs_send_time: Optional[int] = None\n    audio_level: Any = None\n    mid: Any = None\n    repaired_rtp_stream_id: Any = None\n    rtp_stream_id: Any = None\n    transmission_offset: Optional[int] = None\n    transport_sequence_number: Optional[int] = None\nclass HeaderExtensionsMap:\n    def __init__(self) -> None:",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "HeaderExtensionsMap",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "class HeaderExtensionsMap:\n    def __init__(self) -> None:\n        self.__ids = HeaderExtensions()\n    def configure(self, parameters: RTCRtpParameters) -> None:\n        for ext in parameters.headerExtensions:\n            if ext.uri == \"urn:ietf:params:rtp-hdrext:sdes:mid\":\n                self.__ids.mid = ext.id\n            elif ext.uri == \"urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id\":\n                self.__ids.repaired_rtp_stream_id = ext.id\n            elif ext.uri == \"urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id\":",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RtcpReceiverInfo",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "class RtcpReceiverInfo:\n    ssrc: int\n    fraction_lost: int\n    packets_lost: int\n    highest_sequence: int\n    jitter: int\n    lsr: int\n    dlsr: int\n    def __bytes__(self) -> bytes:\n        data = pack(\"!LB\", self.ssrc, self.fraction_lost)",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RtcpSenderInfo",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "class RtcpSenderInfo:\n    ntp_timestamp: int\n    rtp_timestamp: int\n    packet_count: int\n    octet_count: int\n    def __bytes__(self) -> bytes:\n        return pack(\n            \"!QLLL\",\n            self.ntp_timestamp,\n            self.rtp_timestamp,",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RtcpSourceInfo",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "class RtcpSourceInfo:\n    ssrc: int\n    items: list[tuple[Any, bytes]]\n@dataclass\nclass RtcpByePacket:\n    sources: list[int]\n    def __bytes__(self) -> bytes:\n        payload = b\"\".join([pack(\"!L\", ssrc) for ssrc in self.sources])\n        return pack_rtcp_packet(RTCP_BYE, len(self.sources), payload)\n    @classmethod",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RtcpByePacket",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "class RtcpByePacket:\n    sources: list[int]\n    def __bytes__(self) -> bytes:\n        payload = b\"\".join([pack(\"!L\", ssrc) for ssrc in self.sources])\n        return pack_rtcp_packet(RTCP_BYE, len(self.sources), payload)\n    @classmethod\n    def parse(cls, data: bytes, count: int) -> \"RtcpByePacket\":\n        if len(data) < 4 * count:\n            raise ValueError(\"RTCP bye length is invalid\")\n        if count > 0:",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RtcpPsfbPacket",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "class RtcpPsfbPacket:\n    \"\"\"\n    Payload-Specific Feedback Message (RFC 4585).\n    \"\"\"\n    fmt: int\n    ssrc: int\n    media_ssrc: int\n    fci: bytes = b\"\"\n    def __bytes__(self) -> bytes:\n        payload = pack(\"!LL\", self.ssrc, self.media_ssrc) + self.fci",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RtcpRrPacket",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "class RtcpRrPacket:\n    ssrc: int\n    reports: list[RtcpReceiverInfo] = field(default_factory=list)\n    def __bytes__(self) -> bytes:\n        payload = pack(\"!L\", self.ssrc)\n        for report in self.reports:\n            payload += bytes(report)\n        return pack_rtcp_packet(RTCP_RR, len(self.reports), payload)\n    @classmethod\n    def parse(cls, data: bytes, count: int) -> \"RtcpRrPacket\":",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RtcpRtpfbPacket",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "class RtcpRtpfbPacket:\n    \"\"\"\n    Generic RTP Feedback Message (RFC 4585).\n    \"\"\"\n    fmt: int\n    ssrc: int\n    media_ssrc: int\n    # generick NACK\n    lost: list[int] = field(default_factory=list)\n    def __bytes__(self) -> bytes:",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RtcpSdesPacket",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "class RtcpSdesPacket:\n    chunks: list[RtcpSourceInfo] = field(default_factory=list)\n    def __bytes__(self) -> bytes:\n        payload = b\"\"\n        for chunk in self.chunks:\n            payload += pack(\"!L\", chunk.ssrc)\n            for d_type, d_value in chunk.items:\n                payload += pack(\"!BB\", d_type, len(d_value)) + d_value\n            payload += b\"\\x00\\x00\"\n        while len(payload) % 4:",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RtcpSrPacket",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "class RtcpSrPacket:\n    ssrc: int\n    sender_info: RtcpSenderInfo\n    reports: list[RtcpReceiverInfo] = field(default_factory=list)\n    def __bytes__(self) -> bytes:\n        payload = pack(\"!L\", self.ssrc)\n        payload += bytes(self.sender_info)\n        for report in self.reports:\n            payload += bytes(report)\n        return pack_rtcp_packet(RTCP_SR, len(self.reports), payload)",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RtcpPacket",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "class RtcpPacket:\n    @classmethod\n    def parse(cls, data: bytes) -> list[AnyRtcpPacket]:\n        pos = 0\n        packets: list[AnyRtcpPacket] = []\n        while pos < len(data):\n            if len(data) < pos + RTCP_HEADER_LENGTH:\n                raise ValueError(\n                    f\"RTCP packet length is less than {RTCP_HEADER_LENGTH} bytes\"\n                )",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RtpPacket",
        "kind": 6,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "class RtpPacket:\n    def __init__(\n        self,\n        payload_type: int = 0,\n        marker: int = 0,\n        sequence_number: int = 0,\n        timestamp: int = 0,\n        ssrc: int = 0,\n        payload: bytes = b\"\",\n    ) -> None:",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "clamp_packets_lost",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "def clamp_packets_lost(count: int) -> int:\n    return max(PACKETS_LOST_MIN, min(count, PACKETS_LOST_MAX))\ndef pack_packets_lost(count: int) -> bytes:\n    return pack(\"!l\", count)[1:]\ndef unpack_packets_lost(d: bytes) -> int:\n    if d[0] & 0x80:\n        d = b\"\\xff\" + d\n    else:\n        d = b\"\\x00\" + d\n    return unpack(\"!l\", d)[0]",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "pack_packets_lost",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "def pack_packets_lost(count: int) -> bytes:\n    return pack(\"!l\", count)[1:]\ndef unpack_packets_lost(d: bytes) -> int:\n    if d[0] & 0x80:\n        d = b\"\\xff\" + d\n    else:\n        d = b\"\\x00\" + d\n    return unpack(\"!l\", d)[0]\ndef pack_rtcp_packet(packet_type: int, count: int, payload: bytes) -> bytes:\n    assert len(payload) % 4 == 0",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "unpack_packets_lost",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "def unpack_packets_lost(d: bytes) -> int:\n    if d[0] & 0x80:\n        d = b\"\\xff\" + d\n    else:\n        d = b\"\\x00\" + d\n    return unpack(\"!l\", d)[0]\ndef pack_rtcp_packet(packet_type: int, count: int, payload: bytes) -> bytes:\n    assert len(payload) % 4 == 0\n    return pack(\"!BBH\", (2 << 6) | count, packet_type, len(payload) // 4) + payload\ndef pack_remb_fci(bitrate: int, ssrcs: list[int]) -> bytes:",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "pack_rtcp_packet",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "def pack_rtcp_packet(packet_type: int, count: int, payload: bytes) -> bytes:\n    assert len(payload) % 4 == 0\n    return pack(\"!BBH\", (2 << 6) | count, packet_type, len(payload) // 4) + payload\ndef pack_remb_fci(bitrate: int, ssrcs: list[int]) -> bytes:\n    \"\"\"\n    Pack the FCI for a Receiver Estimated Maximum Bitrate report.\n    https://tools.ietf.org/html/draft-alvestrand-rmcat-remb-03\n    \"\"\"\n    data = b\"REMB\"\n    exponent = 0",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "pack_remb_fci",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "def pack_remb_fci(bitrate: int, ssrcs: list[int]) -> bytes:\n    \"\"\"\n    Pack the FCI for a Receiver Estimated Maximum Bitrate report.\n    https://tools.ietf.org/html/draft-alvestrand-rmcat-remb-03\n    \"\"\"\n    data = b\"REMB\"\n    exponent = 0\n    mantissa = bitrate\n    while mantissa > 0x3FFFF:\n        mantissa >>= 1",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "unpack_remb_fci",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "def unpack_remb_fci(data: bytes) -> tuple[int, list[int]]:\n    \"\"\"\n    Unpack the FCI for a Receiver Estimated Maximum Bitrate report.\n    https://tools.ietf.org/html/draft-alvestrand-rmcat-remb-03\n    \"\"\"\n    if len(data) < 8 or data[0:4] != b\"REMB\":\n        raise ValueError(\"Invalid REMB prefix\")\n    exponent = (data[5] & 0xFC) >> 2\n    mantissa = ((data[5] & 0x03) << 16) | (data[6] << 8) | data[7]\n    bitrate = mantissa << exponent",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "is_rtcp",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "def is_rtcp(msg: bytes) -> bool:\n    return len(msg) >= 2 and msg[1] >= 192 and msg[1] <= 208\ndef padl(length: int) -> int:\n    \"\"\"\n    Return amount of padding needed for a 4-byte multiple.\n    \"\"\"\n    return 4 * ((length + 3) // 4) - length\ndef unpack_header_extensions(\n    extension_profile: int, extension_value: bytes\n) -> list[tuple[int, bytes]]:",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "padl",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "def padl(length: int) -> int:\n    \"\"\"\n    Return amount of padding needed for a 4-byte multiple.\n    \"\"\"\n    return 4 * ((length + 3) // 4) - length\ndef unpack_header_extensions(\n    extension_profile: int, extension_value: bytes\n) -> list[tuple[int, bytes]]:\n    \"\"\"\n    Parse header extensions according to RFC 5285.",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "unpack_header_extensions",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "def unpack_header_extensions(\n    extension_profile: int, extension_value: bytes\n) -> list[tuple[int, bytes]]:\n    \"\"\"\n    Parse header extensions according to RFC 5285.\n    \"\"\"\n    extensions = []\n    pos = 0\n    if extension_profile == 0xBEDE:\n        # One-Byte Header",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "pack_header_extensions",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "def pack_header_extensions(extensions: list[tuple[int, bytes]]) -> tuple[int, bytes]:\n    \"\"\"\n    Serialize header extensions according to RFC 5285.\n    \"\"\"\n    extension_profile = 0\n    extension_value = b\"\"\n    if not extensions:\n        return extension_profile, extension_value\n    one_byte = True\n    for x_id, x_value in extensions:",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "compute_audio_level_dbov",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "def compute_audio_level_dbov(frame: AudioFrame) -> int:\n    \"\"\"\n    Compute the energy level as spelled out in RFC 6465, Appendix A.\n    \"\"\"\n    MAX_SAMPLE_VALUE = 32767\n    MAX_AUDIO_LEVEL = 0\n    MIN_AUDIO_LEVEL = -127\n    rms = 0.0\n    buf = bytes(frame.planes[0])\n    s = struct.Struct(\"h\")",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "unwrap_rtx",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "def unwrap_rtx(rtx: RtpPacket, payload_type: int, ssrc: int) -> RtpPacket:\n    \"\"\"\n    Recover initial packet from a retransmission packet.\n    \"\"\"\n    packet = RtpPacket(\n        payload_type=payload_type,\n        marker=rtx.marker,\n        sequence_number=unpack(\"!H\", rtx.payload[0:2])[0],\n        timestamp=rtx.timestamp,\n        ssrc=ssrc,",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "wrap_rtx",
        "kind": 2,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "def wrap_rtx(\n    packet: RtpPacket, payload_type: int, sequence_number: int, ssrc: int\n) -> RtpPacket:\n    \"\"\"\n    Create a retransmission packet from a lost packet.\n    \"\"\"\n    rtx = RtpPacket(\n        payload_type=payload_type,\n        marker=packet.marker,\n        sequence_number=sequence_number,",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RTP_HISTORY_SIZE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "RTP_HISTORY_SIZE = 128\n# reserved to avoid confusion with RTCP\nFORBIDDEN_PAYLOAD_TYPES = range(72, 77)\nDYNAMIC_PAYLOAD_TYPES = range(96, 128)\nRTP_HEADER_LENGTH = 12\nRTCP_HEADER_LENGTH = 4\nPACKETS_LOST_MIN = -(1 << 23)\nPACKETS_LOST_MAX = (1 << 23) - 1\nRTCP_SR = 200\nRTCP_RR = 201",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "FORBIDDEN_PAYLOAD_TYPES",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "FORBIDDEN_PAYLOAD_TYPES = range(72, 77)\nDYNAMIC_PAYLOAD_TYPES = range(96, 128)\nRTP_HEADER_LENGTH = 12\nRTCP_HEADER_LENGTH = 4\nPACKETS_LOST_MIN = -(1 << 23)\nPACKETS_LOST_MAX = (1 << 23) - 1\nRTCP_SR = 200\nRTCP_RR = 201\nRTCP_SDES = 202\nRTCP_BYE = 203",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "DYNAMIC_PAYLOAD_TYPES",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "DYNAMIC_PAYLOAD_TYPES = range(96, 128)\nRTP_HEADER_LENGTH = 12\nRTCP_HEADER_LENGTH = 4\nPACKETS_LOST_MIN = -(1 << 23)\nPACKETS_LOST_MAX = (1 << 23) - 1\nRTCP_SR = 200\nRTCP_RR = 201\nRTCP_SDES = 202\nRTCP_BYE = 203\nRTCP_RTPFB = 205",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RTP_HEADER_LENGTH",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "RTP_HEADER_LENGTH = 12\nRTCP_HEADER_LENGTH = 4\nPACKETS_LOST_MIN = -(1 << 23)\nPACKETS_LOST_MAX = (1 << 23) - 1\nRTCP_SR = 200\nRTCP_RR = 201\nRTCP_SDES = 202\nRTCP_BYE = 203\nRTCP_RTPFB = 205\nRTCP_PSFB = 206",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RTCP_HEADER_LENGTH",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "RTCP_HEADER_LENGTH = 4\nPACKETS_LOST_MIN = -(1 << 23)\nPACKETS_LOST_MAX = (1 << 23) - 1\nRTCP_SR = 200\nRTCP_RR = 201\nRTCP_SDES = 202\nRTCP_BYE = 203\nRTCP_RTPFB = 205\nRTCP_PSFB = 206\nRTCP_RTPFB_NACK = 1",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "PACKETS_LOST_MIN",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "PACKETS_LOST_MIN = -(1 << 23)\nPACKETS_LOST_MAX = (1 << 23) - 1\nRTCP_SR = 200\nRTCP_RR = 201\nRTCP_SDES = 202\nRTCP_BYE = 203\nRTCP_RTPFB = 205\nRTCP_PSFB = 206\nRTCP_RTPFB_NACK = 1\nRTCP_PSFB_PLI = 1",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "PACKETS_LOST_MAX",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "PACKETS_LOST_MAX = (1 << 23) - 1\nRTCP_SR = 200\nRTCP_RR = 201\nRTCP_SDES = 202\nRTCP_BYE = 203\nRTCP_RTPFB = 205\nRTCP_PSFB = 206\nRTCP_RTPFB_NACK = 1\nRTCP_PSFB_PLI = 1\nRTCP_PSFB_SLI = 2",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RTCP_SR",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "RTCP_SR = 200\nRTCP_RR = 201\nRTCP_SDES = 202\nRTCP_BYE = 203\nRTCP_RTPFB = 205\nRTCP_PSFB = 206\nRTCP_RTPFB_NACK = 1\nRTCP_PSFB_PLI = 1\nRTCP_PSFB_SLI = 2\nRTCP_PSFB_RPSI = 3",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RTCP_RR",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "RTCP_RR = 201\nRTCP_SDES = 202\nRTCP_BYE = 203\nRTCP_RTPFB = 205\nRTCP_PSFB = 206\nRTCP_RTPFB_NACK = 1\nRTCP_PSFB_PLI = 1\nRTCP_PSFB_SLI = 2\nRTCP_PSFB_RPSI = 3\nRTCP_PSFB_APP = 15",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RTCP_SDES",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "RTCP_SDES = 202\nRTCP_BYE = 203\nRTCP_RTPFB = 205\nRTCP_PSFB = 206\nRTCP_RTPFB_NACK = 1\nRTCP_PSFB_PLI = 1\nRTCP_PSFB_SLI = 2\nRTCP_PSFB_RPSI = 3\nRTCP_PSFB_APP = 15\n@dataclass",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RTCP_BYE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "RTCP_BYE = 203\nRTCP_RTPFB = 205\nRTCP_PSFB = 206\nRTCP_RTPFB_NACK = 1\nRTCP_PSFB_PLI = 1\nRTCP_PSFB_SLI = 2\nRTCP_PSFB_RPSI = 3\nRTCP_PSFB_APP = 15\n@dataclass\nclass HeaderExtensions:",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RTCP_RTPFB",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "RTCP_RTPFB = 205\nRTCP_PSFB = 206\nRTCP_RTPFB_NACK = 1\nRTCP_PSFB_PLI = 1\nRTCP_PSFB_SLI = 2\nRTCP_PSFB_RPSI = 3\nRTCP_PSFB_APP = 15\n@dataclass\nclass HeaderExtensions:\n    abs_send_time: Optional[int] = None",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RTCP_PSFB",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "RTCP_PSFB = 206\nRTCP_RTPFB_NACK = 1\nRTCP_PSFB_PLI = 1\nRTCP_PSFB_SLI = 2\nRTCP_PSFB_RPSI = 3\nRTCP_PSFB_APP = 15\n@dataclass\nclass HeaderExtensions:\n    abs_send_time: Optional[int] = None\n    audio_level: Any = None",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RTCP_RTPFB_NACK",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "RTCP_RTPFB_NACK = 1\nRTCP_PSFB_PLI = 1\nRTCP_PSFB_SLI = 2\nRTCP_PSFB_RPSI = 3\nRTCP_PSFB_APP = 15\n@dataclass\nclass HeaderExtensions:\n    abs_send_time: Optional[int] = None\n    audio_level: Any = None\n    mid: Any = None",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RTCP_PSFB_PLI",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "RTCP_PSFB_PLI = 1\nRTCP_PSFB_SLI = 2\nRTCP_PSFB_RPSI = 3\nRTCP_PSFB_APP = 15\n@dataclass\nclass HeaderExtensions:\n    abs_send_time: Optional[int] = None\n    audio_level: Any = None\n    mid: Any = None\n    repaired_rtp_stream_id: Any = None",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RTCP_PSFB_SLI",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "RTCP_PSFB_SLI = 2\nRTCP_PSFB_RPSI = 3\nRTCP_PSFB_APP = 15\n@dataclass\nclass HeaderExtensions:\n    abs_send_time: Optional[int] = None\n    audio_level: Any = None\n    mid: Any = None\n    repaired_rtp_stream_id: Any = None\n    rtp_stream_id: Any = None",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RTCP_PSFB_RPSI",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "RTCP_PSFB_RPSI = 3\nRTCP_PSFB_APP = 15\n@dataclass\nclass HeaderExtensions:\n    abs_send_time: Optional[int] = None\n    audio_level: Any = None\n    mid: Any = None\n    repaired_rtp_stream_id: Any = None\n    rtp_stream_id: Any = None\n    transmission_offset: Optional[int] = None",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "RTCP_PSFB_APP",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "RTCP_PSFB_APP = 15\n@dataclass\nclass HeaderExtensions:\n    abs_send_time: Optional[int] = None\n    audio_level: Any = None\n    mid: Any = None\n    repaired_rtp_stream_id: Any = None\n    rtp_stream_id: Any = None\n    transmission_offset: Optional[int] = None\n    transport_sequence_number: Optional[int] = None",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "AnyRtcpPacket",
        "kind": 5,
        "importPath": "src.selkies.webrtc.rtp",
        "description": "src.selkies.webrtc.rtp",
        "peekOfCode": "AnyRtcpPacket = Union[\n    RtcpByePacket,\n    RtcpPsfbPacket,\n    RtcpRrPacket,\n    RtcpRtpfbPacket,\n    RtcpSdesPacket,\n    RtcpSrPacket,\n]\nclass RtcpPacket:\n    @classmethod",
        "detail": "src.selkies.webrtc.rtp",
        "documentation": {}
    },
    {
        "label": "BitPattern",
        "kind": 6,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "class BitPattern:\n    def __init__(self, v: str) -> None:\n        self._mask = ~self._bytemaskstring(\"x\", v)\n        self._masked_value = self._bytemaskstring(\"1\", v)\n    def matches(self, v: int) -> bool:\n        return (v & self._mask) == self._masked_value\n    def _bytemaskstring(self, c: str, s: str) -> int:\n        return (\n            (s[0] == c) << 7\n            | (s[1] == c) << 6",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "H264Profile",
        "kind": 6,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "class H264Profile(enum.Enum):\n    PROFILE_CONSTRAINED_BASELINE = 0\n    PROFILE_BASELINE = 1\n    PROFILE_MAIN = 2\n    PROFILE_CONSTRAINED_HIGH = 3\n    PROFILE_HIGH = 4\n    PROFILE_PREDICTIVE_HIGH_444 = 5\nclass H264Level(enum.IntEnum):\n    LEVEL1_B = -1\n    LEVEL1 = 10",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "H264Level",
        "kind": 6,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "class H264Level(enum.IntEnum):\n    LEVEL1_B = -1\n    LEVEL1 = 10\n    LEVEL1_1 = 11\n    LEVEL1_2 = 12\n    LEVEL1_3 = 13\n    LEVEL2 = 20\n    LEVEL2_1 = 21\n    LEVEL2_2 = 22\n    LEVEL3 = 30",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "GroupDescription",
        "kind": 6,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "class GroupDescription:\n    semantic: str\n    items: list[Union[int, str]]\n    def __str__(self) -> str:\n        return f\"{self.semantic} {' '.join(map(str, self.items))}\"\ndef parse_group(\n    dest: list[GroupDescription], value: str, type: Union[type[str], type[int]] = str\n) -> None:\n    bits = value.split()\n    if bits:",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "SsrcDescription",
        "kind": 6,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "class SsrcDescription:\n    ssrc: int\n    cname: Optional[str] = None\n    msid: Optional[str] = None\n    mslabel: Optional[str] = None\n    label: Optional[str] = None\nSSRC_INFO_ATTRS = [\"cname\", \"msid\", \"mslabel\", \"label\"]\nclass MediaDescription:\n    def __init__(self, kind: str, port: int, profile: str, fmt: list[Any]) -> None:\n        # rtp",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "MediaDescription",
        "kind": 6,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "class MediaDescription:\n    def __init__(self, kind: str, port: int, profile: str, fmt: list[Any]) -> None:\n        # rtp\n        self.kind = kind\n        self.port = port\n        self.host: Optional[str] = None\n        self.profile = profile\n        self.direction: Optional[str] = None\n        self.msid: Optional[str] = None\n        # rtcp",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "SessionDescription",
        "kind": 6,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "class SessionDescription:\n    def __init__(self) -> None:\n        self.version = 0\n        self.origin: Optional[str] = None\n        self.name = \"-\"\n        self.time = \"0 0\"\n        self.host: Optional[str] = None\n        self.group: list[GroupDescription] = []\n        self.msid_semantic: list[GroupDescription] = []\n        self.media: list[MediaDescription] = []",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "candidate_from_sdp",
        "kind": 2,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "def candidate_from_sdp(sdp: str) -> RTCIceCandidate:\n    bits = sdp.split()\n    assert len(bits) >= 8\n    candidate = RTCIceCandidate(\n        component=int(bits[1]),\n        foundation=bits[0],\n        ip=bits[4],\n        port=int(bits[5]),\n        priority=int(bits[3]),\n        protocol=bits[2],",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "candidate_to_sdp",
        "kind": 2,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "def candidate_to_sdp(candidate: RTCIceCandidate) -> str:\n    sdp = (\n        f\"{candidate.foundation} {candidate.component} {candidate.protocol} \"\n        f\"{candidate.priority} {candidate.ip} {candidate.port} typ {candidate.type}\"\n    )\n    if candidate.relatedAddress is not None:\n        sdp += f\" raddr {candidate.relatedAddress}\"\n    if candidate.relatedPort is not None:\n        sdp += f\" rport {candidate.relatedPort}\"\n    if candidate.tcpType is not None:",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "grouplines",
        "kind": 2,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "def grouplines(sdp: str) -> tuple[list[str], list[list[str]]]:\n    session = []\n    media = []\n    for line in sdp.splitlines():\n        if line.startswith(\"m=\"):\n            media.append([line])\n        elif len(media):\n            media[-1].append(line)\n        else:\n            session.append(line)",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "ipaddress_from_sdp",
        "kind": 2,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "def ipaddress_from_sdp(sdp: str) -> str:\n    m = re.match(\"^IN (IP4|IP6) ([^ ]+)$\", sdp)\n    assert m\n    return m.group(2)\ndef ipaddress_to_sdp(addr: str) -> str:\n    version = ipaddress.ip_address(addr).version\n    return f\"IN IP{version} {addr}\"\ndef parameters_from_sdp(sdp: str) -> ParametersDict:\n    parameters: ParametersDict = {}\n    for param in sdp.split(\";\"):",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "ipaddress_to_sdp",
        "kind": 2,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "def ipaddress_to_sdp(addr: str) -> str:\n    version = ipaddress.ip_address(addr).version\n    return f\"IN IP{version} {addr}\"\ndef parameters_from_sdp(sdp: str) -> ParametersDict:\n    parameters: ParametersDict = {}\n    for param in sdp.split(\";\"):\n        if \"=\" in param:\n            k, v = param.split(\"=\", 1)\n            if k in FMTP_INT_PARAMETERS:\n                parameters[k] = int(v)",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "parameters_from_sdp",
        "kind": 2,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "def parameters_from_sdp(sdp: str) -> ParametersDict:\n    parameters: ParametersDict = {}\n    for param in sdp.split(\";\"):\n        if \"=\" in param:\n            k, v = param.split(\"=\", 1)\n            if k in FMTP_INT_PARAMETERS:\n                parameters[k] = int(v)\n            else:\n                parameters[k] = v\n        else:",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "parameters_to_sdp",
        "kind": 2,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "def parameters_to_sdp(parameters: ParametersDict) -> str:\n    params = []\n    for param_k, param_v in parameters.items():\n        if param_v is not None:\n            params.append(f\"{param_k}={param_v}\")\n        else:\n            params.append(param_k)\n    return \";\".join(params)\ndef parse_attr(line: str) -> tuple[str, Optional[str]]:\n    if \":\" in line:",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "parse_attr",
        "kind": 2,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "def parse_attr(line: str) -> tuple[str, Optional[str]]:\n    if \":\" in line:\n        bits = line[2:].split(\":\", 1)\n        return bits[0], bits[1]\n    else:\n        return line[2:], None\ndef parse_h264_profile_level_id(profile_str: str) -> tuple[H264Profile, H264Level]:\n    if not isinstance(profile_str, str) or not re.match(\n        \"[0-9a-f]{6}\", profile_str, re.I\n    ):",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "parse_h264_profile_level_id",
        "kind": 2,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "def parse_h264_profile_level_id(profile_str: str) -> tuple[H264Profile, H264Level]:\n    if not isinstance(profile_str, str) or not re.match(\n        \"[0-9a-f]{6}\", profile_str, re.I\n    ):\n        raise ValueError(\"Expected a 6 character hexadecimal string\")\n    level_idc = int(profile_str[4:6], 16)\n    profile_iop = int(profile_str[2:4], 16)\n    profile_idc = int(profile_str[0:2], 16)\n    level: H264Level\n    if level_idc == H264Level.LEVEL1_1:",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "parse_group",
        "kind": 2,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "def parse_group(\n    dest: list[GroupDescription], value: str, type: Union[type[str], type[int]] = str\n) -> None:\n    bits = value.split()\n    if bits:\n        dest.append(GroupDescription(semantic=bits[0], items=list(map(type, bits[1:]))))\n@dataclass\nclass SsrcDescription:\n    ssrc: int\n    cname: Optional[str] = None",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "DIRECTIONS",
        "kind": 5,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "DIRECTIONS = [\"inactive\", \"sendonly\", \"recvonly\", \"sendrecv\"]\nDTLS_ROLE_SETUP = {\"auto\": \"actpass\", \"client\": \"active\", \"server\": \"passive\"}\nDTLS_SETUP_ROLE = dict([(v, k) for (k, v) in DTLS_ROLE_SETUP.items()])\nFMTP_INT_PARAMETERS = [\n    \"apt\",\n    \"max-fr\",\n    \"max-fs\",\n    \"maxplaybackrate\",\n    \"minptime\",\n    \"stereo\",",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "DTLS_ROLE_SETUP",
        "kind": 5,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "DTLS_ROLE_SETUP = {\"auto\": \"actpass\", \"client\": \"active\", \"server\": \"passive\"}\nDTLS_SETUP_ROLE = dict([(v, k) for (k, v) in DTLS_ROLE_SETUP.items()])\nFMTP_INT_PARAMETERS = [\n    \"apt\",\n    \"max-fr\",\n    \"max-fs\",\n    \"maxplaybackrate\",\n    \"minptime\",\n    \"stereo\",\n    \"useinbandfec\",",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "DTLS_SETUP_ROLE",
        "kind": 5,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "DTLS_SETUP_ROLE = dict([(v, k) for (k, v) in DTLS_ROLE_SETUP.items()])\nFMTP_INT_PARAMETERS = [\n    \"apt\",\n    \"max-fr\",\n    \"max-fs\",\n    \"maxplaybackrate\",\n    \"minptime\",\n    \"stereo\",\n    \"useinbandfec\",\n]",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "FMTP_INT_PARAMETERS",
        "kind": 5,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "FMTP_INT_PARAMETERS = [\n    \"apt\",\n    \"max-fr\",\n    \"max-fs\",\n    \"maxplaybackrate\",\n    \"minptime\",\n    \"stereo\",\n    \"useinbandfec\",\n]\nclass BitPattern:",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "H264_PROFILE_PATTERNS",
        "kind": 5,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "H264_PROFILE_PATTERNS = [\n    (0x42, BitPattern(\"x1xx0000\"), H264Profile.PROFILE_CONSTRAINED_BASELINE),\n    (0x4D, BitPattern(\"1xxx0000\"), H264Profile.PROFILE_CONSTRAINED_BASELINE),\n    (0x58, BitPattern(\"11xx0000\"), H264Profile.PROFILE_CONSTRAINED_BASELINE),\n    (0x42, BitPattern(\"x0xx0000\"), H264Profile.PROFILE_BASELINE),\n    (0x58, BitPattern(\"10xx0000\"), H264Profile.PROFILE_BASELINE),\n    (0x4D, BitPattern(\"0x0x0000\"), H264Profile.PROFILE_MAIN),\n    (0x64, BitPattern(\"00000000\"), H264Profile.PROFILE_HIGH),\n    (0x64, BitPattern(\"00001100\"), H264Profile.PROFILE_CONSTRAINED_HIGH),\n    (0xF4, BitPattern(\"00000000\"), H264Profile.PROFILE_PREDICTIVE_HIGH_444),",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "SSRC_INFO_ATTRS",
        "kind": 5,
        "importPath": "src.selkies.webrtc.sdp",
        "description": "src.selkies.webrtc.sdp",
        "peekOfCode": "SSRC_INFO_ATTRS = [\"cname\", \"msid\", \"mslabel\", \"label\"]\nclass MediaDescription:\n    def __init__(self, kind: str, port: int, profile: str, fmt: list[Any]) -> None:\n        # rtp\n        self.kind = kind\n        self.port = port\n        self.host: Optional[str] = None\n        self.profile = profile\n        self.direction: Optional[str] = None\n        self.msid: Optional[str] = None",
        "detail": "src.selkies.webrtc.sdp",
        "documentation": {}
    },
    {
        "label": "RTCStats",
        "kind": 6,
        "importPath": "src.selkies.webrtc.stats",
        "description": "src.selkies.webrtc.stats",
        "peekOfCode": "class RTCStats:\n    \"\"\"\n    Base class for statistics.\n    \"\"\"\n    timestamp: datetime.datetime\n    \"The timestamp associated with this object.\"\n    type: str\n    id: str\n@dataclass\nclass RTCRtpStreamStats(RTCStats):",
        "detail": "src.selkies.webrtc.stats",
        "documentation": {}
    },
    {
        "label": "RTCRtpStreamStats",
        "kind": 6,
        "importPath": "src.selkies.webrtc.stats",
        "description": "src.selkies.webrtc.stats",
        "peekOfCode": "class RTCRtpStreamStats(RTCStats):\n    ssrc: int\n    kind: str\n    transportId: str\n@dataclass\nclass RTCReceivedRtpStreamStats(RTCRtpStreamStats):\n    packetsReceived: int\n    packetsLost: int\n    jitter: int\n@dataclass",
        "detail": "src.selkies.webrtc.stats",
        "documentation": {}
    },
    {
        "label": "RTCReceivedRtpStreamStats",
        "kind": 6,
        "importPath": "src.selkies.webrtc.stats",
        "description": "src.selkies.webrtc.stats",
        "peekOfCode": "class RTCReceivedRtpStreamStats(RTCRtpStreamStats):\n    packetsReceived: int\n    packetsLost: int\n    jitter: int\n@dataclass\nclass RTCSentRtpStreamStats(RTCRtpStreamStats):\n    packetsSent: int\n    \"Total number of RTP packets sent for this SSRC.\"\n    bytesSent: int\n    \"Total number of bytes sent for this SSRC.\"",
        "detail": "src.selkies.webrtc.stats",
        "documentation": {}
    },
    {
        "label": "RTCSentRtpStreamStats",
        "kind": 6,
        "importPath": "src.selkies.webrtc.stats",
        "description": "src.selkies.webrtc.stats",
        "peekOfCode": "class RTCSentRtpStreamStats(RTCRtpStreamStats):\n    packetsSent: int\n    \"Total number of RTP packets sent for this SSRC.\"\n    bytesSent: int\n    \"Total number of bytes sent for this SSRC.\"\n@dataclass\nclass RTCInboundRtpStreamStats(RTCReceivedRtpStreamStats):\n    \"\"\"\n    The :class:`RTCInboundRtpStreamStats` dictionary represents the measurement\n    metrics for the incoming RTP media stream.",
        "detail": "src.selkies.webrtc.stats",
        "documentation": {}
    },
    {
        "label": "RTCInboundRtpStreamStats",
        "kind": 6,
        "importPath": "src.selkies.webrtc.stats",
        "description": "src.selkies.webrtc.stats",
        "peekOfCode": "class RTCInboundRtpStreamStats(RTCReceivedRtpStreamStats):\n    \"\"\"\n    The :class:`RTCInboundRtpStreamStats` dictionary represents the measurement\n    metrics for the incoming RTP media stream.\n    \"\"\"\n    pass\n@dataclass\nclass RTCRemoteInboundRtpStreamStats(RTCReceivedRtpStreamStats):\n    \"\"\"\n    The :class:`RTCRemoteInboundRtpStreamStats` dictionary represents the remote",
        "detail": "src.selkies.webrtc.stats",
        "documentation": {}
    },
    {
        "label": "RTCRemoteInboundRtpStreamStats",
        "kind": 6,
        "importPath": "src.selkies.webrtc.stats",
        "description": "src.selkies.webrtc.stats",
        "peekOfCode": "class RTCRemoteInboundRtpStreamStats(RTCReceivedRtpStreamStats):\n    \"\"\"\n    The :class:`RTCRemoteInboundRtpStreamStats` dictionary represents the remote\n    endpoint's measurement metrics for a particular incoming RTP stream.\n    \"\"\"\n    roundTripTime: float\n    fractionLost: float\n@dataclass\nclass RTCOutboundRtpStreamStats(RTCSentRtpStreamStats):\n    \"\"\"",
        "detail": "src.selkies.webrtc.stats",
        "documentation": {}
    },
    {
        "label": "RTCOutboundRtpStreamStats",
        "kind": 6,
        "importPath": "src.selkies.webrtc.stats",
        "description": "src.selkies.webrtc.stats",
        "peekOfCode": "class RTCOutboundRtpStreamStats(RTCSentRtpStreamStats):\n    \"\"\"\n    The :class:`RTCOutboundRtpStreamStats` dictionary represents the measurement\n    metrics for the outgoing RTP stream.\n    \"\"\"\n    trackId: str\n@dataclass\nclass RTCRemoteOutboundRtpStreamStats(RTCSentRtpStreamStats):\n    \"\"\"\n    The :class:`RTCRemoteOutboundRtpStreamStats` dictionary represents the remote",
        "detail": "src.selkies.webrtc.stats",
        "documentation": {}
    },
    {
        "label": "RTCRemoteOutboundRtpStreamStats",
        "kind": 6,
        "importPath": "src.selkies.webrtc.stats",
        "description": "src.selkies.webrtc.stats",
        "peekOfCode": "class RTCRemoteOutboundRtpStreamStats(RTCSentRtpStreamStats):\n    \"\"\"\n    The :class:`RTCRemoteOutboundRtpStreamStats` dictionary represents the remote\n    endpoint's measurement metrics for its outgoing RTP stream.\n    \"\"\"\n    remoteTimestamp: Optional[datetime.datetime] = None\n@dataclass\nclass RTCTransportStats(RTCStats):\n    packetsSent: int\n    \"Total number of packets sent over this transport.\"",
        "detail": "src.selkies.webrtc.stats",
        "documentation": {}
    },
    {
        "label": "RTCTransportStats",
        "kind": 6,
        "importPath": "src.selkies.webrtc.stats",
        "description": "src.selkies.webrtc.stats",
        "peekOfCode": "class RTCTransportStats(RTCStats):\n    packetsSent: int\n    \"Total number of packets sent over this transport.\"\n    packetsReceived: int\n    \"Total number of packets received over this transport.\"\n    bytesSent: int\n    \"Total number of bytes sent over this transport.\"\n    bytesReceived: int\n    \"Total number of bytes received over this transport.\"\n    iceRole: str",
        "detail": "src.selkies.webrtc.stats",
        "documentation": {}
    },
    {
        "label": "RTCStatsReport",
        "kind": 6,
        "importPath": "src.selkies.webrtc.stats",
        "description": "src.selkies.webrtc.stats",
        "peekOfCode": "class RTCStatsReport(dict):\n    \"\"\"\n    Provides statistics data about WebRTC connections as returned by the\n    :meth:`RTCPeerConnection.getStats()`, :meth:`RTCRtpReceiver.getStats()`\n    and :meth:`RTCRtpSender.getStats()` coroutines.\n    This object consists of a mapping of string identifiers to objects which\n    are instances of:\n    - :class:`RTCInboundRtpStreamStats`\n    - :class:`RTCOutboundRtpStreamStats`\n    - :class:`RTCRemoteInboundRtpStreamStats`",
        "detail": "src.selkies.webrtc.stats",
        "documentation": {}
    },
    {
        "label": "random16",
        "kind": 2,
        "importPath": "src.selkies.webrtc.utils",
        "description": "src.selkies.webrtc.utils",
        "peekOfCode": "def random16() -> int:\n    return unpack(\"!H\", os.urandom(2))[0]\ndef random32() -> int:\n    return unpack(\"!L\", os.urandom(4))[0]\ndef uint16_add(a: int, b: int) -> int:\n    \"\"\"\n    Return a + b.\n    \"\"\"\n    return (a + b) & 0xFFFF\ndef uint16_gt(a: int, b: int) -> bool:",
        "detail": "src.selkies.webrtc.utils",
        "documentation": {}
    },
    {
        "label": "random32",
        "kind": 2,
        "importPath": "src.selkies.webrtc.utils",
        "description": "src.selkies.webrtc.utils",
        "peekOfCode": "def random32() -> int:\n    return unpack(\"!L\", os.urandom(4))[0]\ndef uint16_add(a: int, b: int) -> int:\n    \"\"\"\n    Return a + b.\n    \"\"\"\n    return (a + b) & 0xFFFF\ndef uint16_gt(a: int, b: int) -> bool:\n    \"\"\"\n    Return a > b.",
        "detail": "src.selkies.webrtc.utils",
        "documentation": {}
    },
    {
        "label": "uint16_add",
        "kind": 2,
        "importPath": "src.selkies.webrtc.utils",
        "description": "src.selkies.webrtc.utils",
        "peekOfCode": "def uint16_add(a: int, b: int) -> int:\n    \"\"\"\n    Return a + b.\n    \"\"\"\n    return (a + b) & 0xFFFF\ndef uint16_gt(a: int, b: int) -> bool:\n    \"\"\"\n    Return a > b.\n    \"\"\"\n    half_mod = 0x8000",
        "detail": "src.selkies.webrtc.utils",
        "documentation": {}
    },
    {
        "label": "uint16_gt",
        "kind": 2,
        "importPath": "src.selkies.webrtc.utils",
        "description": "src.selkies.webrtc.utils",
        "peekOfCode": "def uint16_gt(a: int, b: int) -> bool:\n    \"\"\"\n    Return a > b.\n    \"\"\"\n    half_mod = 0x8000\n    return ((a < b) and ((b - a) > half_mod)) or ((a > b) and ((a - b) < half_mod))\ndef uint16_gte(a: int, b: int) -> bool:\n    \"\"\"\n    Return a >= b.\n    \"\"\"",
        "detail": "src.selkies.webrtc.utils",
        "documentation": {}
    },
    {
        "label": "uint16_gte",
        "kind": 2,
        "importPath": "src.selkies.webrtc.utils",
        "description": "src.selkies.webrtc.utils",
        "peekOfCode": "def uint16_gte(a: int, b: int) -> bool:\n    \"\"\"\n    Return a >= b.\n    \"\"\"\n    return (a == b) or uint16_gt(a, b)\ndef uint32_add(a: int, b: int) -> int:\n    \"\"\"\n    Return a + b.\n    \"\"\"\n    return (a + b) & 0xFFFFFFFF",
        "detail": "src.selkies.webrtc.utils",
        "documentation": {}
    },
    {
        "label": "uint32_add",
        "kind": 2,
        "importPath": "src.selkies.webrtc.utils",
        "description": "src.selkies.webrtc.utils",
        "peekOfCode": "def uint32_add(a: int, b: int) -> int:\n    \"\"\"\n    Return a + b.\n    \"\"\"\n    return (a + b) & 0xFFFFFFFF\ndef uint32_gt(a: int, b: int) -> bool:\n    \"\"\"\n    Return a > b.\n    \"\"\"\n    half_mod = 0x80000000",
        "detail": "src.selkies.webrtc.utils",
        "documentation": {}
    },
    {
        "label": "uint32_gt",
        "kind": 2,
        "importPath": "src.selkies.webrtc.utils",
        "description": "src.selkies.webrtc.utils",
        "peekOfCode": "def uint32_gt(a: int, b: int) -> bool:\n    \"\"\"\n    Return a > b.\n    \"\"\"\n    half_mod = 0x80000000\n    return ((a < b) and ((b - a) > half_mod)) or ((a > b) and ((a - b) < half_mod))\ndef uint32_gte(a: int, b: int) -> bool:\n    \"\"\"\n    Return a >= b.\n    \"\"\"",
        "detail": "src.selkies.webrtc.utils",
        "documentation": {}
    },
    {
        "label": "uint32_gte",
        "kind": 2,
        "importPath": "src.selkies.webrtc.utils",
        "description": "src.selkies.webrtc.utils",
        "peekOfCode": "def uint32_gte(a: int, b: int) -> bool:\n    \"\"\"\n    Return a >= b.\n    \"\"\"\n    return (a == b) or uint32_gt(a, b)",
        "detail": "src.selkies.webrtc.utils",
        "documentation": {}
    },
    {
        "label": "JsConfigCtypes",
        "kind": 6,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "class JsConfigCtypes(ctypes.Structure):\n    _fields_ = [\n        (\"name\", ctypes.c_char * CONTROLLER_NAME_MAX_LEN),\n        (\"vendor\", ctypes.c_uint16),\n        (\"product\", ctypes.c_uint16),\n        (\"version\", ctypes.c_uint16),\n        (\"num_btns\", ctypes.c_uint16),\n        (\"num_axes\", ctypes.c_uint16),\n        (\"btn_map\", ctypes.c_uint16 * INTERPOSER_MAX_BTNS),\n        (\"axes_map\", ctypes.c_uint8 * INTERPOSER_MAX_AXES)",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "GamepadMapper",
        "kind": 6,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "class GamepadMapper:\n    def __init__(self, config_template, client_input_name, client_num_btns, client_num_axes):\n        self.config = config_template\n        self.client_input_name = client_input_name\n    def get_mapped_events(self, client_event_idx, client_value, is_button_event):\n        internal_abstract_idx = -1\n        is_trigger_axis = False\n        is_hat_axis = False\n        target_evdev_type = None\n        final_value = 0 # This will be the raw value from the client or dpad direction",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "SelkiesGamepad",
        "kind": 6,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "class SelkiesGamepad:\n    def __init__(self, js_interposer_socket_path, evdev_interposer_socket_path, loop=None):\n        self.js_sock_path = js_interposer_socket_path\n        self.evdev_sock_path = evdev_interposer_socket_path\n        self.loop = loop or asyncio.get_event_loop()\n        self.mapper = None # Set by set_config\n        self.config_payload_cache = None # Cache for js_config_t\n        self.js_server = None\n        self.evdev_server = None\n        self.js_clients = {} # {writer: {'arch_bits': bits}}",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "WebRTCInputError",
        "kind": 6,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "class WebRTCInputError(Exception): pass\nclass WebRTCInput:\n    def __init__(\n        self,\n        gst_webrtc_app,\n        uinput_mouse_socket_path=\"\",\n        js_socket_path_prefix=\"/tmp\", \n        enable_clipboard=\"\",\n        enable_binary_clipboard=\"\",\n        enable_cursors=True,",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "WebRTCInput",
        "kind": 6,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "class WebRTCInput:\n    def __init__(\n        self,\n        gst_webrtc_app,\n        uinput_mouse_socket_path=\"\",\n        js_socket_path_prefix=\"/tmp\", \n        enable_clipboard=\"\",\n        enable_binary_clipboard=\"\",\n        enable_cursors=True,\n        cursor_size=16, ",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "get_js_event_packed",
        "kind": 2,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "def get_js_event_packed(ev_type, number, value):\n    \"\"\"Packs a js_event struct.\"\"\"\n    # struct js_event { __u32 time; __s16 value; __u8 type; __u8 number; };\n    ts_ms = int(time.time() * 1000) & 0xFFFFFFFF # Ensure it fits in u32\n    return struct.pack(\"=IhbB\", ts_ms, int(value), ev_type, number)\ndef get_evdev_events_packed(ev_type, ev_code, ev_value, client_arch_bits):\n    \"\"\"Packs an input_event struct and a SYN_REPORT, using client architecture for timeval.\"\"\"\n    # struct input_event { struct timeval time; __u16 type; __u16 code; __s32 value; };\n    # struct timeval { time_t tv_sec; suseconds_t tv_usec; };\n    # time_t and suseconds_t are 'long' on 32-bit, 'long long' (usually) on 64-bit for tv_sec,",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "get_evdev_events_packed",
        "kind": 2,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "def get_evdev_events_packed(ev_type, ev_code, ev_value, client_arch_bits):\n    \"\"\"Packs an input_event struct and a SYN_REPORT, using client architecture for timeval.\"\"\"\n    # struct input_event { struct timeval time; __u16 type; __u16 code; __s32 value; };\n    # struct timeval { time_t tv_sec; suseconds_t tv_usec; };\n    # time_t and suseconds_t are 'long' on 32-bit, 'long long' (usually) on 64-bit for tv_sec,\n    # and 'long' for tv_usec. The C interposer sends sizeof(unsigned long).\n    now = time.time()\n    ts_sec = int(now)\n    ts_usec = int((now - ts_sec) * 1_000_000)\n    if client_arch_bits == 64: # Assuming 'long' is 8 bytes for timeval members on 64-bit client",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "normalize_axis_value",
        "kind": 2,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "def normalize_axis_value(client_value, is_trigger, is_hat, for_js_event=False):\n    \"\"\"\n    Normalizes client axis value.\n    If for_js_event is True and is_hat is True, it scales to the full axis range.\n    \"\"\"\n    if is_hat:\n        hat_val = int(max(ABS_HAT_MIN_VAL, min(ABS_HAT_MAX_VAL, round(client_value))))\n        if for_js_event:\n            # For JS, D-pad axes need to be full range, not -1/0/1\n            return hat_val * ABS_MAX_VAL",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "logger_webrtc_input",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "logger_webrtc_input = logging.getLogger(\"webrtc_input\")\nlogger_selkies_gamepad = logging.getLogger(\"selkies_gamepad\")\n# EVDEV Event Codes (from linux/input-event-codes.h)\nEV_SYN = 0x00\nEV_KEY = 0x01\nEV_REL = 0x02\nEV_ABS = 0x03\nEV_MSC = 0x04\nSYN_REPORT = 0\n# Mouse Button Codes (from linux/input-event-codes.h)",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "logger_selkies_gamepad",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "logger_selkies_gamepad = logging.getLogger(\"selkies_gamepad\")\n# EVDEV Event Codes (from linux/input-event-codes.h)\nEV_SYN = 0x00\nEV_KEY = 0x01\nEV_REL = 0x02\nEV_ABS = 0x03\nEV_MSC = 0x04\nSYN_REPORT = 0\n# Mouse Button Codes (from linux/input-event-codes.h)\nBTN_MOUSE = 0x110",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "EV_SYN",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "EV_SYN = 0x00\nEV_KEY = 0x01\nEV_REL = 0x02\nEV_ABS = 0x03\nEV_MSC = 0x04\nSYN_REPORT = 0\n# Mouse Button Codes (from linux/input-event-codes.h)\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "EV_KEY",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "EV_KEY = 0x01\nEV_REL = 0x02\nEV_ABS = 0x03\nEV_MSC = 0x04\nSYN_REPORT = 0\n# Mouse Button Codes (from linux/input-event-codes.h)\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "EV_REL",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "EV_REL = 0x02\nEV_ABS = 0x03\nEV_MSC = 0x04\nSYN_REPORT = 0\n# Mouse Button Codes (from linux/input-event-codes.h)\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "EV_ABS",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "EV_ABS = 0x03\nEV_MSC = 0x04\nSYN_REPORT = 0\n# Mouse Button Codes (from linux/input-event-codes.h)\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "EV_MSC",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "EV_MSC = 0x04\nSYN_REPORT = 0\n# Mouse Button Codes (from linux/input-event-codes.h)\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114\n# Gamepad Button Codes",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "SYN_REPORT",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "SYN_REPORT = 0\n# Mouse Button Codes (from linux/input-event-codes.h)\nBTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114\n# Gamepad Button Codes\nBTN_A = 0x130       # Or BTN_SOUTH",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "BTN_MOUSE",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "BTN_MOUSE = 0x110\nBTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114\n# Gamepad Button Codes\nBTN_A = 0x130       # Or BTN_SOUTH\nBTN_B = 0x131       # Or BTN_EAST\nBTN_C = 0x132       # Typically BTN_C in evdev, for matching XBox360 bitmask",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "BTN_LEFT",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "BTN_LEFT = 0x110\nBTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114\n# Gamepad Button Codes\nBTN_A = 0x130       # Or BTN_SOUTH\nBTN_B = 0x131       # Or BTN_EAST\nBTN_C = 0x132       # Typically BTN_C in evdev, for matching XBox360 bitmask\nBTN_X = 0x133       # Or BTN_NORTH",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "BTN_RIGHT",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "BTN_RIGHT = 0x111\nBTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114\n# Gamepad Button Codes\nBTN_A = 0x130       # Or BTN_SOUTH\nBTN_B = 0x131       # Or BTN_EAST\nBTN_C = 0x132       # Typically BTN_C in evdev, for matching XBox360 bitmask\nBTN_X = 0x133       # Or BTN_NORTH\nBTN_Y = 0x134       # Or BTN_WEST",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "BTN_MIDDLE",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "BTN_MIDDLE = 0x112\nBTN_SIDE = 0x113\nBTN_EXTRA = 0x114\n# Gamepad Button Codes\nBTN_A = 0x130       # Or BTN_SOUTH\nBTN_B = 0x131       # Or BTN_EAST\nBTN_C = 0x132       # Typically BTN_C in evdev, for matching XBox360 bitmask\nBTN_X = 0x133       # Or BTN_NORTH\nBTN_Y = 0x134       # Or BTN_WEST\nBTN_Z = 0x135       # Typically BTN_Z in evdev, for matching XBox360 bitmask",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "BTN_SIDE",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "BTN_SIDE = 0x113\nBTN_EXTRA = 0x114\n# Gamepad Button Codes\nBTN_A = 0x130       # Or BTN_SOUTH\nBTN_B = 0x131       # Or BTN_EAST\nBTN_C = 0x132       # Typically BTN_C in evdev, for matching XBox360 bitmask\nBTN_X = 0x133       # Or BTN_NORTH\nBTN_Y = 0x134       # Or BTN_WEST\nBTN_Z = 0x135       # Typically BTN_Z in evdev, for matching XBox360 bitmask\nBTN_TL = 0x136      # Left Bumper",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "BTN_EXTRA",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "BTN_EXTRA = 0x114\n# Gamepad Button Codes\nBTN_A = 0x130       # Or BTN_SOUTH\nBTN_B = 0x131       # Or BTN_EAST\nBTN_C = 0x132       # Typically BTN_C in evdev, for matching XBox360 bitmask\nBTN_X = 0x133       # Or BTN_NORTH\nBTN_Y = 0x134       # Or BTN_WEST\nBTN_Z = 0x135       # Typically BTN_Z in evdev, for matching XBox360 bitmask\nBTN_TL = 0x136      # Left Bumper\nBTN_TR = 0x137      # Right Bumper",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "BTN_A",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "BTN_A = 0x130       # Or BTN_SOUTH\nBTN_B = 0x131       # Or BTN_EAST\nBTN_C = 0x132       # Typically BTN_C in evdev, for matching XBox360 bitmask\nBTN_X = 0x133       # Or BTN_NORTH\nBTN_Y = 0x134       # Or BTN_WEST\nBTN_Z = 0x135       # Typically BTN_Z in evdev, for matching XBox360 bitmask\nBTN_TL = 0x136      # Left Bumper\nBTN_TR = 0x137      # Right Bumper\nBTN_SELECT = 0x13a  # Back button\nBTN_START = 0x13b   # Start button",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "BTN_B",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "BTN_B = 0x131       # Or BTN_EAST\nBTN_C = 0x132       # Typically BTN_C in evdev, for matching XBox360 bitmask\nBTN_X = 0x133       # Or BTN_NORTH\nBTN_Y = 0x134       # Or BTN_WEST\nBTN_Z = 0x135       # Typically BTN_Z in evdev, for matching XBox360 bitmask\nBTN_TL = 0x136      # Left Bumper\nBTN_TR = 0x137      # Right Bumper\nBTN_SELECT = 0x13a  # Back button\nBTN_START = 0x13b   # Start button\nBTN_MODE = 0x13c    # Xbox/Guide button",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "BTN_C",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "BTN_C = 0x132       # Typically BTN_C in evdev, for matching XBox360 bitmask\nBTN_X = 0x133       # Or BTN_NORTH\nBTN_Y = 0x134       # Or BTN_WEST\nBTN_Z = 0x135       # Typically BTN_Z in evdev, for matching XBox360 bitmask\nBTN_TL = 0x136      # Left Bumper\nBTN_TR = 0x137      # Right Bumper\nBTN_SELECT = 0x13a  # Back button\nBTN_START = 0x13b   # Start button\nBTN_MODE = 0x13c    # Xbox/Guide button\nBTN_THUMBL = 0x13d  # Left Thumbstick click",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "BTN_X",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "BTN_X = 0x133       # Or BTN_NORTH\nBTN_Y = 0x134       # Or BTN_WEST\nBTN_Z = 0x135       # Typically BTN_Z in evdev, for matching XBox360 bitmask\nBTN_TL = 0x136      # Left Bumper\nBTN_TR = 0x137      # Right Bumper\nBTN_SELECT = 0x13a  # Back button\nBTN_START = 0x13b   # Start button\nBTN_MODE = 0x13c    # Xbox/Guide button\nBTN_THUMBL = 0x13d  # Left Thumbstick click\nBTN_THUMBR = 0x13e  # Right Thumbstick click",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "BTN_Y",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "BTN_Y = 0x134       # Or BTN_WEST\nBTN_Z = 0x135       # Typically BTN_Z in evdev, for matching XBox360 bitmask\nBTN_TL = 0x136      # Left Bumper\nBTN_TR = 0x137      # Right Bumper\nBTN_SELECT = 0x13a  # Back button\nBTN_START = 0x13b   # Start button\nBTN_MODE = 0x13c    # Xbox/Guide button\nBTN_THUMBL = 0x13d  # Left Thumbstick click\nBTN_THUMBR = 0x13e  # Right Thumbstick click\n# Absolute Axis Codes",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "BTN_Z",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "BTN_Z = 0x135       # Typically BTN_Z in evdev, for matching XBox360 bitmask\nBTN_TL = 0x136      # Left Bumper\nBTN_TR = 0x137      # Right Bumper\nBTN_SELECT = 0x13a  # Back button\nBTN_START = 0x13b   # Start button\nBTN_MODE = 0x13c    # Xbox/Guide button\nBTN_THUMBL = 0x13d  # Left Thumbstick click\nBTN_THUMBR = 0x13e  # Right Thumbstick click\n# Absolute Axis Codes\nABS_X = 0x00",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "BTN_TL",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "BTN_TL = 0x136      # Left Bumper\nBTN_TR = 0x137      # Right Bumper\nBTN_SELECT = 0x13a  # Back button\nBTN_START = 0x13b   # Start button\nBTN_MODE = 0x13c    # Xbox/Guide button\nBTN_THUMBL = 0x13d  # Left Thumbstick click\nBTN_THUMBR = 0x13e  # Right Thumbstick click\n# Absolute Axis Codes\nABS_X = 0x00\nABS_Y = 0x01",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "BTN_TR",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "BTN_TR = 0x137      # Right Bumper\nBTN_SELECT = 0x13a  # Back button\nBTN_START = 0x13b   # Start button\nBTN_MODE = 0x13c    # Xbox/Guide button\nBTN_THUMBL = 0x13d  # Left Thumbstick click\nBTN_THUMBR = 0x13e  # Right Thumbstick click\n# Absolute Axis Codes\nABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02      # Often Left Trigger",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "BTN_SELECT",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "BTN_SELECT = 0x13a  # Back button\nBTN_START = 0x13b   # Start button\nBTN_MODE = 0x13c    # Xbox/Guide button\nBTN_THUMBL = 0x13d  # Left Thumbstick click\nBTN_THUMBR = 0x13e  # Right Thumbstick click\n# Absolute Axis Codes\nABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02      # Often Left Trigger\nABS_RX = 0x03",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "BTN_START",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "BTN_START = 0x13b   # Start button\nBTN_MODE = 0x13c    # Xbox/Guide button\nBTN_THUMBL = 0x13d  # Left Thumbstick click\nBTN_THUMBR = 0x13e  # Right Thumbstick click\n# Absolute Axis Codes\nABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02      # Often Left Trigger\nABS_RX = 0x03\nABS_RY = 0x04",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "BTN_MODE",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "BTN_MODE = 0x13c    # Xbox/Guide button\nBTN_THUMBL = 0x13d  # Left Thumbstick click\nBTN_THUMBR = 0x13e  # Right Thumbstick click\n# Absolute Axis Codes\nABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02      # Often Left Trigger\nABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05     # Often Right Trigger",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "BTN_THUMBL",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "BTN_THUMBL = 0x13d  # Left Thumbstick click\nBTN_THUMBR = 0x13e  # Right Thumbstick click\n# Absolute Axis Codes\nABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02      # Often Left Trigger\nABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05     # Often Right Trigger\nABS_HAT0X = 0x10",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "BTN_THUMBR",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "BTN_THUMBR = 0x13e  # Right Thumbstick click\n# Absolute Axis Codes\nABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02      # Often Left Trigger\nABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05     # Often Right Trigger\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "ABS_X",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "ABS_X = 0x00\nABS_Y = 0x01\nABS_Z = 0x02      # Often Left Trigger\nABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05     # Often Right Trigger\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\n# JS Event types (from linux/joystick.h, used by the JS-like interface)\nJS_EVENT_BUTTON = 0x01",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "ABS_Y",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "ABS_Y = 0x01\nABS_Z = 0x02      # Often Left Trigger\nABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05     # Often Right Trigger\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\n# JS Event types (from linux/joystick.h, used by the JS-like interface)\nJS_EVENT_BUTTON = 0x01\nJS_EVENT_AXIS = 0x02",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "ABS_Z",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "ABS_Z = 0x02      # Often Left Trigger\nABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05     # Often Right Trigger\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\n# JS Event types (from linux/joystick.h, used by the JS-like interface)\nJS_EVENT_BUTTON = 0x01\nJS_EVENT_AXIS = 0x02\nJS_EVENT_INIT = 0x80",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "ABS_RX",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "ABS_RX = 0x03\nABS_RY = 0x04\nABS_RZ = 0x05     # Often Right Trigger\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\n# JS Event types (from linux/joystick.h, used by the JS-like interface)\nJS_EVENT_BUTTON = 0x01\nJS_EVENT_AXIS = 0x02\nJS_EVENT_INIT = 0x80\n# For js_config_t struct packing for the C interposer",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "ABS_RY",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "ABS_RY = 0x04\nABS_RZ = 0x05     # Often Right Trigger\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\n# JS Event types (from linux/joystick.h, used by the JS-like interface)\nJS_EVENT_BUTTON = 0x01\nJS_EVENT_AXIS = 0x02\nJS_EVENT_INIT = 0x80\n# For js_config_t struct packing for the C interposer\n# These are the max sizes in the C struct js_config_t",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "ABS_RZ",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "ABS_RZ = 0x05     # Often Right Trigger\nABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\n# JS Event types (from linux/joystick.h, used by the JS-like interface)\nJS_EVENT_BUTTON = 0x01\nJS_EVENT_AXIS = 0x02\nJS_EVENT_INIT = 0x80\n# For js_config_t struct packing for the C interposer\n# These are the max sizes in the C struct js_config_t\nINTERPOSER_MAX_BTNS = 512",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "ABS_HAT0X",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "ABS_HAT0X = 0x10\nABS_HAT0Y = 0x11\n# JS Event types (from linux/joystick.h, used by the JS-like interface)\nJS_EVENT_BUTTON = 0x01\nJS_EVENT_AXIS = 0x02\nJS_EVENT_INIT = 0x80\n# For js_config_t struct packing for the C interposer\n# These are the max sizes in the C struct js_config_t\nINTERPOSER_MAX_BTNS = 512\nINTERPOSER_MAX_AXES = 64",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "ABS_HAT0Y",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "ABS_HAT0Y = 0x11\n# JS Event types (from linux/joystick.h, used by the JS-like interface)\nJS_EVENT_BUTTON = 0x01\nJS_EVENT_AXIS = 0x02\nJS_EVENT_INIT = 0x80\n# For js_config_t struct packing for the C interposer\n# These are the max sizes in the C struct js_config_t\nINTERPOSER_MAX_BTNS = 512\nINTERPOSER_MAX_AXES = 64\nCONTROLLER_NAME_MAX_LEN = 255 ",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "JS_EVENT_BUTTON",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "JS_EVENT_BUTTON = 0x01\nJS_EVENT_AXIS = 0x02\nJS_EVENT_INIT = 0x80\n# For js_config_t struct packing for the C interposer\n# These are the max sizes in the C struct js_config_t\nINTERPOSER_MAX_BTNS = 512\nINTERPOSER_MAX_AXES = 64\nCONTROLLER_NAME_MAX_LEN = 255 \nC_INTERPOSER_STRUCT_SIZE = 1360\n# Max clipboard chunk size",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "JS_EVENT_AXIS",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "JS_EVENT_AXIS = 0x02\nJS_EVENT_INIT = 0x80\n# For js_config_t struct packing for the C interposer\n# These are the max sizes in the C struct js_config_t\nINTERPOSER_MAX_BTNS = 512\nINTERPOSER_MAX_AXES = 64\nCONTROLLER_NAME_MAX_LEN = 255 \nC_INTERPOSER_STRUCT_SIZE = 1360\n# Max clipboard chunk size\nCLIPBOARD_CHUNK_SIZE = 750 * 1024 ",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "JS_EVENT_INIT",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "JS_EVENT_INIT = 0x80\n# For js_config_t struct packing for the C interposer\n# These are the max sizes in the C struct js_config_t\nINTERPOSER_MAX_BTNS = 512\nINTERPOSER_MAX_AXES = 64\nCONTROLLER_NAME_MAX_LEN = 255 \nC_INTERPOSER_STRUCT_SIZE = 1360\n# Max clipboard chunk size\nCLIPBOARD_CHUNK_SIZE = 750 * 1024 \n# For mouse input to send fake back and forward events",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "INTERPOSER_MAX_BTNS",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "INTERPOSER_MAX_BTNS = 512\nINTERPOSER_MAX_AXES = 64\nCONTROLLER_NAME_MAX_LEN = 255 \nC_INTERPOSER_STRUCT_SIZE = 1360\n# Max clipboard chunk size\nCLIPBOARD_CHUNK_SIZE = 750 * 1024 \n# For mouse input to send fake back and forward events\nKEYSYM_ALT_L = 0xFFE9     # Left Alt keysym\nKEYSYM_LEFT_ARROW = 0xFF51 # Left Arrow keysym\nKEYSYM_RIGHT_ARROW = 0xFF53# Right Arrow keysym",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "INTERPOSER_MAX_AXES",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "INTERPOSER_MAX_AXES = 64\nCONTROLLER_NAME_MAX_LEN = 255 \nC_INTERPOSER_STRUCT_SIZE = 1360\n# Max clipboard chunk size\nCLIPBOARD_CHUNK_SIZE = 750 * 1024 \n# For mouse input to send fake back and forward events\nKEYSYM_ALT_L = 0xFFE9     # Left Alt keysym\nKEYSYM_LEFT_ARROW = 0xFF51 # Left Arrow keysym\nKEYSYM_RIGHT_ARROW = 0xFF53# Right Arrow keysym\n# Import keysyms",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "CONTROLLER_NAME_MAX_LEN",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "CONTROLLER_NAME_MAX_LEN = 255 \nC_INTERPOSER_STRUCT_SIZE = 1360\n# Max clipboard chunk size\nCLIPBOARD_CHUNK_SIZE = 750 * 1024 \n# For mouse input to send fake back and forward events\nKEYSYM_ALT_L = 0xFFE9     # Left Alt keysym\nKEYSYM_LEFT_ARROW = 0xFF51 # Left Arrow keysym\nKEYSYM_RIGHT_ARROW = 0xFF53# Right Arrow keysym\n# Import keysyms\ntry:",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "C_INTERPOSER_STRUCT_SIZE",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "C_INTERPOSER_STRUCT_SIZE = 1360\n# Max clipboard chunk size\nCLIPBOARD_CHUNK_SIZE = 750 * 1024 \n# For mouse input to send fake back and forward events\nKEYSYM_ALT_L = 0xFFE9     # Left Alt keysym\nKEYSYM_LEFT_ARROW = 0xFF51 # Left Arrow keysym\nKEYSYM_RIGHT_ARROW = 0xFF53# Right Arrow keysym\n# Import keysyms\ntry:\n    from .server_keysym_map import X11_KEYSYM_MAP",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "CLIPBOARD_CHUNK_SIZE",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "CLIPBOARD_CHUNK_SIZE = 750 * 1024 \n# For mouse input to send fake back and forward events\nKEYSYM_ALT_L = 0xFFE9     # Left Alt keysym\nKEYSYM_LEFT_ARROW = 0xFF51 # Left Arrow keysym\nKEYSYM_RIGHT_ARROW = 0xFF53# Right Arrow keysym\n# Import keysyms\ntry:\n    from .server_keysym_map import X11_KEYSYM_MAP\nexcept ImportError:\n    logger_webrtc_input = logging.getLogger(\"webrtc_input_fallback_map_import\")",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "KEYSYM_ALT_L",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "KEYSYM_ALT_L = 0xFFE9     # Left Alt keysym\nKEYSYM_LEFT_ARROW = 0xFF51 # Left Arrow keysym\nKEYSYM_RIGHT_ARROW = 0xFF53# Right Arrow keysym\n# Import keysyms\ntry:\n    from .server_keysym_map import X11_KEYSYM_MAP\nexcept ImportError:\n    logger_webrtc_input = logging.getLogger(\"webrtc_input_fallback_map_import\")\n    logger_webrtc_input.warning(\n        \"server_keysym_map.py not found or X11_KEYSYM_MAP not defined. \"",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "KEYSYM_LEFT_ARROW",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "KEYSYM_LEFT_ARROW = 0xFF51 # Left Arrow keysym\nKEYSYM_RIGHT_ARROW = 0xFF53# Right Arrow keysym\n# Import keysyms\ntry:\n    from .server_keysym_map import X11_KEYSYM_MAP\nexcept ImportError:\n    logger_webrtc_input = logging.getLogger(\"webrtc_input_fallback_map_import\")\n    logger_webrtc_input.warning(\n        \"server_keysym_map.py not found or X11_KEYSYM_MAP not defined. \"\n        \"Keysym mapping will rely entirely on fallback.\"",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "KEYSYM_RIGHT_ARROW",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "KEYSYM_RIGHT_ARROW = 0xFF53# Right Arrow keysym\n# Import keysyms\ntry:\n    from .server_keysym_map import X11_KEYSYM_MAP\nexcept ImportError:\n    logger_webrtc_input = logging.getLogger(\"webrtc_input_fallback_map_import\")\n    logger_webrtc_input.warning(\n        \"server_keysym_map.py not found or X11_KEYSYM_MAP not defined. \"\n        \"Keysym mapping will rely entirely on fallback.\"\n    )",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "EXPECTED_C_STRUCT_SIZE",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "EXPECTED_C_STRUCT_SIZE = ctypes.sizeof(JsConfigCtypes)\nlogging.info(f\"Expected C js_config_t size (from ctypes): {EXPECTED_C_STRUCT_SIZE} bytes\")\nABS_MIN_VAL = -32767\nABS_MAX_VAL = 32767\nABS_TRIGGER_MIN_VAL = 0 # Triggers often 0-255 or 0-1023 for EVDEV\nABS_TRIGGER_MAX_VAL = 255 # Or 1023, or ABS_MAX_VAL depending on driver expectation\nABS_HAT_MIN_VAL = -1\nABS_HAT_MAX_VAL = 1\nSTANDARD_XPAD_CONFIG = {\n    \"name\": \"Microsoft X-Box 360 pad\",",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "ABS_MIN_VAL",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "ABS_MIN_VAL = -32767\nABS_MAX_VAL = 32767\nABS_TRIGGER_MIN_VAL = 0 # Triggers often 0-255 or 0-1023 for EVDEV\nABS_TRIGGER_MAX_VAL = 255 # Or 1023, or ABS_MAX_VAL depending on driver expectation\nABS_HAT_MIN_VAL = -1\nABS_HAT_MAX_VAL = 1\nSTANDARD_XPAD_CONFIG = {\n    \"name\": \"Microsoft X-Box 360 pad\",\n    \"vendor_id\": 0x045e,\n    \"product_id\": 0x028e,",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "ABS_MAX_VAL",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "ABS_MAX_VAL = 32767\nABS_TRIGGER_MIN_VAL = 0 # Triggers often 0-255 or 0-1023 for EVDEV\nABS_TRIGGER_MAX_VAL = 255 # Or 1023, or ABS_MAX_VAL depending on driver expectation\nABS_HAT_MIN_VAL = -1\nABS_HAT_MAX_VAL = 1\nSTANDARD_XPAD_CONFIG = {\n    \"name\": \"Microsoft X-Box 360 pad\",\n    \"vendor_id\": 0x045e,\n    \"product_id\": 0x028e,\n    \"version\": 0x0114,",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "ABS_TRIGGER_MIN_VAL",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "ABS_TRIGGER_MIN_VAL = 0 # Triggers often 0-255 or 0-1023 for EVDEV\nABS_TRIGGER_MAX_VAL = 255 # Or 1023, or ABS_MAX_VAL depending on driver expectation\nABS_HAT_MIN_VAL = -1\nABS_HAT_MAX_VAL = 1\nSTANDARD_XPAD_CONFIG = {\n    \"name\": \"Microsoft X-Box 360 pad\",\n    \"vendor_id\": 0x045e,\n    \"product_id\": 0x028e,\n    \"version\": 0x0114,\n    # EVDEV codes. The order here defines our internal abstract button indices.",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "ABS_TRIGGER_MAX_VAL",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "ABS_TRIGGER_MAX_VAL = 255 # Or 1023, or ABS_MAX_VAL depending on driver expectation\nABS_HAT_MIN_VAL = -1\nABS_HAT_MAX_VAL = 1\nSTANDARD_XPAD_CONFIG = {\n    \"name\": \"Microsoft X-Box 360 pad\",\n    \"vendor_id\": 0x045e,\n    \"product_id\": 0x028e,\n    \"version\": 0x0114,\n    # EVDEV codes. The order here defines our internal abstract button indices.\n    # This list is now cleaned up to match a standard controller layout.",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "ABS_HAT_MIN_VAL",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "ABS_HAT_MIN_VAL = -1\nABS_HAT_MAX_VAL = 1\nSTANDARD_XPAD_CONFIG = {\n    \"name\": \"Microsoft X-Box 360 pad\",\n    \"vendor_id\": 0x045e,\n    \"product_id\": 0x028e,\n    \"version\": 0x0114,\n    # EVDEV codes. The order here defines our internal abstract button indices.\n    # This list is now cleaned up to match a standard controller layout.\n    \"btn_map\": [",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "ABS_HAT_MAX_VAL",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "ABS_HAT_MAX_VAL = 1\nSTANDARD_XPAD_CONFIG = {\n    \"name\": \"Microsoft X-Box 360 pad\",\n    \"vendor_id\": 0x045e,\n    \"product_id\": 0x028e,\n    \"version\": 0x0114,\n    # EVDEV codes. The order here defines our internal abstract button indices.\n    # This list is now cleaned up to match a standard controller layout.\n    \"btn_map\": [\n        BTN_A,      # Internal abstract button 0",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "STANDARD_XPAD_CONFIG",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "STANDARD_XPAD_CONFIG = {\n    \"name\": \"Microsoft X-Box 360 pad\",\n    \"vendor_id\": 0x045e,\n    \"product_id\": 0x028e,\n    \"version\": 0x0114,\n    # EVDEV codes. The order here defines our internal abstract button indices.\n    # This list is now cleaned up to match a standard controller layout.\n    \"btn_map\": [\n        BTN_A,      # Internal abstract button 0\n        BTN_B,      # Internal abstract button 1",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "MOUSE_POSITION",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "MOUSE_POSITION = 10\nMOUSE_MOVE = 11\nMOUSE_SCROLL_UP = 20\nMOUSE_SCROLL_DOWN = 21\nMOUSE_SCROLL_LEFT = 22\nMOUSE_SCROLL_RIGHT = 23\nMOUSE_BUTTON_PRESS = 30\nMOUSE_BUTTON_RELEASE = 31\nMOUSE_BUTTON = 40\nMOUSE_BUTTON_LEFT_ID = 41 ",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "MOUSE_MOVE",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "MOUSE_MOVE = 11\nMOUSE_SCROLL_UP = 20\nMOUSE_SCROLL_DOWN = 21\nMOUSE_SCROLL_LEFT = 22\nMOUSE_SCROLL_RIGHT = 23\nMOUSE_BUTTON_PRESS = 30\nMOUSE_BUTTON_RELEASE = 31\nMOUSE_BUTTON = 40\nMOUSE_BUTTON_LEFT_ID = 41 \nMOUSE_BUTTON_MIDDLE_ID = 42",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "MOUSE_SCROLL_UP",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "MOUSE_SCROLL_UP = 20\nMOUSE_SCROLL_DOWN = 21\nMOUSE_SCROLL_LEFT = 22\nMOUSE_SCROLL_RIGHT = 23\nMOUSE_BUTTON_PRESS = 30\nMOUSE_BUTTON_RELEASE = 31\nMOUSE_BUTTON = 40\nMOUSE_BUTTON_LEFT_ID = 41 \nMOUSE_BUTTON_MIDDLE_ID = 42\nMOUSE_BUTTON_RIGHT_ID = 43",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "MOUSE_SCROLL_DOWN",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "MOUSE_SCROLL_DOWN = 21\nMOUSE_SCROLL_LEFT = 22\nMOUSE_SCROLL_RIGHT = 23\nMOUSE_BUTTON_PRESS = 30\nMOUSE_BUTTON_RELEASE = 31\nMOUSE_BUTTON = 40\nMOUSE_BUTTON_LEFT_ID = 41 \nMOUSE_BUTTON_MIDDLE_ID = 42\nMOUSE_BUTTON_RIGHT_ID = 43\n# UINPUT constants if uinput_mouse_socket_path is used",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "MOUSE_SCROLL_LEFT",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "MOUSE_SCROLL_LEFT = 22\nMOUSE_SCROLL_RIGHT = 23\nMOUSE_BUTTON_PRESS = 30\nMOUSE_BUTTON_RELEASE = 31\nMOUSE_BUTTON = 40\nMOUSE_BUTTON_LEFT_ID = 41 \nMOUSE_BUTTON_MIDDLE_ID = 42\nMOUSE_BUTTON_RIGHT_ID = 43\n# UINPUT constants if uinput_mouse_socket_path is used\nUINPUT_BTN_LEFT = (EV_KEY, BTN_LEFT) ",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "MOUSE_SCROLL_RIGHT",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "MOUSE_SCROLL_RIGHT = 23\nMOUSE_BUTTON_PRESS = 30\nMOUSE_BUTTON_RELEASE = 31\nMOUSE_BUTTON = 40\nMOUSE_BUTTON_LEFT_ID = 41 \nMOUSE_BUTTON_MIDDLE_ID = 42\nMOUSE_BUTTON_RIGHT_ID = 43\n# UINPUT constants if uinput_mouse_socket_path is used\nUINPUT_BTN_LEFT = (EV_KEY, BTN_LEFT) \nUINPUT_BTN_MIDDLE = (EV_KEY, BTN_MIDDLE) ",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "MOUSE_BUTTON_PRESS",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "MOUSE_BUTTON_PRESS = 30\nMOUSE_BUTTON_RELEASE = 31\nMOUSE_BUTTON = 40\nMOUSE_BUTTON_LEFT_ID = 41 \nMOUSE_BUTTON_MIDDLE_ID = 42\nMOUSE_BUTTON_RIGHT_ID = 43\n# UINPUT constants if uinput_mouse_socket_path is used\nUINPUT_BTN_LEFT = (EV_KEY, BTN_LEFT) \nUINPUT_BTN_MIDDLE = (EV_KEY, BTN_MIDDLE) \nUINPUT_BTN_RIGHT = (EV_KEY, BTN_RIGHT) ",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "MOUSE_BUTTON_RELEASE",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "MOUSE_BUTTON_RELEASE = 31\nMOUSE_BUTTON = 40\nMOUSE_BUTTON_LEFT_ID = 41 \nMOUSE_BUTTON_MIDDLE_ID = 42\nMOUSE_BUTTON_RIGHT_ID = 43\n# UINPUT constants if uinput_mouse_socket_path is used\nUINPUT_BTN_LEFT = (EV_KEY, BTN_LEFT) \nUINPUT_BTN_MIDDLE = (EV_KEY, BTN_MIDDLE) \nUINPUT_BTN_RIGHT = (EV_KEY, BTN_RIGHT) \nUINPUT_REL_X = (EV_REL, 0x00) # REL_X",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "MOUSE_BUTTON",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "MOUSE_BUTTON = 40\nMOUSE_BUTTON_LEFT_ID = 41 \nMOUSE_BUTTON_MIDDLE_ID = 42\nMOUSE_BUTTON_RIGHT_ID = 43\n# UINPUT constants if uinput_mouse_socket_path is used\nUINPUT_BTN_LEFT = (EV_KEY, BTN_LEFT) \nUINPUT_BTN_MIDDLE = (EV_KEY, BTN_MIDDLE) \nUINPUT_BTN_RIGHT = (EV_KEY, BTN_RIGHT) \nUINPUT_REL_X = (EV_REL, 0x00) # REL_X\nUINPUT_REL_Y = (EV_REL, 0x01) # REL_Y",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "MOUSE_BUTTON_LEFT_ID",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "MOUSE_BUTTON_LEFT_ID = 41 \nMOUSE_BUTTON_MIDDLE_ID = 42\nMOUSE_BUTTON_RIGHT_ID = 43\n# UINPUT constants if uinput_mouse_socket_path is used\nUINPUT_BTN_LEFT = (EV_KEY, BTN_LEFT) \nUINPUT_BTN_MIDDLE = (EV_KEY, BTN_MIDDLE) \nUINPUT_BTN_RIGHT = (EV_KEY, BTN_RIGHT) \nUINPUT_REL_X = (EV_REL, 0x00) # REL_X\nUINPUT_REL_Y = (EV_REL, 0x01) # REL_Y\nUINPUT_REL_WHEEL = (EV_REL, 0x08) # REL_WHEEL",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "MOUSE_BUTTON_MIDDLE_ID",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "MOUSE_BUTTON_MIDDLE_ID = 42\nMOUSE_BUTTON_RIGHT_ID = 43\n# UINPUT constants if uinput_mouse_socket_path is used\nUINPUT_BTN_LEFT = (EV_KEY, BTN_LEFT) \nUINPUT_BTN_MIDDLE = (EV_KEY, BTN_MIDDLE) \nUINPUT_BTN_RIGHT = (EV_KEY, BTN_RIGHT) \nUINPUT_REL_X = (EV_REL, 0x00) # REL_X\nUINPUT_REL_Y = (EV_REL, 0x01) # REL_Y\nUINPUT_REL_WHEEL = (EV_REL, 0x08) # REL_WHEEL\nMOUSE_BUTTON_MAP = {",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "MOUSE_BUTTON_RIGHT_ID",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "MOUSE_BUTTON_RIGHT_ID = 43\n# UINPUT constants if uinput_mouse_socket_path is used\nUINPUT_BTN_LEFT = (EV_KEY, BTN_LEFT) \nUINPUT_BTN_MIDDLE = (EV_KEY, BTN_MIDDLE) \nUINPUT_BTN_RIGHT = (EV_KEY, BTN_RIGHT) \nUINPUT_REL_X = (EV_REL, 0x00) # REL_X\nUINPUT_REL_Y = (EV_REL, 0x01) # REL_Y\nUINPUT_REL_WHEEL = (EV_REL, 0x08) # REL_WHEEL\nMOUSE_BUTTON_MAP = {\n    MOUSE_BUTTON_LEFT_ID: {\"uinput\": UINPUT_BTN_LEFT, \"pynput\": pynput.mouse.Button.left},",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "UINPUT_BTN_LEFT",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "UINPUT_BTN_LEFT = (EV_KEY, BTN_LEFT) \nUINPUT_BTN_MIDDLE = (EV_KEY, BTN_MIDDLE) \nUINPUT_BTN_RIGHT = (EV_KEY, BTN_RIGHT) \nUINPUT_REL_X = (EV_REL, 0x00) # REL_X\nUINPUT_REL_Y = (EV_REL, 0x01) # REL_Y\nUINPUT_REL_WHEEL = (EV_REL, 0x08) # REL_WHEEL\nMOUSE_BUTTON_MAP = {\n    MOUSE_BUTTON_LEFT_ID: {\"uinput\": UINPUT_BTN_LEFT, \"pynput\": pynput.mouse.Button.left},\n    MOUSE_BUTTON_MIDDLE_ID: {\"uinput\": UINPUT_BTN_MIDDLE, \"pynput\": pynput.mouse.Button.middle},\n    MOUSE_BUTTON_RIGHT_ID: {\"uinput\": UINPUT_BTN_RIGHT, \"pynput\": pynput.mouse.Button.right},",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "UINPUT_BTN_MIDDLE",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "UINPUT_BTN_MIDDLE = (EV_KEY, BTN_MIDDLE) \nUINPUT_BTN_RIGHT = (EV_KEY, BTN_RIGHT) \nUINPUT_REL_X = (EV_REL, 0x00) # REL_X\nUINPUT_REL_Y = (EV_REL, 0x01) # REL_Y\nUINPUT_REL_WHEEL = (EV_REL, 0x08) # REL_WHEEL\nMOUSE_BUTTON_MAP = {\n    MOUSE_BUTTON_LEFT_ID: {\"uinput\": UINPUT_BTN_LEFT, \"pynput\": pynput.mouse.Button.left},\n    MOUSE_BUTTON_MIDDLE_ID: {\"uinput\": UINPUT_BTN_MIDDLE, \"pynput\": pynput.mouse.Button.middle},\n    MOUSE_BUTTON_RIGHT_ID: {\"uinput\": UINPUT_BTN_RIGHT, \"pynput\": pynput.mouse.Button.right},\n}",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "UINPUT_BTN_RIGHT",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "UINPUT_BTN_RIGHT = (EV_KEY, BTN_RIGHT) \nUINPUT_REL_X = (EV_REL, 0x00) # REL_X\nUINPUT_REL_Y = (EV_REL, 0x01) # REL_Y\nUINPUT_REL_WHEEL = (EV_REL, 0x08) # REL_WHEEL\nMOUSE_BUTTON_MAP = {\n    MOUSE_BUTTON_LEFT_ID: {\"uinput\": UINPUT_BTN_LEFT, \"pynput\": pynput.mouse.Button.left},\n    MOUSE_BUTTON_MIDDLE_ID: {\"uinput\": UINPUT_BTN_MIDDLE, \"pynput\": pynput.mouse.Button.middle},\n    MOUSE_BUTTON_RIGHT_ID: {\"uinput\": UINPUT_BTN_RIGHT, \"pynput\": pynput.mouse.Button.right},\n}",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "UINPUT_REL_X",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "UINPUT_REL_X = (EV_REL, 0x00) # REL_X\nUINPUT_REL_Y = (EV_REL, 0x01) # REL_Y\nUINPUT_REL_WHEEL = (EV_REL, 0x08) # REL_WHEEL\nMOUSE_BUTTON_MAP = {\n    MOUSE_BUTTON_LEFT_ID: {\"uinput\": UINPUT_BTN_LEFT, \"pynput\": pynput.mouse.Button.left},\n    MOUSE_BUTTON_MIDDLE_ID: {\"uinput\": UINPUT_BTN_MIDDLE, \"pynput\": pynput.mouse.Button.middle},\n    MOUSE_BUTTON_RIGHT_ID: {\"uinput\": UINPUT_BTN_RIGHT, \"pynput\": pynput.mouse.Button.right},\n}",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "UINPUT_REL_Y",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "UINPUT_REL_Y = (EV_REL, 0x01) # REL_Y\nUINPUT_REL_WHEEL = (EV_REL, 0x08) # REL_WHEEL\nMOUSE_BUTTON_MAP = {\n    MOUSE_BUTTON_LEFT_ID: {\"uinput\": UINPUT_BTN_LEFT, \"pynput\": pynput.mouse.Button.left},\n    MOUSE_BUTTON_MIDDLE_ID: {\"uinput\": UINPUT_BTN_MIDDLE, \"pynput\": pynput.mouse.Button.middle},\n    MOUSE_BUTTON_RIGHT_ID: {\"uinput\": UINPUT_BTN_RIGHT, \"pynput\": pynput.mouse.Button.right},\n}",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "UINPUT_REL_WHEEL",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "UINPUT_REL_WHEEL = (EV_REL, 0x08) # REL_WHEEL\nMOUSE_BUTTON_MAP = {\n    MOUSE_BUTTON_LEFT_ID: {\"uinput\": UINPUT_BTN_LEFT, \"pynput\": pynput.mouse.Button.left},\n    MOUSE_BUTTON_MIDDLE_ID: {\"uinput\": UINPUT_BTN_MIDDLE, \"pynput\": pynput.mouse.Button.middle},\n    MOUSE_BUTTON_RIGHT_ID: {\"uinput\": UINPUT_BTN_RIGHT, \"pynput\": pynput.mouse.Button.right},\n}",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "MOUSE_BUTTON_MAP",
        "kind": 5,
        "importPath": "src.selkies.input_handler",
        "description": "src.selkies.input_handler",
        "peekOfCode": "MOUSE_BUTTON_MAP = {\n    MOUSE_BUTTON_LEFT_ID: {\"uinput\": UINPUT_BTN_LEFT, \"pynput\": pynput.mouse.Button.left},\n    MOUSE_BUTTON_MIDDLE_ID: {\"uinput\": UINPUT_BTN_MIDDLE, \"pynput\": pynput.mouse.Button.middle},\n    MOUSE_BUTTON_RIGHT_ID: {\"uinput\": UINPUT_BTN_RIGHT, \"pynput\": pynput.mouse.Button.right},\n}",
        "detail": "src.selkies.input_handler",
        "documentation": {}
    },
    {
        "label": "SelkiesAppError",
        "kind": 6,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "class SelkiesAppError(Exception):\n    pass\nclass SelkiesStreamingApp:\n    def __init__(\n        self,\n        async_event_loop,\n        framerate,\n        encoder,\n        data_streaming_server=None,\n        mode=\"websockets\",",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "SelkiesStreamingApp",
        "kind": 6,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "class SelkiesStreamingApp:\n    def __init__(\n        self,\n        async_event_loop,\n        framerate,\n        encoder,\n        data_streaming_server=None,\n        mode=\"websockets\",\n    ):\n        self.server_enable_resize = ENABLE_RESIZE",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "DataStreamingServer",
        "kind": 6,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "class DataStreamingServer:\n    \"\"\"Handles the data WebSocket connection for input, stats, and control messages.\"\"\"\n    def __init__(\n        self,\n        port,\n        app,\n        uinput_mouse_socket,\n        js_socket_path,\n        enable_clipboard,\n        enable_cursors,",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "fit_res",
        "kind": 2,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "def fit_res(w, h, max_w, max_h):\n    if w <= max_w and h <= max_h:\n        return w, h\n    aspect = w / h\n    if w > max_w:\n        w = max_w\n        h = int(w / aspect)\n    if h > max_h:\n        h = max_h\n        w = int(h * aspect)",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "parse_dri_node_to_index",
        "kind": 2,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "def parse_dri_node_to_index(node_path: str) -> int:\n    \"\"\"\n    Parses a DRI node path like '/dev/dri/renderD128' into an index (e.g., 0).\n    Returns -1 if the path is invalid, malformed, or empty, which\n    disables VA-API usage in the capture module.\n    \"\"\"\n    if not node_path or not node_path.startswith('/dev/dri/renderD'):\n        if node_path:\n             logger.warning(f\"Invalid DRI node format: '{node_path}'. Expected '/dev/dri/renderD...'. VA-API will be disabled.\")\n        return -1",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "ws_entrypoint",
        "kind": 2,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "def ws_entrypoint():\n    try:\n        asyncio.run(main())\n    except KeyboardInterrupt:\n        logger.info(\"Application stopped by KeyboardInterrupt.\")\n    except SystemExit as e:\n        logger.info(f\"Application exited with code {e.code}.\")\n    except Exception:\n        logger.critical(\"Unhandled exception at entrypoint:\", exc_info=True)\n    finally:",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "BACKPRESSURE_ALLOWED_DESYNC_MS",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "BACKPRESSURE_ALLOWED_DESYNC_MS = 2000\nBACKPRESSURE_LATENCY_THRESHOLD_MS = 50\nBACKPRESSURE_CHECK_INTERVAL_S = 0.5\nMAX_UINT16_FRAME_ID = 65535\nFRAME_ID_SUSPICIOUS_GAP_THRESHOLD = (\n    MAX_UINT16_FRAME_ID // 2\n)\nSTALLED_CLIENT_TIMEOUT_SECONDS = 4.0\nRTT_SMOOTHING_SAMPLES = 20\nSENT_FRAME_TIMESTAMP_HISTORY_SIZE = 1000",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "BACKPRESSURE_LATENCY_THRESHOLD_MS",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "BACKPRESSURE_LATENCY_THRESHOLD_MS = 50\nBACKPRESSURE_CHECK_INTERVAL_S = 0.5\nMAX_UINT16_FRAME_ID = 65535\nFRAME_ID_SUSPICIOUS_GAP_THRESHOLD = (\n    MAX_UINT16_FRAME_ID // 2\n)\nSTALLED_CLIENT_TIMEOUT_SECONDS = 4.0\nRTT_SMOOTHING_SAMPLES = 20\nSENT_FRAME_TIMESTAMP_HISTORY_SIZE = 1000\nTARGET_FRAMERATE = 60",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "BACKPRESSURE_CHECK_INTERVAL_S",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "BACKPRESSURE_CHECK_INTERVAL_S = 0.5\nMAX_UINT16_FRAME_ID = 65535\nFRAME_ID_SUSPICIOUS_GAP_THRESHOLD = (\n    MAX_UINT16_FRAME_ID // 2\n)\nSTALLED_CLIENT_TIMEOUT_SECONDS = 4.0\nRTT_SMOOTHING_SAMPLES = 20\nSENT_FRAME_TIMESTAMP_HISTORY_SIZE = 1000\nTARGET_FRAMERATE = 60\nUINPUT_MOUSE_SOCKET = \"\"",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "MAX_UINT16_FRAME_ID",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "MAX_UINT16_FRAME_ID = 65535\nFRAME_ID_SUSPICIOUS_GAP_THRESHOLD = (\n    MAX_UINT16_FRAME_ID // 2\n)\nSTALLED_CLIENT_TIMEOUT_SECONDS = 4.0\nRTT_SMOOTHING_SAMPLES = 20\nSENT_FRAME_TIMESTAMP_HISTORY_SIZE = 1000\nTARGET_FRAMERATE = 60\nUINPUT_MOUSE_SOCKET = \"\"\nJS_SOCKET_PATH = \"/tmp\"",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "FRAME_ID_SUSPICIOUS_GAP_THRESHOLD",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "FRAME_ID_SUSPICIOUS_GAP_THRESHOLD = (\n    MAX_UINT16_FRAME_ID // 2\n)\nSTALLED_CLIENT_TIMEOUT_SECONDS = 4.0\nRTT_SMOOTHING_SAMPLES = 20\nSENT_FRAME_TIMESTAMP_HISTORY_SIZE = 1000\nTARGET_FRAMERATE = 60\nUINPUT_MOUSE_SOCKET = \"\"\nJS_SOCKET_PATH = \"/tmp\"\nENABLE_CLIPBOARD = True",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "STALLED_CLIENT_TIMEOUT_SECONDS",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "STALLED_CLIENT_TIMEOUT_SECONDS = 4.0\nRTT_SMOOTHING_SAMPLES = 20\nSENT_FRAME_TIMESTAMP_HISTORY_SIZE = 1000\nTARGET_FRAMERATE = 60\nUINPUT_MOUSE_SOCKET = \"\"\nJS_SOCKET_PATH = \"/tmp\"\nENABLE_CLIPBOARD = True\nENABLE_BINARY_CLIPBOARD = False\nENABLE_CURSORS = True\nCURSOR_SIZE = 32",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "RTT_SMOOTHING_SAMPLES",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "RTT_SMOOTHING_SAMPLES = 20\nSENT_FRAME_TIMESTAMP_HISTORY_SIZE = 1000\nTARGET_FRAMERATE = 60\nUINPUT_MOUSE_SOCKET = \"\"\nJS_SOCKET_PATH = \"/tmp\"\nENABLE_CLIPBOARD = True\nENABLE_BINARY_CLIPBOARD = False\nENABLE_CURSORS = True\nCURSOR_SIZE = 32\nDEBUG_CURSORS = False",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "SENT_FRAME_TIMESTAMP_HISTORY_SIZE",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "SENT_FRAME_TIMESTAMP_HISTORY_SIZE = 1000\nTARGET_FRAMERATE = 60\nUINPUT_MOUSE_SOCKET = \"\"\nJS_SOCKET_PATH = \"/tmp\"\nENABLE_CLIPBOARD = True\nENABLE_BINARY_CLIPBOARD = False\nENABLE_CURSORS = True\nCURSOR_SIZE = 32\nDEBUG_CURSORS = False\nENABLE_RESIZE = True",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "TARGET_FRAMERATE",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "TARGET_FRAMERATE = 60\nUINPUT_MOUSE_SOCKET = \"\"\nJS_SOCKET_PATH = \"/tmp\"\nENABLE_CLIPBOARD = True\nENABLE_BINARY_CLIPBOARD = False\nENABLE_CURSORS = True\nCURSOR_SIZE = 32\nDEBUG_CURSORS = False\nENABLE_RESIZE = True\nAUDIO_CHANNELS_DEFAULT = 2",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "UINPUT_MOUSE_SOCKET",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "UINPUT_MOUSE_SOCKET = \"\"\nJS_SOCKET_PATH = \"/tmp\"\nENABLE_CLIPBOARD = True\nENABLE_BINARY_CLIPBOARD = False\nENABLE_CURSORS = True\nCURSOR_SIZE = 32\nDEBUG_CURSORS = False\nENABLE_RESIZE = True\nAUDIO_CHANNELS_DEFAULT = 2\nAUDIO_BITRATE_DEFAULT = 320000",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "JS_SOCKET_PATH",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "JS_SOCKET_PATH = \"/tmp\"\nENABLE_CLIPBOARD = True\nENABLE_BINARY_CLIPBOARD = False\nENABLE_CURSORS = True\nCURSOR_SIZE = 32\nDEBUG_CURSORS = False\nENABLE_RESIZE = True\nAUDIO_CHANNELS_DEFAULT = 2\nAUDIO_BITRATE_DEFAULT = 320000\nGPU_ID_DEFAULT = 0",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "ENABLE_CLIPBOARD",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "ENABLE_CLIPBOARD = True\nENABLE_BINARY_CLIPBOARD = False\nENABLE_CURSORS = True\nCURSOR_SIZE = 32\nDEBUG_CURSORS = False\nENABLE_RESIZE = True\nAUDIO_CHANNELS_DEFAULT = 2\nAUDIO_BITRATE_DEFAULT = 320000\nGPU_ID_DEFAULT = 0\nPIXELFLUX_VIDEO_ENCODERS = [\"jpeg\", \"x264enc\", \"x264enc-striped\"]",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "ENABLE_BINARY_CLIPBOARD",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "ENABLE_BINARY_CLIPBOARD = False\nENABLE_CURSORS = True\nCURSOR_SIZE = 32\nDEBUG_CURSORS = False\nENABLE_RESIZE = True\nAUDIO_CHANNELS_DEFAULT = 2\nAUDIO_BITRATE_DEFAULT = 320000\nGPU_ID_DEFAULT = 0\nPIXELFLUX_VIDEO_ENCODERS = [\"jpeg\", \"x264enc\", \"x264enc-striped\"]\nimport logging",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "ENABLE_CURSORS",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "ENABLE_CURSORS = True\nCURSOR_SIZE = 32\nDEBUG_CURSORS = False\nENABLE_RESIZE = True\nAUDIO_CHANNELS_DEFAULT = 2\nAUDIO_BITRATE_DEFAULT = 320000\nGPU_ID_DEFAULT = 0\nPIXELFLUX_VIDEO_ENCODERS = [\"jpeg\", \"x264enc\", \"x264enc-striped\"]\nimport logging\nLOGLEVEL = logging.INFO",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "CURSOR_SIZE",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "CURSOR_SIZE = 32\nDEBUG_CURSORS = False\nENABLE_RESIZE = True\nAUDIO_CHANNELS_DEFAULT = 2\nAUDIO_BITRATE_DEFAULT = 320000\nGPU_ID_DEFAULT = 0\nPIXELFLUX_VIDEO_ENCODERS = [\"jpeg\", \"x264enc\", \"x264enc-striped\"]\nimport logging\nLOGLEVEL = logging.INFO\nlogging.basicConfig(level=LOGLEVEL)",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "DEBUG_CURSORS",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "DEBUG_CURSORS = False\nENABLE_RESIZE = True\nAUDIO_CHANNELS_DEFAULT = 2\nAUDIO_BITRATE_DEFAULT = 320000\nGPU_ID_DEFAULT = 0\nPIXELFLUX_VIDEO_ENCODERS = [\"jpeg\", \"x264enc\", \"x264enc-striped\"]\nimport logging\nLOGLEVEL = logging.INFO\nlogging.basicConfig(level=LOGLEVEL)\nlogger_selkies_gamepad = logging.getLogger(\"selkies_gamepad\")",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "ENABLE_RESIZE",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "ENABLE_RESIZE = True\nAUDIO_CHANNELS_DEFAULT = 2\nAUDIO_BITRATE_DEFAULT = 320000\nGPU_ID_DEFAULT = 0\nPIXELFLUX_VIDEO_ENCODERS = [\"jpeg\", \"x264enc\", \"x264enc-striped\"]\nimport logging\nLOGLEVEL = logging.INFO\nlogging.basicConfig(level=LOGLEVEL)\nlogger_selkies_gamepad = logging.getLogger(\"selkies_gamepad\")\nlogger_gst_app = logging.getLogger(\"gst_app\")",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "AUDIO_CHANNELS_DEFAULT",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "AUDIO_CHANNELS_DEFAULT = 2\nAUDIO_BITRATE_DEFAULT = 320000\nGPU_ID_DEFAULT = 0\nPIXELFLUX_VIDEO_ENCODERS = [\"jpeg\", \"x264enc\", \"x264enc-striped\"]\nimport logging\nLOGLEVEL = logging.INFO\nlogging.basicConfig(level=LOGLEVEL)\nlogger_selkies_gamepad = logging.getLogger(\"selkies_gamepad\")\nlogger_gst_app = logging.getLogger(\"gst_app\")\nlogger_gst_app_resize = logging.getLogger(\"gst_app_resize\")",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "AUDIO_BITRATE_DEFAULT",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "AUDIO_BITRATE_DEFAULT = 320000\nGPU_ID_DEFAULT = 0\nPIXELFLUX_VIDEO_ENCODERS = [\"jpeg\", \"x264enc\", \"x264enc-striped\"]\nimport logging\nLOGLEVEL = logging.INFO\nlogging.basicConfig(level=LOGLEVEL)\nlogger_selkies_gamepad = logging.getLogger(\"selkies_gamepad\")\nlogger_gst_app = logging.getLogger(\"gst_app\")\nlogger_gst_app_resize = logging.getLogger(\"gst_app_resize\")\nlogger_input_handler = logging.getLogger(\"input_handler\")",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "GPU_ID_DEFAULT",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "GPU_ID_DEFAULT = 0\nPIXELFLUX_VIDEO_ENCODERS = [\"jpeg\", \"x264enc\", \"x264enc-striped\"]\nimport logging\nLOGLEVEL = logging.INFO\nlogging.basicConfig(level=LOGLEVEL)\nlogger_selkies_gamepad = logging.getLogger(\"selkies_gamepad\")\nlogger_gst_app = logging.getLogger(\"gst_app\")\nlogger_gst_app_resize = logging.getLogger(\"gst_app_resize\")\nlogger_input_handler = logging.getLogger(\"input_handler\")\nlogger = logging.getLogger(\"main\")",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "PIXELFLUX_VIDEO_ENCODERS",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "PIXELFLUX_VIDEO_ENCODERS = [\"jpeg\", \"x264enc\", \"x264enc-striped\"]\nimport logging\nLOGLEVEL = logging.INFO\nlogging.basicConfig(level=LOGLEVEL)\nlogger_selkies_gamepad = logging.getLogger(\"selkies_gamepad\")\nlogger_gst_app = logging.getLogger(\"gst_app\")\nlogger_gst_app_resize = logging.getLogger(\"gst_app_resize\")\nlogger_input_handler = logging.getLogger(\"input_handler\")\nlogger = logging.getLogger(\"main\")\ndata_logger = logging.getLogger(\"data_websocket\")",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "LOGLEVEL",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "LOGLEVEL = logging.INFO\nlogging.basicConfig(level=LOGLEVEL)\nlogger_selkies_gamepad = logging.getLogger(\"selkies_gamepad\")\nlogger_gst_app = logging.getLogger(\"gst_app\")\nlogger_gst_app_resize = logging.getLogger(\"gst_app_resize\")\nlogger_input_handler = logging.getLogger(\"input_handler\")\nlogger = logging.getLogger(\"main\")\ndata_logger = logging.getLogger(\"data_websocket\")\nX11_CAPTURE_AVAILABLE = False\nPCMFLUX_AVAILABLE = False",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "logger_selkies_gamepad",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "logger_selkies_gamepad = logging.getLogger(\"selkies_gamepad\")\nlogger_gst_app = logging.getLogger(\"gst_app\")\nlogger_gst_app_resize = logging.getLogger(\"gst_app_resize\")\nlogger_input_handler = logging.getLogger(\"input_handler\")\nlogger = logging.getLogger(\"main\")\ndata_logger = logging.getLogger(\"data_websocket\")\nX11_CAPTURE_AVAILABLE = False\nPCMFLUX_AVAILABLE = False\nimport asyncio\nimport argparse",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "logger_gst_app",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "logger_gst_app = logging.getLogger(\"gst_app\")\nlogger_gst_app_resize = logging.getLogger(\"gst_app_resize\")\nlogger_input_handler = logging.getLogger(\"input_handler\")\nlogger = logging.getLogger(\"main\")\ndata_logger = logging.getLogger(\"data_websocket\")\nX11_CAPTURE_AVAILABLE = False\nPCMFLUX_AVAILABLE = False\nimport asyncio\nimport argparse\nimport base64",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "logger_gst_app_resize",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "logger_gst_app_resize = logging.getLogger(\"gst_app_resize\")\nlogger_input_handler = logging.getLogger(\"input_handler\")\nlogger = logging.getLogger(\"main\")\ndata_logger = logging.getLogger(\"data_websocket\")\nX11_CAPTURE_AVAILABLE = False\nPCMFLUX_AVAILABLE = False\nimport asyncio\nimport argparse\nimport base64\nimport ctypes",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "logger_input_handler",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "logger_input_handler = logging.getLogger(\"input_handler\")\nlogger = logging.getLogger(\"main\")\ndata_logger = logging.getLogger(\"data_websocket\")\nX11_CAPTURE_AVAILABLE = False\nPCMFLUX_AVAILABLE = False\nimport asyncio\nimport argparse\nimport base64\nimport ctypes\nimport json",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "logger = logging.getLogger(\"main\")\ndata_logger = logging.getLogger(\"data_websocket\")\nX11_CAPTURE_AVAILABLE = False\nPCMFLUX_AVAILABLE = False\nimport asyncio\nimport argparse\nimport base64\nimport ctypes\nimport json\nimport os",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "data_logger",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "data_logger = logging.getLogger(\"data_websocket\")\nX11_CAPTURE_AVAILABLE = False\nPCMFLUX_AVAILABLE = False\nimport asyncio\nimport argparse\nimport base64\nimport ctypes\nimport json\nimport os\nimport pathlib",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "X11_CAPTURE_AVAILABLE",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "X11_CAPTURE_AVAILABLE = False\nPCMFLUX_AVAILABLE = False\nimport asyncio\nimport argparse\nimport base64\nimport ctypes\nimport json\nimport os\nimport pathlib\nimport re",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "PCMFLUX_AVAILABLE",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "PCMFLUX_AVAILABLE = False\nimport asyncio\nimport argparse\nimport base64\nimport ctypes\nimport json\nimport os\nimport pathlib\nimport re\nimport struct",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "upload_path",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "upload_path = os.getenv('FILE_MANAGER_PATH', '~/Desktop')\nupload_dir_path = os.path.expanduser(upload_path)\ntry:\n    os.makedirs(upload_dir_path, exist_ok=True)\n    logger.info(f\"Upload directory ensured: {upload_dir_path}\")\nexcept OSError as e:\n    logger.error(f\"Could not create upload directory {upload_dir_path}: {e}\")\n    upload_dir_path = None\nclass SelkiesAppError(Exception):\n    pass",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "upload_dir_path",
        "kind": 5,
        "importPath": "src.selkies.selkies",
        "description": "src.selkies.selkies",
        "peekOfCode": "upload_dir_path = os.path.expanduser(upload_path)\ntry:\n    os.makedirs(upload_dir_path, exist_ok=True)\n    logger.info(f\"Upload directory ensured: {upload_dir_path}\")\nexcept OSError as e:\n    logger.error(f\"Could not create upload directory {upload_dir_path}: {e}\")\n    upload_dir_path = None\nclass SelkiesAppError(Exception):\n    pass\nclass SelkiesStreamingApp:",
        "detail": "src.selkies.selkies",
        "documentation": {}
    },
    {
        "label": "X11_KEYSYM_MAP",
        "kind": 5,
        "importPath": "src.selkies.server_keysym_map",
        "description": "src.selkies.server_keysym_map",
        "peekOfCode": "X11_KEYSYM_MAP = {\n    0xffe1: {'char': None, 'xkey_name': 'Shift_L'},\n    0xffe2: {'char': None, 'xkey_name': 'Shift_R'},\n    0xffe3: {'char': None, 'xkey_name': 'Control_L'},\n    0xffe4: {'char': None, 'xkey_name': 'Control_R'},\n    0xffe5: {'char': None, 'xkey_name': 'Caps_Lock'},\n    0xffe9: {'char': None, 'xkey_name': 'Alt_L'},\n    0xffea: {'char': None, 'xkey_name': 'Alt_R'},\n    0xffe7: {'char': None, 'xkey_name': 'Meta_L'},\n    0xffe8: {'char': None, 'xkey_name': 'Meta_R'},",
        "detail": "src.selkies.server_keysym_map",
        "documentation": {}
    },
    {
        "label": "AppSettings",
        "kind": 6,
        "importPath": "src.selkies.settings",
        "description": "src.selkies.settings",
        "peekOfCode": "class AppSettings:\n    \"\"\"\n    Parses and stores application settings from command-line arguments and\n    environment variables, based on a centralized definition list.\n    \"\"\"\n    def __init__(self):\n        parser = argparse.ArgumentParser(description=\"Selkies WebSocket Streaming Server\")\n        self._add_arguments(parser)\n        args, _ = parser.parse_known_args()\n        self._process_and_set_attributes(args)",
        "detail": "src.selkies.settings",
        "documentation": {}
    },
    {
        "label": "SETTING_DEFINITIONS",
        "kind": 5,
        "importPath": "src.selkies.settings",
        "description": "src.selkies.settings",
        "peekOfCode": "SETTING_DEFINITIONS = [\n    # Core Feature Toggles\n    {'name': 'audio_enabled', 'type': 'bool', 'default': True, 'help': 'Enable server-to-client audio streaming.'},\n    {'name': 'microphone_enabled', 'type': 'bool', 'default': True, 'help': 'Enable client-to-server microphone forwarding.'},\n    {'name': 'gamepad_enabled', 'type': 'bool', 'default': True, 'help': 'Enable gamepad support.'},\n    {'name': 'clipboard_enabled', 'type': 'bool', 'default': True, 'help': 'Enable clipboard synchronization.'},\n    {'name': 'command_enabled', 'type': 'bool', 'default': True, 'help': 'Enable parsing of command websocket messages.'},\n    {'name': 'file_transfers', 'type': 'list', 'default': 'upload,download', 'meta': {'allowed': ['upload', 'download']}, 'help': 'Allowed file transfer directions (comma-separated: \"upload,download\"). Set to \"\" or \"none\" to disable.'},\n    # Video & Encoder Settings\n    {'name': 'encoder', 'type': 'enum', 'default': 'x264enc', 'meta': {'allowed': ['x264enc', 'x264enc-striped', 'jpeg']}, 'help': 'The default video encoder.'},",
        "detail": "src.selkies.settings",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "src.selkies.settings",
        "description": "src.selkies.settings",
        "peekOfCode": "settings = AppSettings()\nif settings.debug[0]:\n    logging.getLogger().setLevel(logging.DEBUG)\n    logging.getLogger(\"websockets\").setLevel(logging.WARNING)\nelse:\n    logging.getLogger().setLevel(logging.INFO)\n    logging.getLogger(\"websockets\").setLevel(logging.WARNING)",
        "detail": "src.selkies.settings",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web",
        "description": "web",
        "peekOfCode": "app = web.Application()\napp.router.add_get(\"/ws\", websocket_handler)\n# Serve static files\ncurrent_path = pathlib.Path(__file__).parent\nstatic_path = current_path / \"static\"\nprint(static_path)\napp.router.add_static(\"/\", path=static_path, name=\"static\")\nif __name__ == '__main__':\n    # Parse command-line arguments\n    parser = argparse.ArgumentParser(description='Run WebSocket server')",
        "detail": "web",
        "documentation": {}
    },
    {
        "label": "current_path",
        "kind": 5,
        "importPath": "web",
        "description": "web",
        "peekOfCode": "current_path = pathlib.Path(__file__).parent\nstatic_path = current_path / \"static\"\nprint(static_path)\napp.router.add_static(\"/\", path=static_path, name=\"static\")\nif __name__ == '__main__':\n    # Parse command-line arguments\n    parser = argparse.ArgumentParser(description='Run WebSocket server')\n    parser.add_argument('--port', type=int, default=8080, \n                        help='Port to run the server on (default: 8080)')\n    args = parser.parse_args()",
        "detail": "web",
        "documentation": {}
    },
    {
        "label": "static_path",
        "kind": 5,
        "importPath": "web",
        "description": "web",
        "peekOfCode": "static_path = current_path / \"static\"\nprint(static_path)\napp.router.add_static(\"/\", path=static_path, name=\"static\")\nif __name__ == '__main__':\n    # Parse command-line arguments\n    parser = argparse.ArgumentParser(description='Run WebSocket server')\n    parser.add_argument('--port', type=int, default=8080, \n                        help='Port to run the server on (default: 8080)')\n    args = parser.parse_args()\n    web.run_app(app, port=args.port)",
        "detail": "web",
        "documentation": {}
    }
]